#!/bin/bash
# Copyright (c) 2022 Zwdeff
# https://github.com/GMagNLL
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

__version__="V1.0"

Color="\033[m"
ColorR="\033[m"
Vermelho="\033[1;31m"
VermelhoBAD="\033[0;31m"
Verde="\033[1;32m"
VerdeBAD="\033[0;32m"
Amarelo="\033[1;33m"
AmareloBAD="\033[0;33m"
Azul="\033[1;34m"
AzulBAD="\033[0;34m"
Roxo="\033[1;35m"
RoxoBAD="\033[35m"
AzulMarinho="\033[1;36m"
Branco="\033[1;37m"
BrancoBAD="\033[0;37m"

sudo_su(){
echo -e $Vermelho"Ola! voce nao tem root ou fakeroot."$ColorR
echo -e $Vermelho"Aconselho a nao mexer em sua /sources.list/"$Color
echo -e $Vermelho"Mesmo que voce nao tenha root este script"\
                 "contem muitas\nferramentas do kali Linux."$ColorR
echo -e $Vermelho"Mesmo que voce nao possa Instala-las, este script"$ColorR
echo -e $Vermelho"contem muitas Informacoes sobre"\
                 "todas as ferramentas do katoolin."$ColorR
echo -e $Vermelho"Voce pode escolher algumas e Instalar depois que"$ColorR
echo -e $Vermelho"conseguir, *root ou /FAKEROOT/COM/SUDO/FUNCIONAL/"$ColorR
}
Torior=$(( ( RANDOM % 3 )  + 1 ))
Enter(){
echo -e $Verde
read -p "Enter para entra em EEGANO. ou Ctrl ^C ^Z Para Sair: "
echo -e $ColorR
}
if [[ $UID = 0 ]]; then
   sleep 0

else
   if [[ $AUID -eq 0 ]]; then
      sudo_su
      echo -e $Branco"Oque e Fake Root?"$ColorR
      echo -e $Branco"fakeroot - executa comandos"\
                     "em um ambiente"$ColorR
      echo -e $Branco"fingindo privilegios de root"\
                     "para manipulacao"$ColorR
      echo -e $Branco"de arquivos."$ColorR
      echo -e $Branco"Ao todo ele da um ambiente de raiz falso."
      echo -e $Branco"E para utilizar a funcao de atualizar"\
                     "a sources.list"$ColorR
      echo -e $Branco"E essencial ter root ou fakeroot"$ColorR
      echo -e $Branco"para a utilizacao do comando SUDO."$ColorR
      Enter
      sleep 3
    fi
 fi

Dantes(){
echo -e $Color
echo -e "1) Ver categorias"
echo -e "2) Update [APT][UPDATE]"
echo -e "3) Full-Upgrade"
echo -e "4) Adicionar Kali sources.list"
echo -e "5) Sobre este Script"
echo -e "6) Apt list --upgradable"
echo -e "7) Help? Comandos Disponiveis"
echo -e "8) Remover Kali sources.list"
echo -e "9) Install kali-menu"
echo -e "0) Para sair"
}

katoolin_alert(){
echo -e $Vermelho"[W] Antes de atualizar seu sistema, remova"\
                 "todos os repositorios Kali-linux para evitar qualquer"\
                 "tipo de problema ."$ColorR
}
Mordomo="Francys"
MenuDokaServant(){
echo -e $Verde"+ -- -- +=[ Author: Zwdeff | Homepage: github.com/GMagNLL"$ColorR
echo -e $Verde"+ -- -- +=[ 385 Tools\n"$ColorR
katoolin_alert
Dantes
}

Help(){
echo -e $Color"Copyright (c) 2022 Zwdeff. All rights reserved"$ColorR
echo -e $Color"Zwdeff Homepage: https://github.com/GMagNLL\n"$ColorR
}

cmd(){
echo -e $Color"[Menu Inicial <list>]"$ColorR
echo -e $Color"[Universal <P01, P02, P03, P04, P05>]"$ColorR
echo -e $Color"[Universal <P06, P07, P08, P09, P10>]"$ColorR
echo -e $Color"[Universal <P11, P12, P13>]"$ColorR
echo -e $Color"[Universal <exit or 99>]"$ColorR
echo -e $Color"[Universal <back>]\n"$ColorR

echo -e $Branco"P01: [ Atalho Coleta de Informacoes ]"$ColorR
echo -e $Branco"P02: [ Atalho Analise de Vulnerabilidade ]"
echo -e $Branco"PO3: [ Atalho Ataque a Redes sem Fio ]"$ColorR
echo -e $Branco"PO4: [ Atalho Aplicativos da web ]"$ColorR
echo -e $Branco"P05: [ Atalho Farejamento & Falsificacao ]"$ColorR
echo -e $Branco"P06: [ Atalho Mantendo o Acesso ]"$ColorR
echo -e $Branco"P07: [ Atalho Ferramentas de Reportacao ]"$ColorR
echo -e $Branco"P08: [ Atalho Ferramentas de Exploracao ]"$ColorR
echo -e $Branco"P09: [ Atalho Ferramentas Forenses ]"$ColorR
echo -e $Branco"P10: [ Atalho Teste de Estresse ]"$ColorR
echo -e $Branco"P11: [ Atalho Ataques de Senha ]"$ColorR
echo -e $Branco"P12: [ Atalho Engenharia Reversa ]"$ColorR
echo -e $Branco"P13: [ Atalho Hacking de Hardware ]\n"$ColorR
echo -e $Branco"LIST: [ Lista o conteudo sources.list ]"$ColorR
echo -e $Branco"BACK: [ Volta para guia Anterior ]"$ColorR
}

if [[ $1 = "--version" ]]; then
   echo $__version__
   exit
elif [[ $1 = "-h" ]]; then
     Branco=$Color
     BrancoBAD=$Color
     sleep 1
     Help
     cmd
     exit
elif [[ $1 = "--help" ]]; then
     Branco=$Color
     BrancoBAD=$Color
     sleep 1
     Help
     cmd
     exit
elif [[ $1 = "--h" ]]; then
     Branco=$Color
     BrancoBAD=$Color
     sleep 1
     Help
     cmd
     exit
elif [[ $1 = "" ]]; then
     sleep 0
else
   sleep 1
   echo -e $Color"ERROR:\n"$ColorR
   echo -e $Color"Use: [-h] [--help]\n"$ColorR
   echo -e $Color"[--version]"$ColorR
   exit
fi

DokaBanner(){
clear
Z=$__version__
Color=$Vermelho
echo -e $Verde"King of Chess ... [LORD][YUKI][Snow][Lord]"$ColorR
echo -e $AzulMarinho"
 [---]                                            [---]
 [---]       e   e         e Y8b       e88 Y88    [---]
            d8b d8b       d8b Y8b     d888   Y
           e Y8b Y8b     d888b Y8b   C8888 eeee
          d8b Y8b Y8b   d888888888b   Y888 888P
         d888b Y8b Y8b d8888888b Y8b    88 88
 [---]                                            [---]
 [---]    ( G )( M )( A )( G )( N )( L )( L )     [---]
 [---]    |Kali| linux|tools|Installer, "$Z"|     [---]
"$ColorR
Mordomo="Servant"
MenuDokaServant
Color=$AzulMarinho
}
if [ $Torior = "1" ]; then
   DokaBanner
fi
DokaShell(){
clear
Z=$__version__
Color=$Vermelho
echo -e $Verde"King of Xadrez ... [LORD][YUKI][Snow][Lord]"$ColorR
echo -e $AzulMarinho"
 [---]                                            [---]
 [---]       e   e         e Y8b       e88 Y88    [---]
            d8b d8b       d8b Y8b     d888   Y
           e Y8b Y8b     d888b Y8b   C8888 eeee
          d8b Y8b Y8b   d888888888b   Y888 888P
         d888b Y8b Y8b d8888888b Y8b    88 88
 [---]                                            [---]
 [---]    ( G )( M )( A )( G )( N )( L )( L )     [---]
 [---]    |Kali| linux|tools|Installer, "$Z"|     [---]
 "$ColorR
Mordomo="Mag"
MenuDokaServant
Color=$AzulMarinho
}
if [ $Torior = "2" ]; then
   DokaShell
fi
Morning(){
clear
Z=$__version__
Color=$Vermelho
echo -e $Verde"King of Xadrez ... [LORD][YUKI][Snow][Lord]"$ColorR
echo -e $AzulMarinho"
 [---]                                            [---]
 [---]       e   e         e Y8b       e88 Y88    [---]
            d8b d8b       d8b Y8b     d888   Y
           e Y8b Y8b     d888b Y8b   C8888 eeee
          d8b Y8b Y8b   d888888888b   Y888 888P
         d888b Y8b Y8b d8888888b Y8b    88 88
 [---]                                            [---]
 [---]    ( G )( M )( A )( G )( N )( L )( L )     [---]
 [---]    |Kali| linux|tools|Installer, "$Z"|     [---]
"$ColorR
Mordomo="star"
MenuDokaServant
Color=$AzulMarinho
}
if [ $Torior = "3" ]; then
   Morning
fi
Sobre(){
echo -e
echo -e $BrancoBAD"EEGANO TOOLS e um script em bash shell"$ColorR
echo -e $Branco"E um Pequeno Instalador de Ferramentas."$ColorR
echo -e $Branco"Mesmo sendo Simples EEGANO Contem Informacoes"$ColorR
echo -e $Branco"Sobre todas as ferramentas do katoolin."$ColorR
echo -e $Branco"EEGANO e uma Atualizacao de:"$ColorR
echo -e $Branco"https://github.com/GMagNLL/doxyTools."$ColorR
echo -e $BrancoBAD"Script em desenvolvimento Nome: EEGANO\n"$ColorR
}
ffError(){
echo -e $Vermelho"command not found."$ColorR
}
HelpMe(){
Sobre
cmd
}

FPrompt(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $L
}
FPromptC(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $N
}
FPromptP2(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $A
}
FPromptP13(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $O
}
FPromptP12(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $M
}
FPromptP11(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $K
}
FPromptP10(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $J
}
FPromptP9(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $I
}
FPromptP8(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $H
}
FPromptP7(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $G
}
FPromptP6(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $E
}
FPromptP5(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $D
}
FPromptP4(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $C
}
FPromptP3(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $F
}
FPromptP1(){
echo -e $Color
echo -e "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" $B
}
KaliLib(){
cd ~/
apt-get -y update
apt-get -y install wget
wget https://http.kali.org/kali/pool/main/k/kali-archive-keyring/kali-archive-keyring_2022.1_all.deb
sudo apt install ./kali-archive-keyring_2022.1_all.deb
rm -rf kali-archive-keyring_2022.1_all.deb
sleep 2
echo -e $Verde"KaliLib Keyring OK."$Color
}
KaliLibKeyring(){
cd ~/
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install wget 1> /dev/null 2> /dev/null
wget https://http.kali.org/kali/pool/main/k/kali-archive-keyring/kali-archive-keyring_2022.1_all.deb\
1> /dev/null 2> /dev/null
sudo apt install ./kali-archive-keyring_2022.1_all.deb\
1> /dev/null 2> /dev/null
rm -rf kali-archive-keyring_2022.1_all.deb
sleep 2
echo -e $Verde"KaliLib Keyring OK."$Color
sleep 1
}

All_Tools(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install john
apt-get -y install ncrack
apt-get -y install chntpw
apt-get -y install hydra
apt-get -y install seclists
apt-get -y install arduino
apt-get -y install john-data
apt-get -y install hydra-gtk
apt-get -y install qemu-user
apt-get -y install multiforcer
apt-get -y install rainbowcrack
apt-get -y install oclgausscrack
apt-get -y install maskprocessor
apt-get -y install johnny
apt-get -y install flashrom
apt-get -y install libflashrom1
apt-get -y install libflashrom-dev
apt-get -y install maltego-teeth
apt-get -y install freerdp2-dev
apt-get -y install freerdp2-shadow-x11
apt-get -y install freerdp2-wayland
apt-get -y install freerdp2-x11
apt-get -y install libfreerdp-client2-2
apt-get -y install libfreerdp-server2-2
apt-get -y install libfreerdp-shadow-subsystem2-2
apt-get -y install libfreerdp-shadow2-2
apt-get -y install libfreerdp2-2
apt-get -y install libuwac0-0
apt-get -y install smbmap
apt-get -y install libuwac0-dev
apt-get -y install libwinpr-tools2-2
apt-get -y install libwinpr2-2
apt-get -y install libwinpr2-dev
apt-get -y install winpr-utils
apt-get -y install statsprocessor
apt-get -y install wordlists
apt-get -y install hash-identifier
apt-get -y install gpp-decrypt
apt-get -y install crunch
apt-get -y install cmospwd
apt-get -y install pev
apt-get -y install pack
apt-get -y install rarcrack
apt-get -y install creddump7
apt-get -y install burpsuite
apt-get -y install cewl
apt-get -y install dhcpig
apt-get -y install reaver
apt-get -y install rtpflood
apt-get -y install t50
apt-get -y install ipv6-toolkit
apt-get -y install thc-ipv6
apt-get -y install patator
apt-get -y install termineter
apt-get -y install iaxflood
apt-get -y install slowhttptest
apt-get -y install inviteflood
apt-get -y install mdk3
apt-get -y install smali
apt-get -y install unhide
apt-get -y install wce
apt-get -y install upx-ucl
apt-get -y install dmeventd
apt-get -y install dmsetup
apt-get -y install thc-pptp-bruter
apt-get -y install libdevmapper-dev
apt-get -y install libdevmapper-event1.02.1
apt-get -y install libdevmapper1.02.1
apt-get -y install liblvm2-dev
apt-get -y install liblvm2cmd2.03
apt-get -y install lvm2
apt-get -y install lvm2-dbusd
apt-get -y install lvm2-lockd
apt-get -y install xmount
apt-get -y install yara-doc
apt-get -y install yara
apt-get -y install libyara9
apt-get -y install libyara-dev
apt-get -y install vinetto
apt-get -y install samdump2
apt-get -y install scalpel
apt-get -y install ssdeep
apt-get -y install tcpick
apt-get -y install tcpreplay
apt-get -y install winregfs
apt-get -y install xplico
apt-get -y install sipcrack
apt-get -y install libunrar-dev
apt-get -y install libunrar-headers
apt-get -y install libunrar5
apt-get -y install unrar
apt-get -y install sqlitebrowser
apt-get -y install tcpdump
apt-get -y install tcpflow
apt-get -y install hashid
apt-get -y install tcpflow-nox
apt-get -y install scrounge-ntfs
apt-get -y install polenum
apt-get -y install libtsk-dev
apt-get -y install libtsk19
apt-get -y install sleuthkit
apt-get -y install libfuzzy-dev
apt-get -y install libfuzzy2
apt-get -y install safecopy
apt-get -y install rsakeyfind
apt-get -y install ollydbg
apt-get -y install binwalk
apt-get -y install apktool
apt-get -y install openocd
apt-get -y install libpst-dev
apt-get -y install libpst4
apt-get -y install dex2jar
apt-get -y install pst-utils
apt-get -y install truecrack
apt-get -y install libregfi-dev
apt-get -y install libregfi1
apt-get -y install python3-pyregfi
apt-get -y install regripper
apt-get -y install reglookup
apt-get -y install reglookup-doc
apt-get -y install rkhunter
apt-get -y install recoverjpeg
apt-get -y install radare2
apt-get -y install radare2-cutter
apt-get -y install nasm
apt-get -y install plaso
apt-get -y install rifiuti
apt-get -y install rifiuti2
apt-get -y install python3-plaso
apt-get -y install myrescue
apt-get -y install memdump
apt-get -y install p7zip
apt-get -y install p7zip-full
apt-get -y install libradare2-5.0.0
apt-get -y install libradare2-common
apt-get -y install libradare2-dev
apt-get -y install gdb-minimal
apt-get -y install gdb-multiarch
apt-get -y install gpart
apt-get -y install gdb-source
apt-get -y install gdbserver
apt-get -y install gdb
apt-get -y install autopsy
apt-get -y install qemu-system-x86
apt-get -y install libparted-dev
apt-get -y install libparted-fs-resize0
apt-get -y install libparted-i18n
apt-get -y install libparted2
apt-get -y install parted
apt-get -y install parted-doc
apt-get -y install pasco
apt-get -y install javasnoop
apt-get -y install rephrase
apt-get -y install recoverdm
apt-get -y install undbx
apt-get -y install mac-robber
apt-get -y install missidentify
apt-get -y install chkrootkit
apt-get -y install grokevt
apt-get -y install libmdb3
apt-get -y install libmdbsql3
apt-get -y install mdbtools
apt-get -y install mdbtools-dev
apt-get -y install mdbtools-doc
apt-get -y install odbc-mdbtools
apt-get -y install cabextract
apt-get -y install dcfldd
apt-get -y install ewf-tools
apt-get -y install libewf-dev
apt-get -y install libewf2
apt-get -y install nasty
apt-get -y install magicrescue
apt-get -y install gparted
apt-get -y install gparted-common
apt-get -y install exifprobe
apt-get -y install exiv2
apt-get -y install jadx
apt-get -y install metacam
apt-get -y install libexiv2-27
apt-get -y install libexiv2-dev
apt-get -y install libexiv2-doc
apt-get -y install forensic-artifacts
apt-get -y install python3-libewf
apt-get -y install ext4magic
apt-get -y install forensics-colorize
apt-get -y install inetsim
apt-get -y install bytecode-viewer
apt-get -y install afflib-tools
apt-get -y install libafflib-dev
apt-get -y install libafflib0v5
apt-get -y install python3-artifacts
apt-get -y install edb-debugger
apt-get -y install edb-debugger-plugins
apt-get -y install python3-capstone
apt-get -y install bulk-extractor
apt-get -y install ext3grep
apt-get -y install capstone-tool
apt-get -y install p0f
apt-get -y install pdfid
apt-get -y install ddrescue
apt-get -y install libcapstone-dev
apt-get -y install libcapstone4
apt-get -y install guymager
apt-get -y install galleta
apt-get -y install dc3dd
apt-get -y install dumpzilla
apt-get -y install libdistorm3-3
apt-get -y install libdistorm3-dev
apt-get -y install python3-distorm3
apt-get -y install hashdeep
apt-get -y install rsmangler
apt-get -y install extundelete
apt-get -y install foremost
apt-get -y install pdf-parser
apt-get -y install fcrackzip
apt-get -y install armitage
apt-get -y install beef-xss
apt-get -y install exploitdb
apt-get -y install msfpc
apt-get -y install metasploit-framework
apt-get -y install linux-exploit-suggester
apt-get -y install shellnoob
apt-get -y install crackle
apt-get -y install backdoor-factory
apt-get -y install set
apt-get -y install commix
apt-get -y install cisco-torch
apt-get -y install cisco-ocs
apt-get -y install cutycapt
apt-get -y install eyewitness
apt-get -y install metagoofil
apt-get -y install recordmydesktop
apt-get -y install pipal
apt-get -y install faraday
apt-get -y install nipper-ng
apt-get -y install dradis
apt-get -y install dos2unix
apt-get -y install cryptcat
apt-get -y install ridenum
apt-get -y install weevely
apt-get -y install httptunnel
apt-get -y install pwnat
apt-get -y install sbd
apt-get -y install powersploit
apt-get -y install webshells
apt-get -y install nishang
apt-get -y install dns2tcp
apt-get -y install cymothoa
apt-get -y install dbd
apt-get -y install ettercap-common
apt-get -y install ettercap-graphical
apt-get -y install ettercap-text-only
apt-get -y install ismtp
apt-get -y install netsniff-ng
apt-get -y install ohrwurm
apt-get -y install macchanger
apt-get -y install protos-sip
apt-get -y install darkstat
apt-get -y install sctpscan
apt-get -y install sslstrip
apt-get -y install responder
apt-get -y install driftnet
apt-get -y install xspy
apt-get -y install dsniff
apt-get -y install bettercap
apt-get -y install zaproxy
apt-get -y install sslsplit
apt-get -y install sniffjoke
apt-get -y install sipvicious
apt-get -y install sqldict
apt-get -y install rtpmixsound
apt-get -y install webscarab
apt-get -y install sslsniff
apt-get -y install rtpinsertsound
apt-get -y install voiphopper
apt-get -y install rebind
apt-get -y install rtpbreak
apt-get -y install libwireshark-data
apt-get -y install libwireshark-dev
apt-get -y install libwireshark15
apt-get -y install libwiretap-dev
apt-get -y install libwiretap12
apt-get -y install libwsutil-dev
apt-get -y install libwsutil13
apt-get -y install tshark
apt-get -y install wireshark
apt-get -y install wireshark-common
apt-get -y install wireshark-dev
apt-get -y install wireshark-doc
apt-get -y install wireshark-gtk
apt-get -y install wireshark-qt
apt-get -y install wifi-honey
apt-get -y install mitmproxy
apt-get -y install isr-evilgrade
apt-get -y install dnschef
apt-get -y install hamster-sidejack
apt-get -y install hexinject
apt-get -y install fiked
apt-get -y install sipp
apt-get -y install apache-users
apt-get -y install sqlmap
apt-get -y install jsql
apt-get -y install parsero
apt-get -y install davtest
apt-get -y install tnscmd10g
apt-get -y install apache2
apt-get -y install apache2-bin
apt-get -y install apache2-data
apt-get -y install apache2-dev
apt-get -y install apache2-doc
apt-get -y install apache2-ssl-dev
apt-get -y install apache2-suexec-custom
apt-get -y install apache2-suexec-pristine
apt-get -y install apache2-utils
apt-get -y install libapache2-mod-md
apt-get -y install libapache2-mod-proxy-uwsgi
apt-get -y install proxytunnel
apt-get -y install xsser
apt-get -y install siege
apt-get -y install websploit
apt-get -y install finalrecon
apt-get -y install sidguesser
apt-get -y install laudanum
apt-get -y install redsocks
apt-get -y install cadaver
apt-get -y install medusa
apt-get -y install wpscan
apt-get -y install qsslcaudit
apt-get -y install httprint
apt-get -y install nikto
apt-get -y install owasp-mantra-ff
apt-get -y install webhttrack
apt-get -y install libhttrack-dev
apt-get -y install libhttrack2
apt-get -y install webhttrack-common
apt-get -y install proxytrack
apt-get -y install ftester
apt-get -y install watobo
apt-get -y install hakrawler
apt-get -y install uniscan
apt-get -y install skipfish
apt-get -y install heartleech
apt-get -y install sqlsus
apt-get -y install wapiti
apt-get -y install webacoo
apt-get -y install sqlninja
apt-get -y install recon-ng
apt-get -y install wfuzz
apt-get -y install ffuf
apt-get -y install paros
apt-get -y install httrack
apt-get -y install padbuster
apt-get -y install joomscan
apt-get -y install jboss-autopwn
apt-get -y install plecost
apt-get -y install dirbuster
apt-get -y install whatweb
apt-get -y install dirb
apt-get -y install aircrack-ng
apt-get -y install asleap
apt-get -y install hostapd-wpe
apt-get -y install airgeddon
apt-get -y install iw
apt-get -y install mdk4
apt-get -y install hashcat
apt-get -y install hashcat-data
apt-get -y install cutecom
apt-get -y install ubertooth
apt-get -y install ubertooth-firmware
apt-get -y install ubertooth-firmware-source
apt-get -y install libubertooth-dev
apt-get -y install libubertooth1
apt-get -y install bluetooth
apt-get -y install btscanner
apt-get -y install bluez
apt-get -y install bluez-cups
apt-get -y install bluez-hcidump
apt-get -y install ophcrack
apt-get -y install ophcrack-cli
apt-get -y install bluez-meshd
apt-get -y install bluez-obexd
apt-get -y install bluez-source
apt-get -y install bluez-test-scripts
apt-get -y install bluez-test-tools
apt-get -y install libbluetooth-dev
apt-get -y install libbluetooth3
apt-get -y install bluelog
apt-get -y install rfdump
apt-get -y install gnuradio
apt-get -y install clang
apt-get -y install clang-format
apt-get -y install clang-tidy
apt-get -y install clang-tools
apt-get -y install clangd
apt-get -y install libc++-dev
apt-get -y install libc++1
apt-get -y install libc++abi-dev
apt-get -y install libc++abi1
apt-get -y install libclang-cpp-dev
apt-get -y install libclang-dev
apt-get -y install libclang1
apt-get -y install liblldb-dev
apt-get -y install libllvm-ocaml-dev
apt-get -y install libomp-dev
apt-get -y install libomp5
apt-get -y install lld
apt-get -y install lldb
apt-get -y install llvm
apt-get -y install llvm-dev
apt-get -y install llvm-runtime
apt-get -y install python3-clang
apt-get -y install python3-lldb
apt-get -y install uhd-images
apt-get -y install inspectrum
apt-get -y install blueranger
apt-get -y install hackrf
apt-get -y install uhd-host
apt-get -y install bluesnarfer
apt-get -y install bully
apt-get -y install minicom
apt-get -y install gr-air-modes
apt-get -y install cowpatty
apt-get -y install eapmd5pass
apt-get -y install fern-wifi-cracker
apt-get -y install spectools
apt-get -y install sakis3g
apt-get -y install kalibrate-rtl
apt-get -y install kismet
apt-get -y install mfcuk
apt-get -y install mfoc
apt-get -y install mfterm
apt-get -y install multimon-ng
apt-get -y install pixiewps
apt-get -y install redfang
apt-get -y install rtlsdr-scanner
apt-get -y install spooftooph
apt-get -y install freeradius-wpe
apt-get -y install wifite
apt-get -y install bed
apt-get -y install doona
apt-get -y install oscanner
apt-get -y install afl
apt-get -y install sipsak
apt-get -y install spike
apt-get -y install afl++
apt-get -y install afl++-doc
apt-get -y install afl++-clang
apt-get -y install afl-doc
apt-get -y install afl-clang
apt-get -y install cisco-auditing-tool
apt-get -y install cisco-global-exploiter
apt-get -y install sfuzz
apt-get -y install unix-privesc-check
apt-get -y install thc-ssl-dos
apt-get -y install yersinia
apt-get -y install tns10g
apt-get -y install siparmyknife
apt-get -y install openvas-scanner
apt-get -y install copy-router-config
apt-get -y install greenbone-security-assistant
apt-get -y install nmap
apt-get -y install lynis
apt-get -y install gvm
apt-get -y install openvas
apt-get -y install braa
apt-get -y install lbd
apt-get -y install lynx
apt-get -y install sudo
apt-get -y install git
apt-get -y install irpas
apt-get -y install arping
apt-get -y install onesixtyone
apt-get -y install iputils-arping
apt-get -y install rcracki-mt
apt-get -y install xprobe
apt-get -y install legion
apt-get -y install hping3
apt-get -y install passing-the-hash
apt-get -y install dotdotpwn
apt-get -y install urlcrazy
apt-get -y install sslyze
apt-get -y install nbtscan
apt-get -y install dnsmap
apt-get -y install masscan
apt-get -y install fierce
apt-get -y install pdfcrack
apt-get -y install android-sdk
apt-get -y install tlssled
apt-get -y install firewalk
apt-get -y install casefile
apt-get -y install dnswalk
apt-get -y install fping
apt-get -y install enumiax
apt-get -y install twofi
apt-get -y install dmitry
apt-get -y install intrace
apt-get -y install ike-scan
apt-get -y install osrframework
apt-get -y install amap
apt-get -y install 0trace
apt-get -y install unicornscan
apt-get -y install maryam
apt-get -y install ace-voip
apt-get -y install goofile
apt-get -y install theharvester
apt-get -y install smtp-user-enum
apt-get -y install enum4linux
apt-get -y install brutespray
apt-get -y install swaks
apt-get -y install fragrouter
apt-get -y install sslh
apt-get -y install snmpcheck
apt-get -y install dnsrecon
apt-get -y install netmask
apt-get -y install dnstracer
apt-get -y install dnsenum
apt-get -y install knockpy
apt-get -y install sucrack
apt-get -y install cython-doc
apt-get -y install cython3
apt-get -y install python-is-python2
apt-get -y install python3-pip
apt-get -y install python3
sudo apt-get -y install python3-usb
sudo apt-get -y install libgcrypt-dev
sudo pip3 install scapy
cd ~/
apt-get -y install git python-pip python\
sudo apt-get -y install libpq-dev\
python-dev libxml2-dev\
python3-dev\
libxslt1-dev libldap2-dev\
build-essential\
libsasl2-dev\
libffi-dev
git clone https://github.com/CiscoCXSecurity/bbqsql.git
cd bbqsql
python2 setup.py install
cd ~/
rm -rf bbqsql
apt-get -y install curl git git-core\
gem ant g++ build-essential\
openssl libreadline6-dev zlib1g\
zlib1g-dev libssl-dev libyaml-dev\
libsqlite3-0 libsqlite3-dev sqlite3\
libxml2-dev libxslt-dev autoconf\
libc6-dev ncurses-dev automake\
libtool bison libxml2-dev\
libxslt1-dev\
libcurl4-openssl-dev\
libsqlite3-dev
apt-get -y install ruby ruby-dev
git clone https://github.com/Arachni/arachni.git
cd arachni
gem install bundler
gem install chromedriver-installer
gem install redcarpet -v '3.5.1'
bundle install --without prof
rake install
cd ~/
rm -rf arachni
git clone https://github.com/lokifer/BlindElephant.git
cd BlindElephant && cd src
python2 setup.py install
cd ~/
rm -rf BlindElephant
git clone https://github.com/1N3/BlackWidow.git
cd BlackWidow
sudo bash install.sh
cd ~/
rm -rf BlackWidow
git clone https://github.com/riverloopsec/killerbee.git
cd killerbee
python3 setup.py install
cd ~/
rm -rf killerbee
git clone https://github.com/wifiphisher/wifiphisher.git
cd wifiphisher
sudo python3 setup.py install\
cd ~/
rm -rf wifiphisher
git clone https://github.com/glotzerlab/gsd
cd gsd
sudo python3 setup.py install
cd ~/
rm -rf gsd
git clone https://github.com/LionSec/xerosploit.git
cd xerosploit
sudo python install.py
cd ~/
rm -rf xerosploit
sudo xerosploit
sudo bash
apt-get -y install python2.7\
python2.7-dev\
python-pip\
docutils\
git\
perl nmap sslscan
cd /opt
git clone https://github.com/golismero/golismero.git
cd golismero
pip2 install -r requirements.txt
pip2 install -r requirements_unix.txt
ln -s /opt/golismero/golismero.py /usr/bin/golismero
cd ~/
git clone https://github.com/Hood3dRob1n/BinGoo.git
cd BinGoo
chmod +x bingoo
./bingoo
cd ~/
rm -rf BinGoo
git clone https://github.com/urbanadventurer/bing-ip2hosts.git
chmod +x bing-ip2hosts/bing-ip2hosts
cp bing-ip2hosts/bing-ip2hosts /usr/local/bin
cd ~/
rm -rf bing-ip2hosts
git clone https://github.com/trustedsec/social-engineer-toolkit.git
cd social-engineer-toolkit
python setup.py install
sudo setoolkit
cd ~/
rm -rf social-engineer-toolkit
git clone https://github.com/PowerScript/katanaFramework.git
cd katanaFramework
chmod +x dependencies
sudo sh dependencies
chmod a+x install
sudo python install
cd ~/
rm -rf katanaFramework
}

MenuDokaKing(){
Torior=$(( ( RANDOM % 3 )  + 1 ))
Categorias2P1(){
echo -e $Color"\n[ Todas as categorias (0) [Home]\n"$ColorR
echo -e $Color"(01) - Coleta de Informacoes (68) Tools"$ColorR
echo -e $Color"(02) - Analise de Vulnerabilidade (37) Tools"$ColorR
echo -e $Color"(03) - Ataque a Redes sem Fio (46) Tools"$ColorR
echo -e $Color"(04) - Aplicativos da web (68) Tools"$ColorR
echo -e $Color"(05) - Farejamento & Falsificacao (42) Tools"$ColorR
echo -e $Color"(06) - Mantendo o Acesso (13) Tools"$ColorR
echo -e $Color"(07) - Ferramentas de Reportacao (10) Tools"$ColorR
echo -e $Color"(08) - Ferramentas de Exploracao (21) Tools"$ColorR
echo -e $Color"(09) - Ferramentas Forenses (97) Tools"$ColorR
echo -e $Color"(10) - Teste de Estresse (12) Tools"$ColorR
echo -e $Color"(11) - Ataques de senha (50) Tools"$ColorR
echo -e $Color"(12) - Engenharia Reversa (16) Tools"$ColorR
echo -e $Color"(13) - Hacking de Hardware (15) Tools\n"$ColorR
echo -e $Color"(L) - Lixera Projetos Arquivados!"\
              "(39) Lixos ]"$ColorR
echo -e "\n"
echo -e $Verde"Selecione uma categoria ou pressione (x)"$ColorR
echo -e $Verde"Para instalar todas as ferramentas Kali Linux.\n"$ColorR
}

PPromptC(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" N
}
Categorias(){
Categorias2P1
PPromptC
if [ "$N" = "01" ]; then
   N="1"
fi
if [ "$N" = "02" ]; then
   N="2"
fi
if [ "$N" = "03" ]; then
   N="3"
fi
if [ "$N" = "04" ]; then
   N="4"
fi
if [ "$N" = "05" ]; then
   N="5"
fi
if [ "$N" = "06" ]; then
   N="6"
fi
if [ "$N" = "07" ]; then
   N="7"
fi
if [ "$N" = "08" ]; then
   N="8"
fi
if [ "$N" = "09" ]; then
   N="9"
fi
while [ "$N" ];
do
  if [ "$N" ]; then
     if [ "$N" = "back" ]; then
        if [ $Mordomo = "Mag" ]; then
           clear
           DokaShell
           MenuDokaKing
        fi
        if [ $Mordomo = "Servant" ]; then
           clear
           DokaBanner
           MenuDokaKing
        fi
        if [ $Mordomo = "star" ]; then
           clear
           Morning
           MenuDokaKing
        fi

     elif [ "$N" = "Back" ]; then
          if [ $Mordomo = "" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$N" = "L" ]; then
          clear
          if [ $Mordomo = "Mag" ]; then
             DokaShell
          fi
          if [ $Mordomo = "Servant" ]; then
             DokaBanner
          fi
          if [ $Mordomo = "star" ]; then
             Morning
          fi
          FPrompt
          Categorias2P1
          FPromptC
          Lixera
          PPromptC

     elif [ "$N" = "l" ]; then
          clear
          if [ $Mordomo = "Mag" ]; then
             DokaShell
          fi
          if [ $Mordomo = "Servant" ]; then
             DokaBanner
          fi
          if [ $Mordomo = "star" ]; then
             Morning
          fi
          FPrompt
          Categorias2P1
          FPromptC
          Lixera
          PPromptC

     elif [ "$N" = "LIXERA" ]; then
          clear
          if [ $Mordomo = "Mag" ]; then
             DokaShell
          fi
          if [ $Mordomo = "Servant" ]; then
             DokaBanner
          fi
          if [ $Mordomo = "star" ]; then
             Morning
          fi
          FPrompt
          Categorias2P1
          FPromptC
          Lixera
          PPromptC

     elif [ "$N" = "Lixera" ]; then
          clear
          if [ $Mordomo = "Mag" ]; then
             DokaShell
          fi
          if [ $Mordomo = "Servant" ]; then
             DokaBanner
          fi
          if [ $Mordomo = "star" ]; then
             Morning
          fi
          FPrompt
          Categorias2P1
          FPromptC
          Lixera
          PPromptC

     elif [ "$N" = "LIXOS" ]; then
          clear
          if [ $Mordomo = "Mag" ]; then
             DokaShell
          fi
          if [ $Mordomo = "Servant" ]; then
             DokaBanner
          fi
          if [ $Mordomo = "star" ]; then
             Morning
          fi
          FPrompt
          Categorias2P1
          FPromptC
          Lixera
          PPromptC

     elif [ "$N" = "Lixos" ]; then
          clear
          if [ $Mordomo = "Mag" ]; then
             DokaShell
          fi
          if [ $Mordomo = "Servant" ]; then
             DokaBanner
          fi
          if [ $Mordomo = "star" ]; then
             Morning
          fi
          FPrompt
          Categorias2P1
          FPromptC
          Lixera
          PPromptC

     elif [ "$N" = "lixos" ]; then
          clear
          if [ $Mordomo = "Mag" ]; then
             DokaShell
          fi
          if [ $Mordomo = "Servant" ]; then
             DokaBanner
          fi
          if [ $Mordomo = "star" ]; then
             Morning
          fi
          FPrompt
          Categorias2P1
          FPromptC
          Lixera
          PPromptC

     elif [ "$N" = "LIXO" ]; then
          clear
          if [ $Mordomo = "Mag" ]; then
             DokaShell
          fi
          if [ $Mordomo = "Servant" ]; then
             DokaBanner
          fi
          if [ $Mordomo = "star" ]; then
             Morning
          fi
          FPrompt
          Categorias2P1
          FPromptC
          Lixera
          PPromptC

     elif [ "$N" = "Lixo" ]; then
          clear
          if [ $Mordomo = "Mag" ]; then
             DokaShell
          fi
          if [ $Mordomo = "Servant" ]; then
             DokaBanner
          fi
          if [ $Mordomo = "star" ]; then
             Morning
          fi
          FPrompt
          Categorias2P1
          FPromptC
          Lixera
          PPromptC

     elif [ "$N" = "lixo" ]; then
          clear
          if [ $Mordomo = "Mag" ]; then
             DokaShell
          fi
          if [ $Mordomo = "Servant" ]; then
             DokaBanner
          fi
          if [ $Mordomo = "star" ]; then
             Morning
          fi
          FPrompt
          Categorias2P1
          FPromptC
          Lixera
          PPromptC

     elif [ "$N" = "lixera" ]; then
          clear
          if [ $Mordomo = "Mag" ]; then
             DokaShell
          fi
          if [ $Mordomo = "Servant" ]; then
             DokaBanner
          fi
          if [ $Mordomo = "star" ]; then
             Morning
          fi
          FPrompt
          Categorias2P1
          FPromptC
          Lixera
          PPromptC

     elif [ "$N" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$N" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$N" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit
     elif [ "$N" = "P13" ]; then
          Programas13

     elif [ "$N" = "P12" ]; then
          Programas12

     elif [ "$N" = "P11" ]; then
          Programas11

     elif [ "$N" = "P10" ]; then
          Programas10

     elif [ "$N" = "P09" ]; then
          Programas09

     elif [ "$N" = "P08" ]; then
          Programas08

     elif [ "$N" = "P07" ]; then
          Programas07

     elif [ "$N" = "P06" ]; then
          Programas06

     elif [ "$N" = "P05" ]; then
          Programas05

     elif [ "$N" = "P04" ]; then
          Programas04

     elif [ "$N" = "P03" ]; then
          Programas03

     elif [ "$N" = "P02" ]; then
          Programas02

     elif [ "$N" = "P01" ]; then
          Programas01

     elif [ "$N" = "Programas01" ]; then
          Programas01

     elif [ "$N" = "Programas02" ]; then
          Programas02

     elif [ "$N" = "Programas03" ]; then
          Programas03

     elif [ "$N" = "Programas04" ]; then
          Programas04

     elif [ "$N" = "Programas05" ]; then
          Programas05

     elif [ "$N" = "Programas06" ]; then
          Programas06

     elif [ "$N" = "Programas07" ]; then
          Programas07

     elif [ "$N" = "Programas08" ]; then
          Programas08

     elif [ "$N" = "Programas09" ]; then
          Programas09

     elif [ "$N" = "Programas10" ]; then
          Programas10

     elif [ "$N" = "Programas11" ]; then
          Programas11

     elif [ "$N" = "Programas12" ]; then
          Programas12

     elif [ "$N" = "Programas13" ]; then
          Programas13

     elif [ "$N" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PPromptC

     elif [ "$N" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PPromptC

     elif [ "$N" = "13" ]; then
          Programas13

     elif [ "$N" = "12" ]; then
          Programas12

     elif [ "$N" = "11" ]; then
          Programas11

     elif [ "$N" = "10" ]; then
          Programas10

     elif [ "$N" = "9" ]; then
          Programas09

     elif [ "$N" = "8" ]; then
          Programas08

     elif [ "$N" = "7" ]; then
          Programas07

     elif [ "$N" = "6" ]; then
          Programas06

     elif [ "$N" = "5" ]; then
          Programas05

     elif [ "$N" = "4" ]; then
          Programas04

     elif [ "$N" = "3" ]; then
          Programas03

     elif [ "$N" = "2" ]; then
          Programas02

     elif [ "$N" = "1" ]; then
          Programas01

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaShell
   FPrompt
   Categorias
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias
fi
}
LixeraPrompt(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" LIXO
}
Lixera(){
echo -e $Branco"Lixera - Programas Quebrados, ou"$ColorR
echo -e $Branco"(De dificil Instalacao para o Programa EEGANO)."$ColorR
echo -e $Color"Dracnmap - git Offline."$ColorR
echo -e $Color"Bluepot - git.kali Offline."$ColorR
echo -e $Color"BlueMaho - git.kali Offline."$ColorR
echo -e $Color"Gr-scan - git.kali Offline."$ColorR
echo -e $Color"Inguma - Dificuldade para Instalar."$ColorR
echo -e $Color"WebSlayer - git.kali Offline."$ColorR
echo -e $Color"DBPwAudit - Metodo de Instalacao Offline."$ColorR
echo -e $Color"Fragroute - Metodo de Instalacao Offline."$ColorR
echo -e $Color"Ace-voip - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Deblaze - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Fimap - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"FunkLoad - apt-get Offiline."$ColorR
echo -e $Color"Grabber - apt-get Offline."$ColorR
echo -e $Color"Powerfuzzer - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"ProxyStrike - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"ua-tester - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Vega - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Powerfuzzer - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"HexorBase - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Wifitap - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Acccheck - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Funkload - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"pdgmail - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"sslcaudit - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"CDPSnarf - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"w3af - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Intersect - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"wol-e - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Cookie-Cadger - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"KeepNote - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"peepdf - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Miranda - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Keimpx - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Dnmap - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Ghost-Phisher - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"u3-pwn - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Automater - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"GISKismet - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Iphone-Backup-Analyzer - apt-get Offline."$ColorR
echo -e $Color"Removido do Kali Linux."$ColorR
echo -e $Color"Cheque em Kali: https://www.kali.org/docs/tools/removed-tools/"$ColorR
echo -e $Color"Infelismente todas as tools de “apt-get offline” o Kali Removeu."$ColorR
echo -e $Color"O resto sao de dificil instalacao para este humilde script “faca”"$ColorR
echo -e $Color"Manualmente a instalacao. ಠ_ಠ"$ColorR
echo -e $Color"1help Sobre Dracnmap"$ColorR
echo -e $Color"2help Sobre Bluepot"$ColorR
echo -e $Color"3help Sobre BlueMaho"$ColorR
echo -e $Color"4help Sobre Gr-scan"$ColorR
echo -e $Color"5help Sobre Inguma"$ColorR
echo -e $Color"6help Sobre DBPwAudit"$ColorR
echo -e $Color"7help Sobre Fragroute"$ColorR
echo -e $Color"8help Sobre Ace-voip"$ColorR
echo -e $Color"9help Sobre Deblaze"$ColorR
echo -e $Color"10help Sobre Fimap"$ColorR
echo -e $Color"11help Sobre FunkLoad"$ColorR
echo -e $Color"12help Sobre Grabber"$ColorR
echo -e $Color"13help Sobre Powerfuzzer"$ColorR
echo -e $Color"14help Sobre ProxyStrike"$ColorR
echo -e $Color"15help Sobre ua-tester"$ColorR
echo -e $Color"16help Sobre Vega"$ColorR
echo -e $Color"17help Sobre w3af"$ColorR
echo -e $Color"18help Sobre WebSlayer"$ColorR
echo -e $Color"19help Sobre wol-e"$ColorR
echo -e $Color"20help Sobre Miranda"$ColorR
echo -e $Color"21help Sobre Cookie-Cadger"$ColorR
echo -e $Color"22help Sobre GISKismet"$ColorR
echo -e $Color"23help Sobre Ghost-Phisher"$ColorR
echo -e $Color"24help Sobre Wifitap"$ColorR
echo -e $Color"25help Sobre Powerfuzzer"$ColorR
echo -e $Color"26help Sobre HexorBase"$ColorR
echo -e $Color"27help Sobre Acccheck"$ColorR
echo -e $Color"28help Sobre Automater"$ColorR
echo -e $Color"29help Sobre Dnmap"$ColorR
echo -e $Color"30help Sobre CDPSnarf"$ColorR
echo -e $Color"31help Sobre sslcaudit"$ColorR
echo -e $Color"32help Sobre Intersect"$ColorR
echo -e $Color"33help Sobre u3-pwn"$ColorR
echo -e $Color"34help Sobre KeepNote"$ColorR
echo -e $Color"35help Sobre Iphone-Backup-Analyzer"$ColorR
echo -e $Color"36help Sobre pdgmail"$ColorR
echo -e $Color"37help Sobre peepdf"$ColorR
echo -e $Color"38help Sobre Funkload"$ColorR
echo -e $Color"39help Sobre Keimpx"$ColorR
echo -e "\n"
echo -e $AzulMarinho"(back) Voltar."$ColorR
echo -e "\n"$ColorR
LixeraPrompt
while [ "$LIXO" ];
do
  if [ "$LIXO" ]; then
     if [ "$LIXO" = "1help" ]; then
        echo -e $BrancoBAD"Sobre Dracnmap:"$ColorR
        echo -e $Branco"Dracnmap e um programa de codigo aberto que esta usando"$ColorR
        echo -e $Branco"para explorar a rede e coletar informacoes com a ajuda do nmap."$ColorR
        echo -e $Branco"O comando Nmap vem com muitas opcoes que podem tornar o utilitario"$ColorR
        echo -e $Branco"mais robusto e dificil de seguir para novos usuarios."$ColorR
        echo -e $Branco"Portanto, o Dracnmap foi projetado para realizar varreduras"$ColorR
        echo -e $Branco"rapidas com o mecanismo de script utilizado do nmap"$ColorR
        echo -e $Branco"e o nmap pode executar varias tecnicas de varredura automatica"$ColorR
        echo -e $Branco"com os comandos avancados."$ColorR
        echo -e $BrancoBAD"Github: https://github.com/Screetsec/Dracnmap"$ColorR
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        LixeraPrompt

     elif [ "$LIXO" = "2help" ]; then
          echo -e $BrancoBAD"Sobre Bluepot:"$ColorR
          echo -e $Branco"Bluepot e um Honeypot Bluetooth escrito em Java, roda em Linux."$ColorR
          echo -e $Branco" Bluepot foi um projeto universitario"$ColorR
          echo -e $Branco"de terceiro ano tentando implementar"$ColorR
          echo -e $Branco"um Honeypot Bluetooth totalmente funcional."$ColorR
          echo -e $Branco"Um software projetado para aceitar e armazenar qualquer malware"$ColorR
          echo -e $Branco"enviado a ele e interagir com ataques comuns de Bluetooth, como “BlueBugging?”"$ColorR
          echo -e $Branco"e “BlueSnarfing?”."$ColorR
          echo -e $Branco"A conectividade Bluetooth e fornecida atraves"$ColorR
          echo -e $Branco"de dongles Bluetooth de hardware."$ColorR
          echo -e $Branco"O sistema tambem permite o monitoramento"$ColorR
          echo -e $Branco"de ataques por meio de uma interface grafica"$ColorR
          echo -e $Branco"de usuario que fornece graficos, listas, um"$ColorR
          echo -e $Branco"painel e analises mais detalhadas"$ColorR
          echo -e $Branco"a partir de arquivos de log."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/andrewmichaelsmith/bluepot"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "3help" ]; then
          echo -e $BrancoBAD"Sobre BlueMaho:"$ColorR
          echo -e $Branco"BlueMaho e GUI-shell (interface) para conjunto"$ColorR
          echo -e $Branco"de ferramentas para testar a seguranca de dispositivos bluetooth."$ColorR
          echo -e $Branco"E freeware, opensource, escrito em python, usa wxPyhon."$ColorR
          echo -e $Branco"Ele pode ser usado para testar dispositivos"$ColorR
          echo -e $Branco"BT para vulnerabilidades conhecidas e coisas importantes"$ColorR
          echo -e $Branco"a fazer – testar para encontrar vulnerabilidades desconhecidas."$ColorR
          echo -e $Branco"Tambem pode formar estatisticas agradaveis."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/zenware/bluemaho"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "4help" ]; then
          echo -e $BrancoBAD"Sobre Gr-scan:"$ColorR
          echo -e $Branco"gr-scan e um programa escrito em C++ e construido"$ColorR
          echo -e $Branco"sobre GNU Radio, rtl-sdr e o OsmoSDR Source Block."$ColorR
          echo -e $Branco"Destina-se a varrer uma faixa de frequencias e imprimir"$ColorR
          echo -e $Branco"uma lista de sinais descobertos."$ColorR
          echo -e $Branco"Ele deve funcionar com qualquer dispositivo"$ColorR
          echo -e $Branco"que funcione com esse bloco, incluindo dispositivos"$ColorR
          echo -e $Branco"Realtek RTL2832U."$ColorR
          echo -e $Branco"Desenvolvi este software usando um Compro U620F, que usa"$ColorR
          echo -e $Branco"um sintonizador E4000."$ColorR
          echo -e $Branco"Esse produto nao parece estar disponivel no"$ColorR
          echo -e $Branco"site dos EUA, mas o Receptor Newsky DVB-T"$ColorR
          echo -e $Branco"(Dispositivo RTL2832U/E4000) tem boas criticas."$ColorR
          echo -e $Branco"A versao atual do gr-scan e: 2012082301."$ColorR
          echo -e $BrancoBAD"Gr-scan Homepage: http://www.techmeology.co.uk/gr-scan/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "5help" ]; then
          echo -e $BrancoBAD"Sobre Inguma:"$ColorR
          echo -e $Branco"O Inguma e um kit de ferramentas gratuito"$ColorR
          echo -e $Branco"de teste de penetracao e descoberta de vulnerabilidade"$ColorR
          echo -e $Branco"inteiramente escrito em Python."$ColorR
          echo -e $Branco"O framework inclui modulos para descobrir"$ColorR
          echo -e $Branco"hosts, coletar informacoes, alvos de fuzz, nomes"$ColorR
          echo -e $Branco"de usuario e senhas de forca bruta, exploits"$ColorR
          echo -e $Branco"e um desmontador."$ColorR
          echo -e $BrancoBAD"Inguma Homepage: http://inguma.sourceforge.net/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "6help" ]; then
          echo -e $BrancoBAD"Sobre DBPwAudit:"$ColorR
          echo -e $Branco"DBPwAudit e uma ferramenta de auditoria de senha"$ColorR
          echo -e $Branco"de banco de dados Java que permite realizar auditorias"$ColorR
          echo -e $Branco"online de qualidade de senha para varios"$ColorR
          echo -e $Branco"mecanismos de banco de dados."$ColorR
          echo -e $Branco"O design do aplicativo permite a adicao facil"$ColorR
          echo -e $Branco"de drivers de banco de dados adicionais simplesmente"$ColorR
          echo -e $Branco"copiando novos drivers JDBC para o diretorio jdbc."$ColorR
          echo -e $BrancoBAD"Homepage: http://www.cqure.net/wp/dbpwaudit/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "7help" ]; then
          echo -e $BrancoBAD"Sobre Fragroute:"$ColorR
          echo -e $Branco"O fragroute intercepta, modifica e reescreve o trafego"$ColorR
          echo -e $Branco"de saida destinado a um host especificado, implementando"$ColorR
          echo -e $Branco"a maioria dos ataques"$ColorR
          echo -e $Branco"descritos no documento Secure Networks"$ColorR
          echo -e $Branco"(Insertion, Evasion, and Denial of Service:"$ColorR
          echo -e $Branco"Eluding Network Intrusion Detection)"$ColorR
          echo -e $Branco"de janeiro de 1998."$ColorR
          echo -e $Branco"Ele apresenta um conjunto de regras simples linguagem"$ColorR
          echo -e $Branco"para atrasar, duplicar, descartar,"$ColorR
          echo -e $Branco"fragmentar, sobrepor, imprimir, reordenar,"$ColorR
          echo -e $Branco"segmentar, rota de origem ou de outra"$ColorR
          echo -e $Branco"forma macaco com todos os"$ColorR
          echo -e $Branco"pacotes de saida destinados a um host"$ColorR
          echo -e $Branco"de destino, com suporte minimo"$ColorR
          echo -e $Branco"para comportamento aleatorio ou probabilistico."$ColorR
          echo -e $Branco"Esta ferramenta foi escrita de boa fe"$ColorR
          echo -e $Branco"para auxiliar no teste de sistemas de"$ColorR
          echo -e $Branco"deteccao de intrusao de rede,"$ColorR
          echo -e $Branco"firewalls e comportamento basico da pilha TCP/IP."$ColorR
          echo -e $Branco"Por favor, nao abuse deste software."$ColorR
          echo -e $BrancoBAD"Homepage: https://www.monkey.org/~dugsong/fragroute/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "8help" ]; then
          echo -e $BrancoBAD"Sobre Ace-voip:"$ColorR
          echo -e $Branco"Uma ferramenta simples de"$ColorR
          echo -e $Branco"enumeracao de diretorio"$ColorR
          echo -e $Branco"corporativo VoIP Ferramenta de enumeracao"$ColorR
          echo -e $Branco"de diretorio corporativo"$ColorR
          echo -e $Branco"VoIP que imita o comportamento de um Telefone IP"$ColorR
          echo -e $Branco"para baixar as entradas"$ColorR
          echo -e $Branco"de nome e ramal que um determinado telefone pode"$ColorR
          echo -e $Branco"exibir em sua interface de tela."$ColorR
          echo -e $Branco"Da mesma forma que o recurso de diretorio"$ColorR
          echo -e $Branco"corporativo dos hardphones"$ColorR
          echo -e $Branco"VoIP permite que os usuarios disquem"$ColorR
          echo -e $Branco"facilmente pelo nome por meio de seus"$ColorR
          echo -e $Branco"aparelhos VoIP, o ACE foi desenvolvido como uma"$ColorR
          echo -e $Branco"ideia de pesquisa nascida do VoIP Hopper"$ColorR
          echo -e $Branco"para automatizar ataques VoIP que podem"$ColorR
          echo -e $Branco"ser direcionados contra nomes em"$ColorR
          echo -e $Branco"um diretorio corporativo."$ColorR
          echo -e $Branco"O conceito e que, no futuro, os ataques serao"$ColorR
          echo -e $Branco"realizados contra usuarios com base em seu nome, em vez de"$ColorR
          echo -e $Branco"direcionar o trafego VoIP contra fluxos de audio"$ColorR
          echo -e $Branco"RTP aleatorios ou enderecos IP."$ColorR
          echo -e $Branco"O ACE funciona usando DHCP, TFTP e HTTP para"$ColorR
          echo -e $Branco"baixar o diretorio corporativo VoIP."$ColorR
          echo -e $Branco"Em seguida, ele envia o diretorio para um"$ColorR
          echo -e $Branco"arquivo de texto, que pode ser usado"$ColorR
          echo -e $Branco"como entrada para outras ferramentas de"$ColorR
          echo -e $Branco"avaliacao de VoIP."$ColorR
          echo -e $BrancoBAD"Homepage:"\
                            "http://ucsniff.sourceforge.net/ace.html"$ColorR
          echo -e $BrancoBAD"Github:"\
                            "https://github.com/haasosaurus/ace-voip"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "9help" ]; then
          echo -e $BrancoBAD"Sobre Deblaze:"$ColorR
          echo -e $Branco"Atraves do uso do modelo de programacao Flex"$ColorR
          echo -e $Branco"e da linguagem ActionScript, Flash Remoting nasceu."$ColorR
          echo -e $Branco"Os aplicativos Flash podem fazer solicitacoes"$ColorR
          echo -e $Branco"a um servidor remoto para chamar funcoes"$ColorR
          echo -e $Branco"do lado do servidor, como procurar contas, recuperar"$ColorR
          echo -e $Branco"dados e graficos adicionais"$ColorR
          echo -e $Branco"e realizar operacoes comerciais complexas."$ColorR
          echo -e $Branco"No entanto, a capacidade de chamar metodos remotos"$ColorR
          echo -e $Branco"tambem aumenta a superficie de ataque expostos"$ColorR
          echo -e $Branco"por esses aplicativos."$ColorR
          echo -e $Branco"Esta ferramenta permitira que voce execute enumeracao"$ColorR
          echo -e $Branco"e interrogacao de metodos"$ColorR
          echo -e $Branco"contra pontos finais de flash remoto."$ColorR
          echo -e $Branco"Deblaze surgiu como uma necessidade durante uma"$ColorR
          echo -e $Branco"poucas avaliacoes de seguranca de sites baseados"$ColorR
          echo -e $Branco"em flash que fizeram uso intenso de flash remoto."$ColorR
          echo -e $Branco"Eu precisava de algo para me dar a capacidade"$ColorR
          echo -e $Branco"de cavar um pouco mais fundo a tecnologia"$ColorR
          echo -e $Branco"e identificar falhas de seguranca."$ColorR
          echo -e $Branco"Em todos os servidores que eu vi assim"$ColorR
          echo -e $Branco"ate agora os nomes nao diferenciam maiusculas"$ColorR
          echo -e $Branco"de minusculas, tornando muito mais facil usar o bruteforce."$ColorR
          echo -e $Branco"Muitas vezes, as solicitacoes HTTP POST nao serao"$ColorR
          echo -e $Branco"registradas pelo servidor, portanto, o bruteforce"$ColorR
          echo -e $Branco"pode passar despercebido em sistemas mal monitorados."$ColorR
          echo -e $BrancoBAD"O Deblaze fornece a seguinte funcionalidade:"$ColorR
          echo -e $Branco"o Servico de Forca Bruta e Nomes de Metodos"$ColorR
          echo -e $Branco"o Metodo de Interrogacao"$ColorR
          echo -e $Branco"o Tecnologia Flex Impressao digital"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/SpiderLabs/deblaze"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "10help" ]; then
          echo -e $BrancoBAD"Sobre Fimap:"$ColorR
          echo -e $Branco"fimap e uma pequena ferramenta python que"$ColorR
          echo -e $Branco"pode encontrar, preparar, auditar, explorar"$ColorR
          echo -e $Branco"e ate pesquisar no Google automaticamente"$ColorR
          echo -e $Branco"para bugs de inclusao de arquivos locais"$ColorR
          echo -e $Branco"e remotos em webapps."$ColorR
          echo -e $Branco"fimap deve ser algo como sqlmap apenas"$ColorR
          echo -e $Branco"para bugs de LFI/RFI em vez de injecao de sql."$ColorR
          echo -e $Branco"Esta atualmente em desenvolvimento pesado,"$ColorR
          echo -e $Branco"mas e utilizavel."$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/fimap"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "11help" ]; then
          echo -e $BrancoBAD"Sobre FunkLoad:"$ColorR
          echo -e $Branco"FunkLoad e um testador web funcional"$ColorR
          echo -e $Branco"e de carga, escrito em Python, cujos principais"$ColorR
          echo -e $BrancoBAD"casos de uso sao:"$ColorR
          echo -e $Branco"Testes funcionais de projetos web e, portanto, testes"$ColorR
          echo -e $Branco"de regressao tambem."$ColorR
          echo -e $BrancoBAD"Teste de desempenho:"$ColorR
          echo -e $Branco"ao carregar o aplicativo da web e monitorar"$ColorR
          echo -e $Branco"seus servidores, ele ajuda a identificar"$ColorR
          echo -e $Branco"gargalos, fornecendo um relatorio"$ColorR
          echo -e $Branco"detalhado de medicao de desempenho."$ColorR
          echo -e $Branco"Ferramenta de teste de carga para expor bugs"$ColorR
          echo -e $Branco"que nao aparecem em testes superficiais, como"$ColorR
          echo -e $Branco"testes de volume ou testes de longevidade."$ColorR
          echo -e $Branco"Ferramenta de teste de estresse para sobrecarregar"$ColorR
          echo -e $Branco"os recursos do aplicativo da Web e testar"$ColorR
          echo -e $Branco"a capacidade de recuperacao do aplicativo."$ColorR
          echo -e $Branco"Escrevendo agentes da web por script de"$ColorR
          echo -e $Branco"qualquer tarefa repetitiva da web."$ColorR
          echo -e $Branco"Homepage: http://funkload.nuxeo.org/"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/nuxeo/FunkLoad"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "12help" ]; then
          echo -e $BrancoBAD"Sobre Grabber:"$ColorR
          echo -e $Branco"Grabber e um scanner de aplicativos da web."$ColorR
          echo -e $Branco"Basicamente, ele detecta algum tipo de vulnerabilidade"$ColorR
          echo -e $Branco"em seu site."$ColorR
          echo -e $Branco"Grabber e simples, nao rapido, mas"$ColorR
          echo -e $Branco"portatil e realmente adaptavel."$ColorR
          echo -e $Branco"Este software e projetado para escanear"$ColorR
          echo -e $Branco"pequenos sites, como sites pessoais, foruns etc."$ColorR
          echo -e $BrancoBAD"absolutamente nao e um grande aplicativo:"$ColorR
          echo -e $Branco"levaria muito tempo e inundaria sua rede."$ColorR
          echo -e $BrancoBAD"Homepage: http://rgaucher.info/beta/grabber/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "13help" ]; then
          echo -e $BrancoBAD"Sobre Powerfuzzer:"$ColorR
          echo -e $Branco"Powerfuzzer e um web fuzzer altamente automatizado"$ColorR
          echo -e $Branco"baseado em muitos outros fuzzers"$ColorR
          echo -e $Branco"Open Source disponiveis"$ColorR
          echo -e $Branco"(incl. cfuzzer, fuzzled, fuzzer.pl, jbrofuzz,"$ColorR
          echo -e $Branco"webscarab, wapiti, Socket Fuzzer) e informacoes"$ColorR
          echo -e $Branco"coletadas de varios recursos de seguranca e sites."$ColorR
          echo -e $Branco"E capaz de rastrear sites e identificar entradas."$ColorR
          echo -e $BrancoBAD"Atualmente, e capaz de identificar esses problemas:"$ColorR
          echo -e $Branco"* Cross Site Scripting (XSS)."$ColorR
          echo -e $Branco"* Injecoes (SQL, LDAP, codigo, comandos e XPATH)."$ColorR
          echo -e $Branco"* CRLF."$ColorR
          echo -e $Branco"* Status HTTP 500 (geralmente indicativo de uma possivel falha"$ColorR
          echo -e $Branco"de configuracao/seguranca, incluindo estouro de buffer)."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/marcinguy/powerfuzzer"$ColorR
          echo -e $BrancoBAD"Homepage: https://www.powerfuzzer.com/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "14help" ]; then
          echo -e $BrancoBAD"Sobre ProxyStrike:"$ColorR
          echo -e $Branco"ProxyStrike e uma ferramenta projetada"$ColorR
          echo -e $Branco"para encontrar vulnerabilidades"$ColorR
          echo -e $Branco"de injecao Sql e xss enquanto navega"$ColorR
          echo -e $Branco"em um aplicativo."$ColorR
          echo -e $Branco"O processo e muito simples, o ProxyStrike"$ColorR
          echo -e $Branco"funciona como um proxy passivo escutando"$ColorR
          echo -e $Branco"em porta 8008 por padrao, entao voce tem que"$ColorR
          echo -e $Branco"navegar no site desejado usando ProxyStrike"$ColorR
          echo -e $Branco"como proxy e atacara todos os parametros"$ColorR
          echo -e $Branco"no modo de fundo."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/bincker/proxystrike"$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/proxystrike"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "15help" ]; then
          echo -e $BrancoBAD"Sobre ua-tester:"$ColorR
          echo -e $ColorR"Essa ferramenta foi projetada"$ColorR
          echo -e $Branco"para verificar automaticamente uma determinada"$ColorR
          echo -e $Branco"URL usando uma lista de strings de User Agent padrao"$ColorR
          echo -e $Branco"e nao padrao fornecidas pelo usuario (1 por linha)."$ColorR
          echo -e $Branco"Os resultados dessas verificacoes"$ColorR
          echo -e $Branco"sao entao relatados ao usuario para analise"$ColorR
          echo -e $Branco"manual adicional, quando necessario."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/amenezes/ua-tester"$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/ua-tester"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "16help" ]; then
          echo -e $BrancoBAD"Sobre Vega:"$ColorR
          echo -e $Branco"Vega e uma gramatica de visualizacao, um formato"$ColorR
          echo -e $Branco"declarativo para criar, salvar e compartilhar designs"$ColorR
          echo -e $Branco"de visualizacao interativa."$ColorR
          echo -e $Branco"Com o Vega, voce pode descrever visualizacoes"$ColorR
          echo -e $Branco"de dados em formato JSON e gerar visualizacoes"$ColorR
          echo -e $Branco"interativas usando HTML5 Canvas ou SVG."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/vega/vega"$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/vega"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "17help" ]; then
          echo -e $BrancoBAD"mSobre w3af:"$ColorR
          echo -e $Branco"w3af e um scanner de seguranca"$ColorR
          echo -e $Branco"de aplicativos da web de codigo aberto"$ColorR
          echo -e $Branco"que ajuda desenvolvedores e testadores"$ColorR
          echo -e $Branco"de penetracao a identificar e explorar vulnerabilidades"$ColorR
          echo -e $Branco"em seus aplicativos da web."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/andresriancho/w3af"$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/w3af"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "18help" ]; then
          echo -e $BrancoBAD"Sobre WebSlayer:"$ColorR
          echo -e $Branco"WebSlayer e uma ferramenta projetada"$ColorR
          echo -e $Branco"para aplicacoes Web de forca bruta, pode ser"$ColorR
          echo -e $Branco"usada para encontrar recursos nao vinculados"$ColorR
          echo -e $Branco"(diretorios, servlets, scripts, arquivos, etc),"$ColorR
          echo -e $Branco"parametros GET e POST de forca bruta, parametros"$ColorR
          echo -e $Branco"de formularios bruteforce (Usuario/Senha),"$ColorR
          echo -e $Branco"Fuzzing, etc."$ColorR
          echo -e $Branco"A ferramenta possui um gerador de carga util"$ColorR
          echo -e $Branco"e um analisador de resultados"$ColorR
          echo -e $Branco"facil e poderoso."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/Malphaet/webslayer"$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/webslayer"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

    elif [ "$LIXO" = "19help" ]; then
          echo -e $BrancoBAD"Sobre Wol-e:"$ColorR
          echo -e $Branco"Endereco MAC para acordar clientes * Detectar tentativas WOL"$ColorR
          echo -e $Branco"na rede e salva-las em disco * Detectar senhas WOL"$ColorR
          echo -e $Branco"na rede e salva-las em disco * Acordar clientes"$ColorR
          echo -e $Branco"unicos (ataque pos-sniffing)"$ColorR
          echo -e $Branco"* Procurar dispositivos Apple na rede para WOL  habilitando"$ColorR
          echo -e $Branco"* Enviando solicitacoes WOL em massa"$ColorR
          echo -e $Branco"para todos os clientes Apple detectados."$ColorR
          echo -e $BrancoBAD"Kali: https://pkg.kali.org/pkg/wol-e"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "20help" ]; then
          echo -e $BrancoBAD"Sobre Miranda:"$ColorR
          echo -e $Branco"Aplicativo de ferramenta de administracao"$ColorR
          echo -e $Branco"UPNP projetado para descobrir, consultar e"$ColorR
          echo -e $Branco"interagir com dispositivos UPNP,"$ColorR
          echo -e $Branco"particularmente dispositivos de gateway de"$ColorR
          echo -e $Branco"Internet (tambem conhecidos como roteadores)."$ColorR
          echo -e $Branco"Ele pode ser usado para auditar dispositivos"$ColorR
          echo -e $Branco"habilitados para UPNP em uma rede quanto a"$ColorR
          echo -e $Branco"possiveis vulnerabilidades."$ColorR
          echo -e $BrancoBAD"Web Site: https://miranda-ng.org/"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/miranda-ng/miranda-ng"
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "21help" ]; then
          echo -e $BrancoBAD"Sobre Cookie Cadger:"$ColorR
          echo -e $Branco"Ferramenta de auditoria de cookies para redes"$ColorR
          echo -e $Branco"com e sem fio solicitacoes"$ColorR
          echo -e $Branco"HTTP GET inseguras."$ColorR
          echo -e $Branco"O Cookie Cadger ajuda a identificar"$ColorR
          echo -e $Branco"vazamentos de informacoes"$ColorR
          echo -e $Branco"de aplicativos que usam uma solicitacao"$ColorR
          echo -e $Branco"HTTP GET insegura."$ColorR
          echo -e $Branco"Cookie Cadger e uma ferramenta de codigo"$ColorR
          echo -e $Branco"aberto que permite interceptar"$ColorR
          echo -e $Branco"e reproduzir solicitacoes HTTP GET inseguras"$ColorR
          echo -e $Branco"especificas em um navegador."$ColorR
          echo -e $Branco"Cookie Cadger e um utilitario grafico que usa"$ColorR
          echo -e $Branco"o poder do pacote Wireshark e Java, e"$ColorR
          echo -e $Branco"totalmente multiplataforma, de codigo aberto,"$ColorR
          echo -e $Branco"pode monitorar uma conexao ethernet"$ColorR
          echo -e $Branco"com fio, Wi-Fi inseguro ou baixar um arquivo de"$ColorR
          echo -e $Branco"pacote capturado para analise offline."$ColorR
          echo -e $BrancoBAD"Autor: Matthew Sullivan"$ColorR
          echo -e $BrancoBAD"Github:"\
                            "https://github.com/sullivanmatt/CookieCadger"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "22help" ]; then
          echo -e $BrancoBAD"Sobre GISKismet:"$ColorR
          echo -e $Branco"GISKismet e uma ferramenta de visualizacao"$ColorR
          echo -e $Branco"de reconhecimento sem fio para representar dados"$ColorR
          echo -e $Branco"coletados usando Kismet de maneira flexivel."$ColorR
          echo -e $Branco"O GISKismet armazena as informacoes em um banco de dados"$ColorR
          echo -e $Branco"para que o usuario possa gerar graficos utilizando SQL."$ColorR
          echo -e $Branco"GISKismet atualmente usa SQLite"$ColorR
          echo -e $Branco"para o banco de dados e arquivos"$ColorR
          echo -e $Branco"GoogleEarth / KML para graficos."$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/giskismet"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "23help" ]; then
          echo -e $BrancoBAD"Sobre Ghost Phisher:"$ColorR
          echo -e $Branco"Ghost Phisher e um programa de software de auditoria"$ColorR
          echo -e $Branco"e ataque de seguranca sem fio e Ethernet escrito usando"$ColorR
          echo -e $Branco"a linguagem de programacao Python e a biblioteca"$ColorR
          echo -e $Branco"Python Qt GUI, o programa e capaz de emular pontos"$ColorR
          echo -e $Branco"de acesso e implantar varios servidores de rede internos"$ColorR
          echo -e $Branco"para redes, testes de penetracao"$ColorR
          echo -e $Branco"e ataques de phishing."$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/ghost-phisher"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/savio-code/ghost-phisher"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "24help" ]; then
          echo -e $BrancoBAD"Sobre Wifitap:"$ColorR
          echo -e $Branco"Wifitap e uma prova de conceito para comunicacao"$ColorR
          echo -e $Branco"em redes WiFi usando injecao de trafego."$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/wifitap"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/GDSSecurity/wifitap"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "25help" ]; then
          echo -e $BrancoBAD"Sobre Powerfuzzer:"$ColorR
          echo -e $Branco"Fuzzer web altamente automatizado e totalmente"$ColorR
          echo -e $Branco"personalizavel (fuzzer de aplicativo baseado"$ColorR
          echo -e $Branco"em protocolo HTTP) baseado"$ColorR
          echo -e $Branco"em muitos outros fuzzers de codigo aberto disponiveis"$ColorR
          echo -e $Branco"e informacoes coletadas"$ColorR
          echo -e $Branco"de varios recursos de seguranca e sites."$ColorR
          echo -e $Branco"Ele foi projetado para ser amigavel,"$ColorR
          echo -e $Branco"moderno, eficaz e funcional."$ColorR
          echo -e $BrancoBAD"Homepage: https://www.powerfuzzer.com/"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/marcinguy/powerfuzzer"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "26help" ]; then
          echo -e $BrancoBAD"Sobre HexorBase:"$ColorR
          echo -e $Branco"Gerenciamento de banco de dados multiplo e aplicacao"$ColorR
          echo -e $Branco"de auditoria em varios servidores de banco de"$ColorR
          echo -e $Branco"dados simultaneamente a partir de um"$ColorR
          echo -e $Branco"local centralizado, e capaz de realizar consultas SQL"$ColorR
          echo -e $Branco"e ataques de forca bruta contra"$ColorR
          echo -e $Branco"servidores de banco de dados comuns (MySQL, SQLite, Microsoft"$ColorR
          echo -e $Branco"SQL Server, Oracle, PostgreSQL)."$ColorR
          echo -e $Branco"O HexorBase permite o roteamento de pacotes por meio"$ColorR
          echo -e $Branco"de proxies ou ate mesmo travessuras"$ColorR
          echo -e $Branco"de pivo de metasploit para se comunicar com servidores"$ColorR
          echo -e $Branco"remotamente inacessiveis que estao ocultos"$ColorR
          echo -e $Branco"em sub-redes locais."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/savio-code/hexorbase"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "27help" ]; then
          echo -e $BrancoBAD"Sobre Acccheck:"$ColorR
          echo -e $Branco"O pacote de software acccheck fornece uma"$ColorR
          echo -e $Branco"ferramenta de ataque de dicionario"$ColorR
          echo -e $Branco"de senha para SMB."$ColorR
          echo -e $Branco"O que e acccheck, Acccheck E:"$ColorR
          echo -e $Branco"A ferramenta foi projetada como uma"$ColorR
          echo -e $Branco"ferramenta de ataque de dicionario de senhas"$ColorR
          echo -e $Branco"que visa a autenticacao do Windows"$ColorR
          echo -e $Branco"por meio do Protocolo SMB."$ColorR
          echo -e $Branco"E realmente um script wrapper em"$ColorR
          echo -e $Branco"torno do binario [smbclient] e,"$ColorR
          echo -e $Branco"como resultado, depende"$ColorR
          echo -e $Branco"dele para sua execucao."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/qashqao/acccheck"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "28help" ]; then
          echo -e $BrancoBAD"Sobre Automater:"$ColorR
          echo -e $Branco"Automater e uma ferramenta de"$ColorR
          echo -e $Branco"analise de IP e URL criada para ajudar"$ColorR
          echo -e $Branco"a automatizar o processo de analise."$ColorR
          echo -e $BrancoBAD"Homepage: http://www.tekdefense.com/automater/."$ColorR
          echo -e $BrancoBAD"Github:"\
                            "https://github.com/1aN0rmus/TekDefense-Automater."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "29help" ]; then
          echo -e $BrancoBAD"Sobre Dnmap:"$ColorR
          echo -e $Branco"dnmap e uma estrutura de nmap distribuida usando uma"$ColorR
          echo -e $Branco"arquitetura cliente/servidor."$ColorR
          echo -e $Branco"O servidor le os comandos de"$ColorR
          echo -e $Branco"um arquivo e os envia para cada cliente."$ColorR
          echo -e $Branco"O cliente executa o comando nmap"$ColorR
          echo -e $Branco"e envia os resultados de volta."$ColorR
          echo -e $BrancoBAD"Homepage: http://dnmap.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/cldrn/dnmap"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "30help" ]; then
          echo -e $BrancoBAD"Sobre CDPSnarf:"$ColorR
          echo -e $Branco"CDPSnarf e um sniffer de rede"$ColorR
          echo -e $Branco"escrito exclusivamente para extrair"$ColorR
          echo -e $Branco"informacoes de pacotes CDP (Cisco Discovery Protocol)."$ColorR
          echo -e $Branco"Ele fornece todas as informacoes"$ColorR
          echo -e $Branco"um (mostrar detalhes dos vizinhos do cdp)"$ColorR
          echo -e $Branco"comando retornaria em um roteador Cisco e ainda mais."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/Zapotek/cdpsnarf"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "31help" ]; then
          echo -e $BrancoBAD"Sobre sslcaudit:"$ColorR
          echo -e $Branco"O objetivo do projeto sslcaudit e desenvolver um utilitario"$ColorR
          echo -e $Branco"para automatizar o teste de clientes SSL/TLS para resistencia"$ColorR
          echo -e $Branco"contra ataques MITM."$ColorR
          echo -e $Branco"Pode ser util para testar um cliente espesso, um"$ColorR
          echo -e $Branco"aplicativo movel, um dispositivo, praticamente qualquer coisa"$ColorR
          echo -e $Branco"que se comunique sobre SSL/TLS sobre TCP."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/abbbe/sslcaudit"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "32help" ]; then
          echo -e $BrancoBAD"Sobre Intersect:"$ColorR
          echo -e $Branco"Intersect 2.5 e um framework de"$ColorR
          echo -e $Branco"pos-exploracao do Linux escrito em Python."$ColorR
          echo -e $Branco"O principal objetivo deste projeto e auxiliar os testadores de penetracao"$ColorR
          echo -e $Branco"na automacao de muitas tarefas de pos-exploracao e exfiltracao"$ColorR
          echo -e $Branco"de dados que, de outra forma, eles executariam manualmente."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/deadbits/Intersect-2.5"$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/intersect"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "33help" ]; then
          echo -e $BrancoBAD"Sobre U3-Pwn:"$ColorR
          echo -e $Branco"U3-Pwn e uma ferramenta projetada"$ColorR
          echo -e $Branco"para automatizar a injecao de executaveis"$ColorR
          echo -e $Branco"em dispositivos usb inteligentes Sandisk"$ColorR
          echo -e $Branco"com instalacao de software U3 padrao."$ColorR
          echo -e $Branco"Isso e feito removendo o arquivo iso original do dispositivo"$ColorR
          echo -e $Branco"e criando uma nova iso com recursos de execucao automatica."$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/u3-pwn"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "34help" ]; then
          echo -e $BrancoBAD"Sobre KeepNote:"$ColorR
          echo -e $Branco"KeepNote e um aplicativo de anotacoes"$ColorR
          echo -e $Branco"que funciona em Windows, Linux e MacOS X."$ColorR
          echo -e $Branco"Com KeepNote, voce pode armazenar suas"$ColorR
          echo -e $Branco"notas de aula, listas de tarefas, notas de pesquisa,"$ColorR
          echo -e $Branco"entradas de diario, esbocos de papel, etc."$ColorR
          echo -e $Branco"imagens e muito mais."$ColorR
          echo -e $Branco"Usando a pesquisa de texto completo,"$ColorR
          echo -e $Branco"voce pode recuperar qualquer"$ColorR
          echo -e $Branco"nota para referencia posterior."$ColorR
          echo -e $Branco"KeepNote foi projetado para ser multiplataforma"$ColorR
          echo -e $Branco"(implementado em Python e PyGTK)"$ColorR
          echo -e $Branco"e armazena suas notas em formatos"$ColorR
          echo -e $Branco"de arquivo simples e faceis de manipular"$ColorR
          echo -e $Branco"(HTML e XML).  Arquivar e transferir suas"$ColorR
          echo -e $Branco"notas e tao facil quanto"$ColorR
          echo -e $Branco"compactar ou copiar uma pasta."$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/keepnote"$ColorR
          echo -e $BrancoBAD"KeepNote Homepage: https://keepnote.org/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "35help" ]; then
          echo -e $BrancoBAD"Sobre Iphone-Backup-Analyzer:"$ColorR
          echo -e $Branco"Este software permite que o usuario"$ColorR
          echo -e $Branco"navegue pelo conteudo de um backup"$ColorR
          echo -e $Branco"de iPhone/iPad feito pelo iTunes"$ColorR
          echo -e $Branco"(ou outro software capaz de realizar backup de dispositivos iOS)."$ColorR
          echo -e $Branco"O software vem com todas as rotinas necessarias"$ColorR
          echo -e $Branco"para entender e mostrar o conteudo"$ColorR
          echo -e $Branco"dos arquivos encontrados."$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/iphone-backup-analyzer"$ColorR
          echo -e $BrancoBAD"Kali: https://pkg.kali.org/pkg/iphone-backup-analyzer"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "36help" ]; then
          echo -e $BrancoBAD"Sobre pdgmail:"$ColorR
          echo -e $Branco"ump script python para reunir artefatos"$ColorR
          echo -e $Branco"do Gmail de um despejo de memoria"$ColorR
          echo -e $Branco"do processo pd Ele encontrara"$ColorR
          echo -e $Branco"o que puder da imagem da memoria,"$ColorR
          echo -e $Branco"incluindo contatos, e-mails, horarios"$ColorR
          echo -e $Branco"de ultimo acesso, enderecos IP etc."$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/pdgmail"$ColorR
          echo -e $BrancoBAD"Kali: https://pkg.kali.org/pkg/pdgmail"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "37help" ]; then
          echo -e $BrancoBAD"Sobre peepdf:"$ColorR
          echo -e $Branco"peepdf e uma ferramenta Python"$ColorR
          echo -e $Branco"para explorar arquivos PDF para descobrir"$ColorR
          echo -e $Branco"se o arquivo pode ser prejudicial ou nao."$ColorR
          echo -e $Branco"O objetivo desta ferramenta e fornecer todos"$ColorR
          echo -e $Branco"os componentes necessarios que um pesquisador"$ColorR
          echo -e $Branco"de seguranca possa precisar em uma analise de PDF"$ColorR
          echo -e $Branco"sem usar 3 ou 4 ferramentas para fazer todas as tarefas."$ColorR
          echo -e $Branco"Com o peepdf e possivel ver todos os objetos"$ColorR
          echo -e $Branco"do documento mostrando os elementos suspeitos,"$ColorR
          echo -e $Branco"suporta os filtros e codificacoes mais usados,"$ColorR
          echo -e $Branco"pode analisar diferentes versoes de um arquivo,"$ColorR
          echo -e $Branco"fluxos de objetos e arquivos criptografados."$ColorR
          echo -e $Branco"Com a instalacao do PyV8 e do Pylibemu,"$ColorR
          echo -e $Branco"ele tambem fornece wrappers"$ColorR
          echo -e $Branco"de analise de Javascript e shellcode."$ColorR
          echo -e $Branco"Alem disso, e capaz de criar novos arquivos PDF,"$ColorR
          echo -e $Branco"modificar os existentes e ofusca-los."$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/peepdf"$ColorR
          echo -e $BrancoBAD"Kali: https://pkg.kali.org/pkg/peepdf"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "38help" ]; then
          echo -e $BrancoBAD"Sobre Funkload:"$ColorR
          echo -e $Branco"Esta ferramenta de teste da Web"$ColorR
          echo -e $Branco"foi projetada para permitir testar"$ColorR
          echo -e $Branco"a funcionalidade e o desempenho de"$ColorR
          echo -e $Branco"aplicativos da Web no mesmo espirito"$ColorR
          echo -e $Branco"do WWW::Mechanize do Perl."$ColorR
          echo -e $Branco"A ferramenta suporta a gravacao"$ColorR
          echo -e $Branco"de cliques por meio de um site, salvando-os"$ColorR
          echo -e $Branco"em uma classe Python que voce pode"$ColorR
          echo -e $Branco"modificar posteriormente"$ColorR
          echo -e $Branco"e reproduzindo-os posteriormente."$ColorR
          echo -e $Branco"Isso permite que voce crie scripts"$ColorR
          echo -e $Branco"para seus aplicativos da web."$ColorR
          echo -e $Branco"“funkload” tambem suporta desempenho"$ColorR
          echo -e $Branco"e teste de carga de seus aplicativos."$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/funkload"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "39help" ]; then
          echo -e $BrancoBAD"Sobre Keimpx:"$ColorR
          echo -e $Branco"Keimpx e uma ferramenta dos"$ColorR
          echo -e $Branco"laboratorios do NCCgroup"$ColorR
          echo -e $Branco"para verificar credenciais"$ColorR
          echo -e $Branco"validas usando o protocolo SMB."$ColorR
          echo -e $Branco"E uma das primeiras ferramentas"$ColorR
          echo -e $Branco"projetadas para pentesting"$ColorR
          echo -e $Branco"de grandes redes Windows e,"$ColorR
          echo -e $Branco"portanto, e adequada para automacao."$ColorR
          echo -e $Branco"O Keimpx e baseado na biblioteca"$ColorR
          echo -e $Branco"Impacket e pode funcionar"$ColorR
          echo -e $Branco"com autenticacao simples, hash NTLM"$ColorR
          echo -e $Branco"ou autenticacoes de token"$ColorR
          echo -e $Branco"de sessao de logon NTLM, suportando"$ColorR
          echo -e $Branco"totalmente ataques de passagem"$ColorR
          echo -e $Branco"de hash (PTH) e muito mais."$ColorR
          echo -e $Branco"Alem de verificar as"$ColorR
          echo -e $Branco"credenciais, o Keimpx tambem pode:"$ColorR
          echo -e $Branco"* Trabalhar com compartilhamentos"$ColorR
          echo -e $Branco"de rede (upload/download)."$ColorR
          echo -e $Branco"* Trabalhar com registro"$ColorR
          echo -e $Branco"do Windows (leitura/gravacao)."$ColorR
          echo -e $Branco"* Listar usuarios do dominio"$ColorR
          echo -e $Branco"ou politica de senha."$ColorR
          echo -e $Branco"* Gerar um shell interativo."$ColorR
          echo -e $Branco"* Trabalhar com servicos (implantar / remover implantacao)."$ColorR
          echo -e $Branco"* Despejar varios segredos (SAM e LSA)."$ColorR
          echo -e $Branco"* Extraia NTDS.dit via vssadmin."$ColorR
          echo -e $Branco"* Parar servicos antivirus conhecidos."$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/keimpx/"$ColorR
          echo -e $BrancoBAD"Kali: https://pkg.kali.org/pkg/keimpx"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          LixeraPrompt

     elif [ "$LIXO" = "P14" ]; then
          Programas13

     elif [ "$LIXO" = "P12" ]; then
          Programas12

     elif [ "$LIXO" = "P11" ]; then
          Programas11

     elif [ "$LIXO" = "P10" ]; then
          Programas10

     elif [ "$LIXO" = "P09" ]; then
          Programas09

     elif [ "$LIXO" = "P08" ]; then
          Programas08

     elif [ "$LIXO" = "P07" ]; then
          Programas07

     elif [ "$LIXO" = "P06" ]; then
          Programas06

     elif [ "$LIXO" = "P05" ]; then
          Programas05

     elif [ "$LIXO" = "P04" ]; then
          Programas04

     elif [ "$LIXO" = "P03" ]; then
          Programas03

     elif [ "$LIXO" = "P02" ]; then
          Programas02

     elif [ "$LIXO" = "P01" ]; then
          Programas01

     elif [ "$LIXO" = "Programas01" ]; then
          Programas01

     elif [ "$LIXO" = "Programas02" ]; then
          Programas02

     elif [ "$LIXO" = "Programas03" ]; then
          Programas03

     elif [ "$LIXO" = "Programas04" ]; then
          Programas04

     elif [ "$LIXO" = "Programas05" ]; then
          Programas05

     elif [ "$LIXO" = "Programas06" ]; then
          Programas06

     elif [ "$LIXO" = "Programas07" ]; then
          Programas07

     elif [ "$LIXO" = "Programas08" ]; then
          Programas08

     elif [ "$LIXO" = "Programas09" ]; then
          Programas09

     elif [ "$LIXO" = "Programas10" ]; then
          Programas10

     elif [ "$LIXO" = "Programas11" ]; then
          Programas11

     elif [ "$LIXO" = "Programas12" ]; then
          Programas12

     elif [ "$LIXO" = "Programas13" ]; then
          Programas13

     elif [ "$LIXO" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$LIXO" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$LIXO" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$LIXO" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$LIXO" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Lixera
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Lixera
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Lixera
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Lixera
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Lixera
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Lixera
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Lixera
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Lixera
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Lixera
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Lixera
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Lixera
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Lixera
fi
}
Programas13B(){
echo -e $Color"\n\nHacking de hardware"$ColorR
echo -e $Color"
01) Android-SDK
1help Sobre Android-SDK
02) Apktool
2help Sobre Apktool
03) Arduino
3help Sobre Arduino
04) Dex2jar
4help Sobre Dex2jar
05) Sakis3G
5help Sobre Sakis3G
06) Smali
6help Sobre Smali
07) Binwalk
7help Sobre Binwalk
08) Cutecom
8help Sobre Cutecom
09) Flashrom
9help Sobre Flashrom
10) Minicom
10help Sobre Minicom
11) OpenOCD
11help Sobre OpenOCD
12) QEMU-SYSTEM-x86
12help Sobre QEMU-SYSTEM-x86
13) QEMU-USER
13help Sobre QEMU-USER
14) Radare2
14help Sobre Radare2
15) Radare2-Cutter
15help Sobre Radare2-Cutter
"$ColorR

echo -e "\n"
echo -e $Verde"Install all Hardware Hacking tools"$ColorR
echo -e $Verde"(x) (Instalar Todas as ferramentas.)"$ColorR
echo -e "\n\n"
}
PrompTProgramas13(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" O
}
All_Tools_13(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install android-sdk
apt-get -y install smali
apt-get -y install flashrom
apt-get -y install libflashrom1
apt-get -y install libflashrom-dev
apt-get -y install radare2-cutter
apt-get -y install openocd
apt-get -y install minicom
apt-get -y install cutecom
apt-get -y install binwalk
apt-get -y install sakis3g
apt-get -y install dex2jar
apt-get -y install arduino
apt-get -y install apktool
apt-get -y install qemu-user
apt-get -y install qemu-system-x86
apt-get -y install libradare2-5.0.0
apt-get -y install libradare2-common
apt-get -y install libradare2-dev
apt-get -y install radare2
}
Programas13(){
Programas13B
PrompTProgramas13
if [ "$O" = "01" ]; then
   O="1"
fi
if [ "$O" = "02" ]; then
   O="2"
fi
if [ "$O" = "03" ]; then
   O="3"
fi
if [ "$O" = "04" ]; then
   O="4"
fi
if [ "$O" = "05" ]; then
   O="5"
fi
if [ "$O" = "06" ]; then
   O="6"
fi
if [ "$O" = "07" ]; then
   O="7"
fi
if [ "$O" = "08" ]; then
   O="8"
fi
if [ "$O" = "09" ]; then
   O="9"
fi
while [ "$O" ];
do
  if [ "$O" ]; then
     if [ "$O" = "1" ]; then
        echo -e $Color"Instalando Programa Android-SDK."$Color
        apt-get -y update 1> /dev/null 2> /dev/null
        apt-get -y install android-sdk
        sleep 1
        echo -e $Color"Processo Finalizado."$ColorR
        sleep 1
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        PrompTProgramas13

     elif [ "$O" = "1help" ]; then
          echo -e $BrancoBAD"Sobre Android-SDK:"$ColorR
          echo -e $Branco"O SDK do Android fornece"$ColorR
          echo -e $Branco"as bibliotecas de API"$ColorR
          echo -e $Branco"e as ferramentas de desenvolvedor"$ColorR
          echo -e $Branco"necessarias para criar, testar"$ColorR
          echo -e $Branco"e depurar aplicativos para Android."$ColorR
          echo -e $Branco"$ android."$ColorR
          echo -e $BrancoBAD"Android-SDK Homepage: https://developer.android.com/index.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/android-sdk/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_13
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_13
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "2" ]; then
          echo -e $Color"Instalando Programa Apktool."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install apktool
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "2help" ]; then
          echo -e $BrancoBAD"Sobre Apktool:"$ColorR
          echo -e $Branco"Uma ferramenta para engenharia"$ColorR
          echo -e $Branco"reversa de aplicativos"$ColorR
          echo -e $Branco"Android binarios, fechados e de terceiros."$ColorR
          echo -e $Branco"Ele pode decodificar recursos"$ColorR
          echo -e $Branco"para a forma quase original e reconstrui-los"$ColorR
          echo -e $Branco"apos fazer algumas modificacoes;"$ColorR
          echo -e $Branco"torna possivel depurar"$ColorR
          echo -e $Branco"o codigo smali passo a passo."$ColorR
          echo -e $Branco"Tambem facilita o trabalho com um aplicativo"$ColorR
          echo -e $Branco"devido a estrutura de arquivos semelhante a"$ColorR
          echo -e $Branco"um projeto e a automacao de algumas tarefas"$ColorR
          echo -e $Branco"repetitivas, como a criacao de apk."$ColorR
          echo -e $Branco"$ apktool."$ColorR
          echo -e $BrancoBAD"Apktool Homepage: https://ibotpeaches.github.io/Apktool/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/apktool/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "3" ]; then
          echo -e $Color"Instalando Programa Arduino."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install arduino
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "3help" ]; then
          echo -e $BrancoBAD"Sobre Arduino:"$ColorR
          echo -e $Branco"O Arduino e uma plataforma"$ColorR
          echo -e $Branco"de prototipagem eletronica"$ColorR
          echo -e $Branco"de codigo aberto baseada em hardware"$ColorR
          echo -e $Branco"e software flexiveis e faceis de usar."$ColorR
          echo -e $Branco"Destina-se a artistas, designers,"$ColorR
          echo -e $Branco"hobistas e qualquer pessoa"$ColorR
          echo -e $Branco"interessada em criar objetos"$ColorR
          echo -e $Branco"ou ambientes interativos."$ColorR
          echo -e $BrancoBAD"Arduino Homepage: https://www.arduino.cc/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "4" ]; then
          echo -e $Color"Instalando Programa Dex2jar."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dex2jar
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "4help" ]; then
          echo -e $BrancoBAD"Sobre Dex2jar:"$ColorR
          echo -e $Branco"dex2jar contem 4 comentarios:"$ColorR
          echo -e $Branco"dex-reader e projetado para ler"$ColorR
          echo -e $Branco"o formato Dalvik Executable (.dex/.odex)."$ColorR
          echo -e $Branco"Tem uma API leve semelhante ao ASM."$ColorR
          echo -e $Branco"Um exemplo aqui dex-translator e"$ColorR
          echo -e $Branco"projetado para fazer"$ColorR
          echo -e $Branco"o trabalho de conversao."$ColorR
          echo -e $Branco"Ele le a instrucao dex para"$ColorR
          echo -e $Branco"o formato dex-ir, depois de"$ColorR
          echo -e $Branco"algumas otimizacoes, converte"$ColorR
          echo -e $Branco"para o formato ASM."$ColorR
          echo -e $Branco"dex-ir usado pelo dex-translator, e"$ColorR
          echo -e $Branco"projetado para representar"$ColorR
          echo -e $Branco"as ferramentas dex-tools da"$ColorR
          echo -e $Branco"instrucao dex para trabalhar"$ColorR
          echo -e $Branco"com arquivos .class."$ColorR
          echo -e $Branco"$ d2j-apk-sign."$ColorR
          echo -e $Branco"$ d2j-class-version-switch."$ColorR
          echo -e $Branco"$ d2j-dex-weaver."$ColorR
          echo -e $Branco"$ d2j-jar-access."$ColorR
          echo -e $Branco"$ d2j-jar2jasmin."$ColorR
          echo -e $Branco"$ d2j-std-apk."$ColorR
          echo -e $Branco"$ d2j-asm-verify."$ColorR
          echo -e $Branco"$ d2j-decrypt-string."$ColorR
          echo -e $Branco"$ d2j-dex2jar."$ColorR
          echo -e $Branco"$ d2j-jar-weaver."$ColorR
          echo -e $Branco"$ d2j-jasmin2jar."$ColorR
          echo -e $Branco"$ d2j_invoke."$ColorR
          echo -e $Branco"$ d2j-baksmali."$ColorR
          echo -e $Branco"$ d2j-dex-recompute-checksum."$ColorR
          echo -e $Branco"$ d2j-dex2smali."$ColorR
          echo -e $Branco"$ d2j-jar2dex."$ColorR
          echo -e $Branco"$ d2j-smali."$ColorR
          echo -e $Branco"$ dex-tools."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/pxb1988/dex2jar/tree/2.x"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dex2jar/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "5" ]; then
          echo -e $Color"Instalando Programa Sakis3G."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sakis3g
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "5help" ]; then
          echo -e $BrancoBAD"Sobre Sakis3G:"$ColorR
          echo -e $Branco"Sakis3G e um script de shell"$ColorR
          echo -e $Branco"ajustado que deve funcionar imediatamente"$ColorR
          echo -e $Branco"para estabelecer uma conexao 3G com qualquer"$ColorR
          echo -e $Branco"combinacao de modem ou operadora."$ColorR
          echo -e $Branco"Ele configura automaticamente seu modem USB"$ColorR
          echo -e $Branco"ou Bluetooth™ e pode atr detectar"$ColorR
          echo -e $Branco"as configuracoes do operador."$ColorR
          echo -e $Branco"Voce deve tentar quando"$ColorR
          echo -e $Branco"qualquer outra coisa falhar."$ColorR
          echo -e $Branco"$ sakis3g."$ColorR
          echo -e $BrancoBAD"Sakis3g Homepage: http://www.sakis3g.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sakis3g/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "6" ]; then
          echo -e $Color"Instalando Programa Smali."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install smali
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "6help" ]; then
          echo -e $BrancoBAD"Sobre Smali:"$ColorR
          echo -e $Branco"smali/baksmali e um"$ColorR
          echo -e $Branco"montador/desmontador"$ColorR
          echo -e $Branco"para o formato dex usado"$ColorR
          echo -e $Branco"por dalvik, a implementacao"$ColorR
          echo -e $Branco"de Java VM do Android."$ColorR
          echo -e $Branco"A sintaxe e vagamente baseada"$ColorR
          echo -e $Branco"na sintaxe de Jasmin/dedexer"$ColorR
          echo -e $Branco"e suporta a funcionalidade"$ColorR
          echo -e $Branco"completa do formato"$ColorR
          echo -e $Branco"dex (anotacoes, informacoes"$ColorR
          echo -e $Branco"de depuracao, informacoes de linha, etc.)"$ColorR
          echo -e $Branco"$ baksmali."$ColorR
          echo -e $Branco"$ smali."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/JesusFreke/smali"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/smali/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "7" ]; then
          echo -e $Color"Instalando Programa Binwalk."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install binwalk
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

    elif [ "$O" = "7help" ]; then
         echo -e $BrancoBAD"Sobre Binwalk:"$ColorR
         echo -e $Branco"Binwalk e uma ferramenta"$ColorR
         echo -e $Branco"para pesquisar uma determinada"$ColorR
         echo -e $Branco"imagem binaria para arquivos"$ColorR
         echo -e $Branco"incorporados e codigo executavel."$ColorR
         echo -e $Branco"Especificamente, ele e projetado para identificar"$ColorR
         echo -e $Branco"arquivos e codigos incorporados em imagens de firmware."$ColorR
         echo -e $Branco"Binwalk usa a biblioteca libmagic, por isso e compativel"$ColorR
         echo -e $Branco"com assinaturas magicas criadas"$ColorR
         echo -e $Branco"para o utilitario de arquivo Unix."$ColorR
         echo -e $Branco"Binwalk tambem inclui um arquivo de assinatura"$ColorR
         echo -e $Branco"magica personalizado que contem assinaturas aprimoradas"$ColorR
         echo -e $Branco"para arquivos que sao comumente encontrados em"$ColorR
         echo -e $Branco"imagens de firmware, como"$ColorR
         echo -e $Branco"arquivos compactados/arquivados, cabecalhos"$ColorR
         echo -e $Branco"de firmware, kernels Linux, carregadores"$ColorR
         echo -e $Branco"de inicializacao, sistemas de arquivos, etc."$ColorR
         echo -e $Branco"$ binwalk"$ColorR
         echo -e $BrancoBAD"Github: https://github.com/ReFirmLabs/binwalk"$ColorR
         echo -e $BrancoBAD"Kali: https://www.kali.org/tools/binwalk/"$ColorR
         echo -e $Color"De um Enter para Restaurar"\
                       "a Interface Padrao."$ColorR
         sleep 1
         PrompTProgramas13

     elif [ "$O" = "8" ]; then
          echo -e $Color"Instalando Programa Cutecom."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cutecom
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "8help" ]; then
          echo -e $BrancoBAD"Sobre Cutecom:"$ColorR
          echo -e $Branco"Cutecom e um terminal serial"$ColorR
          echo -e $Branco"grafico, como o minicom."$ColorR
          echo -e $Branco"Destina-se principalmente a"$ColorR
          echo -e $Branco"desenvolvedores de hardware"$ColorR
          echo -e $Branco"ou outras pessoas que precisam"$ColorR
          echo -e $Branco"de um terminal para conversar"$ColorR
          echo -e $Branco"com seus dispositivos."$ColorR
          echo -e $Branco"Possui interface orientada"$ColorR
          echo -e $Branco"a linhas em vez de orientacao"$ColorR
          echo -e $Branco"a caracteres, suporte a xmodem,"$ColorR
          echo -e $Branco"ymodem, zmodem (requer o pacote lrzsz)"$ColorR
          echo -e $Branco"e entrada e saida hexadecimal,"$ColorR
          echo -e $Branco"entre outras coisas."$ColorR
          echo -e $Branco"Ele e escrito usando a biblioteca"$ColorR
          echo -e $Branco"Qt originalmente da Trolltech"$ColorR
          echo -e $Branco"(www.trolltech.com)."$ColorR
          echo -e $Branco"$ cutecom."$ColorR
          echo -e $BrancoBAD"Github: http://github.com/neundorf/CuteCom"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cutecom/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "9" ]; then
          echo -e $Color"Instalando Programa Flashrom."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install flashrom
          apt-get -y install libflashrom1
          apt-get -y install libflashrom-dev
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "9help" ]; then
          echo -e $BrancoBAD"Sobre Flashrom:"$ColorR
          echo -e $Branco"flashrom e uma ferramenta"$ColorR
          echo -e $Branco"para identificar, ler, escrever,"$ColorR
          echo -e $Branco"verificar e apagar chips flash."$ColorR
          echo -e $Branco"E frequentemente usado para fazer"$ColorR
          echo -e $Branco"flash de imagens"$ColorR
          echo -e $Branco"BIOS/EFI/coreboot/firmware/optionROM"$ColorR
          echo -e $Branco"no sistema usando uma placa-mae"$ColorR
          echo -e $Branco"suportada, mas tambem suporta"$ColorR
          echo -e $Branco"flashes de placas de rede"$ColorR
          echo -e $Branco"(NICs), placas controladoras"$ColorR
          echo -e $Branco"SATA e outros dispositivos externos"$ColorR
          echo -e $Branco"que podem programar chips flash."$ColorR
          echo -e $Branco"Ele suporta uma ampla gama de"$ColorR
          echo -e $Branco"chips DIP32, PLCC32, DIP8,"$ColorR
          echo -e $Branco"SO8/SOIC8, TSOP32/40/48 e BGA,"$ColorR
          echo -e $Branco"que usam varios protocolos,"$ColorR
          echo -e $Branco"como LPC, FWH, flash paralelo ou SPI."$ColorR
          echo -e $Branco"A ferramenta pode ser usada"$ColorR
          echo -e $Branco"para fazer o flash de imagens"$ColorR
          echo -e $Branco"de BIOS/firmware, por exemplo"$ColorR
          echo -e $Branco"- sejam imagens proprietarias"$ColorR
          echo -e $Branco"de BIOS ou imagens de coreboot"$ColorR
          echo -e $Branco"(anteriormente conhecidas como LinuxBIOS)."$ColorR
          echo -e $Branco"Tambem pode ser usado para ler"$ColorR
          echo -e $Branco"o BIOS/firmware existente a"$ColorR
          echo -e $Branco"partir de um chip flash."$ColorR
          echo -e $BrancoBAD"Os programadores atualmente suportados incluem:"$ColorR
          echo -e $Branco"* interno (para piscar no sistema na placa-mae)."$ColorR
          echo -e $Branco"* dummy (programador virtual para testar flashrom)."$ColorR
          echo -e $Branco"* nic3com (para ROMs flash em placas de rede 3COM)."$ColorR
          echo -e $Branco"* nicrealtek (para ROMs flash em placas de rede Realtek e SMC 1211)."$ColorR
          echo -e $Branco"* nicnatsemi (para ROMs flash em placas de rede National Semiconductor DP838*)."$ColorR
          echo -e $Branco"* nicintel (para ROMs flash paralelas em placas de rede Intel 10/100Mbit)."$ColorR
          echo -e $Branco"* gfxnvidia (para ROMs flash em placas graficas NVIDIA)."$ColorR
          echo -e $Branco"* drkaiser (para ROMs flash em placas PCI Dr. Kaiser PC-Waechter)."$ColorR
          echo -e $Branco"* satasii (para ROMs flash em controladores Silicon Image SATA/IDE)."$ColorR
          echo -e $Branco"* satamv (para ROMs flash em controladores Marvell SATA)."$ColorR
          echo -e $Branco"* atahpt (para ROMs flash em controladores Highpoint ATA/RAID)."$ColorR
          echo -e $Branco"* atavia (para ROMs flash em controladores VIA VT6421A SATA)."$ColorR
          echo -e $Branco"* atapromise (para ROMs flash em controladores Promise PDC2026x ATA/RAID)."$ColorR
          echo -e $Branco"* it8212 (para ROMs flash no controlador ITE IT8212F ATA/RAID)."$ColorR
          echo -e $Branco"* ft2232_spi (para ROMs flash"$ColorR
          echo -e $Branco"SPI conectadas a um programador"$ColorR
          echo -e $Branco"SPI USB baseado na familia"$ColorR
          echo -e $Branco"FT2232/FT4232H/FT232H), incluindo"$ColorR
          echo -e $Branco"o DLP Design DLP-USB1232H,"$ColorR
          echo -e $Branco"Minimodulo FTDI FT2232H,"$ColorR
          echo -e $Branco"Minimodulo FTDI FT4232H,"$ColorR
          echo -e $Branco"openbiosprog-spi, Amontec"$ColorR
          echo -e $Branco"JTAGkey/JTAGkey-tiny/JTAGkey-2,"$ColorR
          echo -e $Branco"Prototipos Perigosos Bus Blaster,"$ColorR
          echo -e $Branco"Olimex ARM-USB-TINY/-H, Olimex"$ColorR
          echo -e $Branco"ARM-USB-OCD/-H, TIAO/DIYGADGET"$ColorR
          echo -e $Branco"USB Multi-Protocol Adapter"$ColorR
          echo -e $Branco"(TUMPA), TUMPA Lite, GOEPEL"$ColorR
          echo -e $Branco"PicoTAP, Google Servo v1/v2 e"$ColorR
          echo -e $Branco"placa de depuracao FIC"$ColorR
          echo -e $Branco"OpenMoko Neo1973."$ColorR
          echo -e $Branco"* serprog (para ROMs flash"$ColorR
          echo -e $Branco"conectadas a um programador"$ColorR
          echo -e $Branco"falando serprog), incluindo AVR"$ColorR
          echo -e $Branco"flasher de Urja Rannikko, AVR"$ColorR
          echo -e $Branco"flasher de Eightdot, Arduino"$ColorR
          echo -e $Branco"Mega flasher de fritz,"$ColorR
          echo -e $Branco"InSystemFlasher de Juhana"$ColorR
          echo -e $Branco"Helovuo e atmegaXXu2-flasher"$ColorR
          echo -e $Branco"de Stefan Tauner."$ColorR
          echo -e $Branco"* buspirate_spi (para ROMs flash SPI anexadas a um Bus Pirate)."$ColorR
          echo -e $Branco"* dediprog (para ROMs flash SPI conectadas a um Dediprog SF100)."$ColorR
          echo -e $Branco"* rayer_spi (para ROMs flash"$ColorR
          echo -e $Branco"SPI anexadas a um programador"$ColorR
          echo -e $Branco"baseado em parport RayeR)."$ColorR
          echo -e $Branco"* pony_spi (para ROMs flash"$ColorR
          echo -e $Branco"SPI conectadas a um adaptador"$ColorR
          echo -e $Branco"bitbanging de porta serial SI-Prog)."$ColorR
          echo -e $Branco"* nicintel_spi (para ROMs flash SPI"$ColorR
          echo -e $Branco"em placas de rede Intel Gigabit)."$ColorR
          echo -e $Branco"* ogp_spi (para ROMs flash SPI"$ColorR
          echo -e $Branco"na placa grafica Open Graphics Project)."$ColorR
          echo -e $Branco"* linux_spi (para ROMs flash"$ColorR
          echo -e $Branco"SPI acessiveis via /dev/spidevX.Y no Linux)."$ColorR
          echo -e $Branco"* usbbaster_spi (para ROMs flash"$ColorR
          echo -e $Branco"SPI conectadas a um Altera USB-Blaster)."$ColorR
          echo -e $Branco"* nicintel_eeprom (para SPI"$ColorR
          echo -e $Branco"EEPROMs em placas de rede Intel Gigabit)."$ColorR
          echo -e $Branco"* mstarddc_spi (para ROMs flash"$ColorR
          echo -e $Branco"SPI acessiveis atraves de DDC"$ColorR
          echo -e $Branco"em monitores equipados com MSTAR)."$ColorR
          echo -e $Branco"* pickit2_spi (para ROMs flash"$ColorR
          echo -e $Branco"SPI acessiveis via Microchip PICkit2)."$ColorR
          echo -e $Branco"* ch341a_spi (para ROMs flash SPI conectadas ao WCH CH341A)."$ColorR
          echo -e $Branco"$ flashrom."$ColorR
          echo -e $BrancoBAD"Flashrom Homepage: http://www.flashrom.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/flashrom/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "10" ]; then
          echo -e $Color"Instalando Programa Minicom."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install minicom
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "10help" ]; then
          echo -e $BrancoBAD"Sobre Minicom:"$ColorR
          echo -e $Branco"Minicom e um clone do programa"$ColorR
          echo -e $Branco"de comunicacao MS-DOS “Telix”."$ColorR
          echo -e $Branco"Emula terminais ANSI e VT102,"$ColorR
          echo -e $Branco"possui diretorio de discagem"$ColorR
          echo -e $Branco"e download automatico de zmodem."$ColorR
          echo -e $Branco"$ ascii-xfr."$ColorR
          echo -e $Branco"$ xminicom."$ColorR
          echo -e $Branco"$ minicom."$ColorR
          echo -e $Branco"$ runscript."$ColorR
          echo -e $BrancoBAD"Minicom Homepage: https://salsa.debian.org/minicom-team/minicom"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/minicom/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "11" ]; then
          echo -e $Color"Instalando Programa OpenOCD."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install openocd
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "11help" ]; then
          echo -e $BrancoBAD"Sobre OpenOCD:"$ColorR
          echo -e $Branco"O OpenOCD visa fornecer"$ColorR
          echo -e $Branco"depuracao, programacao no sistema"$ColorR
          echo -e $Branco"e testes de varredura de limites"$ColorR
          echo -e $Branco"para dispositivos de destino incorporados."$ColorR
          echo -e $Branco"O depurador usa um mestre"$ColorR
          echo -e $Branco"de barramento JTAG TAP compativel"$ColorR
          echo -e $Branco"com IEEE 1149-1 para acessar"$ColorR
          echo -e $Branco"a funcionalidade de depuracao"$ColorR
          echo -e $Branco"no chip disponivel em microcontroladores"$ColorR
          echo -e $Branco"baseados em ARM ou solucoes"$ColorR
          echo -e $Branco"de sistema no chip."$ColorR
          echo -e $Branco"Para sistemas MIPS, a interface"$ColorR
          echo -e $Branco"EJTAG e suportada."$ColorR
          echo -e $Branco"Alem disso, ha suporte"$ColorR
          echo -e $Branco"para controladores eSi-RISC,"$ColorR
          echo -e $Branco"Intel, OpenRISC, RISC-V e ARC."$ColorR
          echo -e $Branco"A interacao do usuario e realizada"$ColorR
          echo -e $Branco"por meio de uma interface"$ColorR
          echo -e $Branco"de linha de comando telnet,"$ColorR
          echo -e $Branco"um servidor de protocolo remoto"$ColorR
          echo -e $Branco"gdb (o depurador GNU) e uma conexao"$ColorR
          echo -e $Branco"RPC simplificada que pode ser"$ColorR
          echo -e $Branco"usada para fazer interface"$ColorR
          echo -e $Branco"com o mecanismo Jim Tcl do OpenOCD."$ColorR
          echo -e $Branco"O OpenOCD suporta muitos tipos"$ColorR
          echo -e $Branco"diferentes de interfaces/programadores JTAG."$ColorR
          echo -e $Branco"$ openocd."$ColorR
          echo -e $BrancoBAD"OpenOCD Homepage: http://openocd.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/openocd/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "12" ]; then
          echo -e $Color"Instalando Programa QEMU-SYSTEM-x86."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install qemu-system-x86
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "12help" ]; then
          echo -e $BrancoBAD"Sobre QEMU-SYSTEM-x86:"$ColorR
          echo -e $Branco"QEMU e um emulador de"$ColorR
          echo -e $Branco"processador rapido:"$ColorR
          echo -e $Branco"atualmente o pacote suporta"$ColorR
          echo -e $Branco"emulacao i386 e x86-64."$ColorR
          echo -e $Branco"Ao usar a traducao dinamica,"$ColorR
          echo -e $Branco"ele atinge uma velocidade"$ColorR
          echo -e $Branco"razoavel e, e facil de"$ColorR
          echo -e $Branco"portar em novas CPUs host."$ColorR
          echo -e $Branco"Este pacote fornece os binarios"$ColorR
          echo -e $Branco"de emulacao de sistema completos"$ColorR
          echo -e $Branco"para emular o seguinte hardware x86: i386 x86_64."$ColorR
          echo -e $Branco"No modo de emulacao do sistema,"$ColorR
          echo -e $Branco"o QEMU emula um sistema completo,"$ColorR
          echo -e $Branco"incluindo um processador"$ColorR
          echo -e $Branco"e varios perifericos."$ColorR
          echo -e $Branco"Ele permite testes e depuracao"$ColorR
          echo -e $Branco"mais faceis do codigo do sistema."$ColorR
          echo -e $Branco"Tambem pode ser usado"$ColorR
          echo -e $Branco"para fornecer hospedagem virtual"$ColorR
          echo -e $Branco"de varias maquinas virtuais"$ColorR
          echo -e $Branco"em um unico servidor."$ColorR
          echo -e $Branco"No hardware do host x86, este"$ColorR
          echo -e $Branco"pacote tambem permite o uso"$ColorR
          echo -e $Branco"da maquina virtual do kernel KVM"$ColorR
          echo -e $Branco"em sistemas que o suportam."$ColorR
          echo -e $Branco"$ kvm."$ColorR
          echo -e $Branco"$ qemu-system-x86_64-microvm."$ColorR
          echo -e $Branco"$ qemu-system-i386."$ColorR
          echo -e $Branco"$ qemu-system-x86_64."$ColorR
          echo -e $BrancoBAD"QEMU-SYSTEM-x86 Homepage: http://www.qemu.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/qemu/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "13" ]; then
          echo -e $Color"Instalando Programa QEMU-USER."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install qemu-user
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "13help" ]; then
          echo -e $BrancoBAD"Sobre QEMU-USER:"$ColorR
          echo -e $Branco"QEMU e um emulador de"$ColorR
          echo -e $Branco"processador rapido: atualmente"$ColorR
          echo -e $Branco"o pacote suporta emulacao ARM,"$ColorR
          echo -e $Branco"CRIS, i386, M68k (ColdFire),"$ColorR
          echo -e $Branco"MicroBlaze, MIPS, PowerPC, SH4,"$ColorR
          echo -e $Branco"SPARC e x86-64."$ColorR
          echo -e $Branco"Ao usar a traducao dinamica, ele"$ColorR
          echo -e $Branco"atinge uma velocidade razoavel"$ColorR
          echo -e $Branco"e, e facil de portar em novas CPUs host."$ColorR
          echo -e $Branco"Este pacote fornece os binarios"$ColorR
          echo -e $Branco"de emulacao do modo de usuario."$ColorR
          echo -e $Branco"Neste modo o QEMU pode lancar"$ColorR
          echo -e $Branco"processos Linux compilados"$ColorR
          echo -e $Branco"para uma CPU em outra CPU."$ColorR
          echo -e $Branco"Se o pacote qemu-user-binfmt"$ColorR
          echo -e $Branco"tambem estiver instalado, ele"$ColorR
          echo -e $Branco"registrara manipuladores de formato"$ColorR
          echo -e $Branco"binario deste pacote qemu-user"$ColorR
          echo -e $Branco"com o kernel para que seja"$ColorR
          echo -e $Branco"possivel executar binarios"$ColorR
          echo -e $Branco"estrangeiros diretamente."$ColorR
          echo -e $Branco"No entanto, isso pode nao"$ColorR
          echo -e $Branco"ser adequado para uso dentro"$ColorR
          echo -e $Branco"de chroots estrangeiros, caso"$ColorR
          echo -e $Branco"em que e possivel usar o pacote"$ColorR
          echo -e $Branco"qemu-user-static em vez de"$ColorR
          echo -e $Branco"qemu-user-binmft, – qemu-user-static"$ColorR
          echo -e $Branco"registrara manipuladores binfmt vinculados estaticamente."$ColorR
          echo -e $Branco"$ qemu-aarch64."$ColorR
          echo -e $Branco"$ qemu-arm."$ColorR
          echo -e $Branco"$ qemu-hexagon."$ColorR
          echo -e $Branco"$ qemu-m68k."$ColorR
          echo -e $Branco"$ qemu-mips."$ColorR
          echo -e $Branco"$ qemu-mipsel."$ColorR
          echo -e $Branco"$ qemu-nios2."$ColorR
          echo -e $Branco"$ qemu-ppc64."$ColorR
          echo -e $Branco"$ qemu-riscv64."$ColorR
          echo -e $Branco"$ qemu-sh4eb."$ColorR
          echo -e $Branco"$ qemu-sparc64."$ColorR
          echo -e $Branco"$ qemu-xtensaeb."$ColorR
          echo -e $Branco"$ qemu-aarch64_be."$ColorR
          echo -e $Branco"$ qemu-armeb."$ColorR
          echo -e $Branco"$ qemu-hppa."$ColorR
          echo -e $Branco"$ qemu-microblaze."$ColorR
          echo -e $Branco"$ qemu-mips64."$ColorR
          echo -e $Branco"$ qemu-mipsn32."$ColorR
          echo -e $Branco"$ qemu-or1k."$ColorR
          echo -e $Branco"$ qemu-ppc64le."$ColorR
          echo -e $Branco"$ qemu-s390x."$ColorR
          echo -e $Branco"$ qemu-sparc."$ColorR
          echo -e $Branco"$ qemu-x86_64."$ColorR
          echo -e $Branco"$ qemu-alpha."$ColorR
          echo -e $Branco"$ qemu-cris."$ColorR
          echo -e $Branco"$ qemu-i386."$ColorR
          echo -e $Branco"$ qemu-microblazeel."$ColorR
          echo -e $Branco"$ qemu-mips64el."$ColorR
          echo -e $Branco"$ qemu-mipsn32el."$ColorR
          echo -e $Branco"$ qemu-ppc."$ColorR
          echo -e $Branco"$ qemu-riscv32."$ColorR
          echo -e $Branco"$ qemu-sh4."$ColorR
          echo -e $Branco"$ qemu-sparc32plus."$ColorR
          echo -e $Branco"$ qemu-xtensa."$ColorR
          echo -e $BrancoBAD"QEMU-USER Homepage: http://www.qemu.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/qemu/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "14" ]; then
          echo -e $Color"Instalando Programa Radare2."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install libradare2-5.0.0
          apt-get -y install libradare2-common
          apt-get -y install libradare2-dev
          apt-get -y install radare2
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "14help" ]; then
          echo -e $BrancoBAD"Sobre Radare2:"$ColorR
          echo -e $Branco"O projeto visa criar uma cadeia"$ColorR
          echo -e $Branco"de ferramentas completa, portatil,"$ColorR
          echo -e $Branco"multi-arquitetura, tipo unix para engenharia reversa."$ColorR
          echo -e $Branco"E composto por um editor hexadecimal"$ColorR
          echo -e $Branco"(radare) com uma camada IO"$ColorR
          echo -e $Branco"encapsulada suportando varios backends"$ColorR
          echo -e $Branco"para arquivos locais/remotos,"$ColorR
          echo -e $Branco"depurador (OS X, BSD, Linux, W32),"$ColorR
          echo -e $Branco"analisador de fluxo, montador/desmontador"$ColorR
          echo -e $Branco"(rasm) para x86, ARM,  PPC, m68k,"$ColorR
          echo -e $Branco"Java, MSIL, SPARC, modulos de analise"$ColorR
          echo -e $Branco"de codigo e facilidades de script."$ColorR
          echo -e $Branco"Um bindiffer chamado radiff, conversor"$ColorR
          echo -e $Branco"de base (rax), auxiliar de desenvolvimento"$ColorR
          echo -e $Branco"de shellcode (rasc), um extrator"$ColorR
          echo -e $Branco"de informacoes binarias que suporta"$ColorR
          echo -e $Branco"PE, mach0, ELF, classe, etc."$ColorR
          echo -e $Branco"chamado rabin, e um utilitario"$ColorR
          echo -e $Branco"de hash baseado em bloco chamado rahash."$ColorR
          echo -e $Branco"$ r2."$ColorR
          echo -e $Branco"$ r2r."$ColorR
          echo -e $Branco"$ radiff2."$ColorR
          echo -e $Branco"$ rahash2."$ColorR
          echo -e $Branco"$ rasm2."$ColorR
          echo -e $Branco"$ r2agent."$ColorR
          echo -e $Branco"$ rabin2."$ColorR
          echo -e $Branco"$ rafind2."$ColorR
          echo -e $Branco"$ rarun2."$ColorR
          echo -e $Branco"$ ravc2."$ColorR
          echo -e $Branco"$ r2pm."$ColorR
          echo -e $Branco"$ radare2."$ColorR
          echo -e $Branco"$ ragg2."$ColorR
          echo -e $Branco"$ rasign2."$ColorR
          echo -e $Branco"$ rax2."$ColorR
          echo -e $BrancoBAD"Radare2 Homepage: https://www.radare.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/radare2/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$O" = "15" ]; then
          echo -e $Color"Instalando Programa Radare2-Cutter."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install radare2-cutter
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "15help" ]; then
          echo -e $BrancoBAD"Sobre Radare2-Cutter:"$ColorR
          echo -e $Branco"Cutter e uma GUI baseada em Qt"$ColorR
          echo -e $Branco"para binarios de engenharia reversa,"$ColorR
          echo -e $Branco"que faz uso da estrutura radare2."$ColorR
          echo -e $Branco"Espera-se que os usuarios avancados"$ColorR
          echo -e $Branco"usem as ferramentas CLI radare2, que"$ColorR
          echo -e $Branco"sao muito mais poderosas."$ColorR
          echo -e $Branco"$ Cutter."$ColorR
          echo -e $BrancoBAD"Radare2-Cutter Homepage: https://cutter.re/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/radare2-cutter/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas13

     elif [ "$O" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$O" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$O" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$O" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$O" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$O" = "P13" ]; then
          Programas13

     elif [ "$O" = "P12" ]; then
          Programas13

     elif [ "$O" = "P11" ]; then
          Programas13

     elif [ "$O" = "P10" ]; then
          Programas10

     elif [ "$O" = "P09" ]; then
          Programas09

     elif [ "$O" = "P08" ]; then
          Programas08

     elif [ "$O" = "P07" ]; then
          Programas07

     elif [ "$O" = "P06" ]; then
          Programas06

     elif [ "$O" = "P05" ]; then
          Programas05

     elif [ "$O" = "P04" ]; then
          Programas04

     elif [ "$O" = "P03" ]; then
          Programas03

     elif [ "$O" = "P02" ]; then
          Programas02

     elif [ "$O" = "P01" ]; then
          Programas01

     elif [ "$O" = "Programas01" ]; then
          Programas01

     elif [ "$O" = "Programas02" ]; then
          Programas02

     elif [ "$O" = "Programas03" ]; then
          Programas03

     elif [ "$O" = "Programas04" ]; then
          Programas04

     elif [ "$O" = "Programas05" ]; then
          Programas05

     elif [ "$O" = "Programas06" ]; then
          Programas06

     elif [ "$O" = "Programas07" ]; then
          Programas07

     elif [ "$O" = "Programas08" ]; then
          Programas08

     elif [ "$O" = "Programas09" ]; then
          Programas09

     elif [ "$O" = "Programas10" ]; then
          Programas10

     elif [ "$O" = "Programas13" ]; then
          Programas13

     elif [ "$O" = "Programas13" ]; then
          Programas13

     elif [ "$O" = "Programas13" ]; then
          Programas13

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Programas13
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Programas13
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Programas13
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Programas13
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Programas13
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Programas13
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas13
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas13
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas13
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas13
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas13
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas13
fi
}
Programas12B(){
echo -e $Color"\n\nEngenharia Reversa"$ColorR
echo -e $Color"
01) Apktool
1help Sobre Apktool
02) Dex2jar
2help Sobre Dex2jar
03) DiStorm3
3help Sobre DiStorm3
04) Edb-Debugger
4help Sobre Edb-Debugger
05) Jadx
5help Sobre Jadx
06) JavaSnoop
6help Sobre JavaSnoop
07) JD-GUI
7help Sobre JD-GUI
08) OllyDbg
8help Sobre OllyDbg
09) Smali
9help Sobre Smali
10) Valgrind
10help Sobre Valgrind
11) YARA
11help Sobre YARA
12) Bytecode-Viewer
12help Sobre Bytecode-Viewer
13) Clang
13help Sobre Clang
14) Metasploit-Framework
14help Sobre Metasploit-Framework
15) Radare2
15help Sobre Radare2
16) Radare2-Cutter
16help Sobre Radare2-Cutter
"$ColorR

echo -e "\n"
echo -e $Verde"Install all Reverse Engineering tools"$ColorR
echo -e $Verde"(x) (Instalar Todas as ferramentas.)"$ColorR
echo -e "\n\n"
}
PrompTProgramas12(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" M
}
All_Tools_12(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install apktool
apt-get -y install jadx
apt-get -y install radare2-cutter
apt-get -y install libradare2-5.0.0
apt-get -y install libradare2-common
apt-get -y install libradare2-dev
apt-get -y install radare2
apt-get -y install bytecode-viewer
apt-get -y install libyara-dev
apt-get -y install libyara9
apt-get -y install yara-doc
apt-get -y install yara
apt-get -y install valgrind
apt-get -y install javasnoop
apt-get -y install smali
apt-get -y install ollydbg
apt-get -y install metasploit-framework
apt-get -y install edb-debugger
apt-get -y install edb-debugger-plugins
apt-get -y install python3-distorm3
apt-get -y install jd-gui
apt-get -y install libdistorm3-3
apt-get -y install libdistorm3-dev
apt-get -y install dex2jar
apt-get -y install clang
apt-get -y install clang-format
apt-get -y install clang-tidy
apt-get -y install clang-tools
apt-get -y install clangd
apt-get -y install libc++-dev
apt-get -y install libc++1
apt-get -y install libc++abi-dev
apt-get -y install libc++abi1
apt-get -y install libclang-cpp-dev
apt-get -y install libclang-dev
apt-get -y install libclang1
apt-get -y install liblldb-dev
apt-get -y install libllvm-ocaml-dev
apt-get -y install libomp-dev
apt-get -y install libomp5
apt-get -y install lld
apt-get -y install lldb
apt-get -y install llvm
apt-get -y install llvm-dev
apt-get -y install llvm-runtime
apt-get -y install python3-clang
apt-get -y install python3-lldb
}
Programas12(){
Programas12B
PrompTProgramas12
if [ "$M" = "01" ]; then
   M="1"
fi
if [ "$M" = "02" ]; then
   M="2"
fi
if [ "$M" = "03" ]; then
   M="3"
fi
if [ "$M" = "04" ]; then
   M="4"
fi
if [ "$M" = "05" ]; then
   M="5"
fi
if [ "$M" = "06" ]; then
   M="6"
fi
if [ "$M" = "07" ]; then
   M="7"
fi
if [ "$M" = "08" ]; then
   M="8"
fi
if [ "$M" = "09" ]; then
   M="9"
fi
while [ "$M" ];
do
  if [ "$M" ]; then
     if [ "$M" = "1" ]; then
        echo -e $Color"Instalando Programa Apktool."$Color
        apt-get -y update 1> /dev/null 2> /dev/null
        apt-get -y install apktool
        sleep 1
        echo -e $Color"Processo Finalizado."$ColorR
        sleep 1
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        PrompTProgramas12

     elif [ "$M" = "1help" ]; then
          echo -e $BrancoBAD"Sobre Apktool:"$ColorR
          echo -e $Branco"Uma ferramenta para engenharia"$ColorR
          echo -e $Branco"reversa de aplicativos"$ColorR
          echo -e $Branco"Android binarios, fechados e de terceiros."$ColorR
          echo -e $Branco"Ele pode decodificar recursos"$ColorR
          echo -e $Branco"para a forma quase original e reconstrui-los"$ColorR
          echo -e $Branco"apos fazer algumas modificacoes;"$ColorR
          echo -e $Branco"torna possivel depurar"$ColorR
          echo -e $Branco"o codigo smali passo a passo."$ColorR
          echo -e $Branco"Tambem facilita o trabalho com um aplicativo"$ColorR
          echo -e $Branco"devido a estrutura de arquivos semelhante a"$ColorR
          echo -e $Branco"um projeto e a automacao de algumas tarefas"$ColorR
          echo -e $Branco"repetitivas, como a criacao de apk."$ColorR
          echo -e $Branco"$ apktool."$ColorR
          echo -e $BrancoBAD"Apktool Homepage: https://ibotpeaches.github.io/Apktool/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/apktool/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_12
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_12
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "2" ]; then
          echo -e $Color"Instalando Programa Dex2jar."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dex2jar
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "2help" ]; then
          echo -e $BrancoBAD"Sobre Dex2jar:"$ColorR
          echo -e $Branco"dex2jar contem 4 comentarios:"$ColorR
          echo -e $Branco"dex-reader e projetado para ler"$ColorR
          echo -e $Branco"o formato Dalvik Executable (.dex/.odex)."$ColorR
          echo -e $Branco"Tem uma API leve semelhante ao ASM."$ColorR
          echo -e $Branco"Um exemplo aqui dex-translator e"$ColorR
          echo -e $Branco"projetado para fazer"$ColorR
          echo -e $Branco"o trabalho de conversao."$ColorR
          echo -e $Branco"Ele le a instrucao dex para"$ColorR
          echo -e $Branco"o formato dex-ir, depois de"$ColorR
          echo -e $Branco"algumas otimizacoes, converte"$ColorR
          echo -e $Branco"para o formato ASM."$ColorR
          echo -e $Branco"dex-ir usado pelo dex-translator, e"$ColorR
          echo -e $Branco"projetado para representar"$ColorR
          echo -e $Branco"as ferramentas dex-tools da"$ColorR
          echo -e $Branco"instrucao dex para trabalhar"$ColorR
          echo -e $Branco"com arquivos .class."$ColorR
          echo -e $Branco"$ d2j-apk-sign."$ColorR
          echo -e $Branco"$ d2j-class-version-switch."$ColorR
          echo -e $Branco"$ d2j-dex-weaver."$ColorR
          echo -e $Branco"$ d2j-jar-access."$ColorR
          echo -e $Branco"$ d2j-jar2jasmin."$ColorR
          echo -e $Branco"$ d2j-std-apk."$ColorR
          echo -e $Branco"$ d2j-asm-verify."$ColorR
          echo -e $Branco"$ d2j-decrypt-string."$ColorR
          echo -e $Branco"$ d2j-dex2jar."$ColorR
          echo -e $Branco"$ d2j-jar-weaver."$ColorR
          echo -e $Branco"$ d2j-jasmin2jar."$ColorR
          echo -e $Branco"$ d2j_invoke."$ColorR
          echo -e $Branco"$ d2j-baksmali."$ColorR
          echo -e $Branco"$ d2j-dex-recompute-checksum."$ColorR
          echo -e $Branco"$ d2j-dex2smali."$ColorR
          echo -e $Branco"$ d2j-jar2dex."$ColorR
          echo -e $Branco"$ d2j-smali."$ColorR
          echo -e $Branco"$ dex-tools."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/pxb1988/dex2jar/tree/2.x"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dex2jar/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "3" ]; then
          echo -e $Color"Instalando Programa DiStorm3."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install python3-distorm3
          apt-get -y install libdistorm3-3
          apt-get -y install libdistorm3-dev
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "3help" ]; then
          echo -e $BrancoBAD"Sobre DiStorm3:"$ColorR
          echo -e $Branco"Distribuicao para python."$ColorR
          echo -e $Branco"diStorm3 e um projeto de"$ColorR
          echo -e $Branco"biblioteca de desmontagem de fluxo binario."$ColorR
          echo -e $Branco"Com o diStorm3, nao sao"$ColorR
          echo -e $Branco"necessarias mais strings de analise."$ColorR
          echo -e $Branco"O diStorm3 e realmente um"$ColorR
          echo -e $Branco"decompositor, o que significa"$ColorR
          echo -e $Branco"que ele recebe uma instrucao"$ColorR
          echo -e $Branco"e retorna uma estrutura"$ColorR
          echo -e $Branco"binaria que a descreve em vez de texto estatico."$ColorR
          echo -e $Branco"Isso e otimo para analise"$ColorR
          echo -e $Branco"avancada de codigo binario."$ColorR
          echo -e $Branco"Este pacote fornece as ligacoes do Python3."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/gdabah/distorm"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/distorm3/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "4" ]; then
          echo -e $Color"Instalando Programa Edb-Debugger."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install edb-debugger
          apt-get -y install edb-debugger-plugins
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "4help" ]; then
          echo -e $BrancoBAD"Sobre Edb-Debugger:"$ColorR
          echo -e $Branco"edb e um depurador grafico multiplataforma x86/x86-64."$ColorR
          echo -e $Branco"Foi inspirado no Ollydbg, mas tem como objetivo"$ColorR
          echo -e $Branco"funcionar em x86 e x86-64, bem"$ColorR
          echo -e $Branco"como em varios sistemas operacionais."$ColorR
          echo -e $Branco"Linux e a unica plataforma oficialmente suportada"$ColorR
          echo -e $Branco"no momento, mas as portas FreeBSD,"$ColorR
          echo -e $Branco"OpenBSD, OSX e Windows estao"$ColorR
          echo -e $Branco"em andamento com varios graus"$ColorR
          echo -e $Branco"de funcionalidade."$ColorR
          echo -e $Branco"$ edb."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/eteran/edb-debugger"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/edb-debugger/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "5" ]; then
          echo -e $Color"Instalando Programa Jadx."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install jadx
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "5help" ]; then
          echo -e $BrancoBAD"Sobre Jadx:"$ColorR
          echo -e $Branco"Este pacote contem um descompilador"$ColorR
          echo -e $Branco"Dex para Java."$ColorR
          echo -e $Branco"Ele contem uma linha de comando"$ColorR
          echo -e $Branco"e ferramentas GUI para produzir"$ColorR
          echo -e $Branco"codigo-fonte Java a partir"$ColorR
          echo -e $Branco"de arquivos Android Dex e Apk."$ColorR
          echo -e $Branco"Principais caracteristicas: - descompilar"$ColorR
          echo -e $Branco"o bytecode Dalvik para classes"$ColorR
          echo -e $Branco"java de arquivos APK, dex, aar"$ColorR
          echo -e $Branco"e zip - decodificar AndroidManifest.xml"$ColorR
          echo -e $Branco"e outros recursos de resources.arsc - deobfuscator incluido"$ColorR
          echo -e $Branco"Recursos do jadx-gui: - visualizar"$ColorR
          echo -e $Branco"codigo descompilado com sintaxe"$ColorR
          echo -e $Branco"destacada - pular para declaracao - localizar"$ColorR
          echo -e $Branco"uso - pesquisa de texto completo"$ColorR
          echo -e $Branco"$ jadx."$ColorR
          echo -e $Branco"$ jadx-gui."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/skylot/jadx"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/jadx/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "6" ]; then
          echo -e $Color"Instalando Programa JavaSnoop."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install javasnoop
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "6help" ]; then
          echo -e $BrancoBAD"Sobre JavaSnoop:"$ColorR
          echo -e $Branco"Normalmente, sem acesso ao"$ColorR
          echo -e $Branco"codigo-fonte original, testar"$ColorR
          echo -e $Branco"a seguranca de um cliente Java e imprevisivel"$ColorR
          echo -e $Branco"na melhor das hipoteses e irreal na pior."$ColorR
          echo -e $Branco"Com acesso a fonte original, voce"$ColorR
          echo -e $Branco"pode executar um programa Java simples"$ColorR
          echo -e $Branco"e anexar um depurador a"$ColorR
          echo -e $Branco"ele remotamente, percorrendo"$ColorR
          echo -e $Branco"o codigo e alterando as variaveis"$ColorR
          echo -e $Branco"quando necessario."$ColorR
          echo -e $Branco"Fazer o mesmo com um applet"$ColorR
          echo -e $Branco"e um pouco mais dificil."$ColorR
          echo -e $Branco"O JavaSnoop tenta resolver esse"$ColorR
          echo -e $Branco"problema permitindo que voce"$ColorR
          echo -e $Branco"se conecte a um processo existente"$ColorR
          echo -e $Branco"(como um depurador) e comece"$ColorR
          echo -e $Branco"instantaneamente a adulterar chamadas"$ColorR
          echo -e $Branco"de metodo, execute codigo personalizado"$ColorR
          echo -e $Branco"ou apenas observe"$ColorR
          echo -e $Branco"o que esta acontecendo no sistema."$ColorR
          echo -e $Branco"$ javasnoop."$ColorR
          echo -e $BrancoBAD"JavaSnoop Homepage: https://code.google.com/p/javasnoop/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/javasnoop/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "7" ]; then
          echo -e $Color"Instalando Programa JD-GUI."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install jd-gui
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "7help" ]; then
          echo -e $BrancoBAD"Sobre JD-GUI:"$ColorR
          echo -e $Branco"JD-GUI e um utilitario"$ColorR
          echo -e $Branco"grafico autonomo que exibe"$ColorR
          echo -e $Branco"codigos-fonte Java"$ColorR
          echo -e $Branco"de arquivos “.class”."$ColorR
          echo -e $Branco"Voce pode navegar pelo"$ColorR
          echo -e $Branco"codigo-fonte reconstruido"$ColorR
          echo -e $Branco"com o JD-GUI para acesso"$ColorR
          echo -e $Branco"instantaneo a metodos e campos."$ColorR
          echo -e $Branco"$ jd-gui."$ColorR
          echo -e $BrancoBAD"JD-GUI Homepage: http://jd.benow.ca/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/jd-gui/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "8" ]; then
          echo -e $Color"Instalando Programa OllyDbg."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ollydbg
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "8help" ]; then
          echo -e $BrancoBAD"Sobre OllyDbg:"$ColorR
          echo -e $Branco"OllyDbg e um depurador de analise de nivel"$ColorR
          echo -e $Branco"de montador de 32 bits"$ColorR
          echo -e $Branco"para Microsoft Windows."$ColorR
          echo -e $Branco"A enfase na analise de codigo binario"$ColorR
          echo -e $Branco"o torna particularmente util nos"$ColorR
          echo -e $Branco"casos em que a fonte nao esta disponivel."$ColorR
          echo -e $Branco"$ ollydbg."$ColorR
          echo -e $BrancoBAD"OllyDbg Homepage: http://www.ollydbg.de/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ollydbg/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "9" ]; then
          echo -e $Color"Instalando Programa Smali."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install smali
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "9help" ]; then
          echo -e $BrancoBAD"Sobre Smali:"$ColorR
          echo -e $Branco"smali/baksmali e um"$ColorR
          echo -e $Branco"montador/desmontador"$ColorR
          echo -e $Branco"para o formato dex usado"$ColorR
          echo -e $Branco"por dalvik, a implementacao"$ColorR
          echo -e $Branco"de Java VM do Android."$ColorR
          echo -e $Branco"A sintaxe e vagamente baseada"$ColorR
          echo -e $Branco"na sintaxe de Jasmin/dedexer"$ColorR
          echo -e $Branco"e suporta a funcionalidade"$ColorR
          echo -e $Branco"completa do formato"$ColorR
          echo -e $Branco"dex (anotacoes, informacoes"$ColorR
          echo -e $Branco"de depuracao, informacoes de linha, etc.)"$ColorR
          echo -e $Branco"$ baksmali."$ColorR
          echo -e $Branco"$ smali."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/JesusFreke/smali"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/smali/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "10" ]; then
          echo -e $Color"Instalando Programa Valgrind."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install valgrind
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "10help" ]; then
          echo -e $BrancoBAD"Sobre Valgrind:"$ColorR
          echo -e $Branco"Valgrind e um sistema"$ColorR
          echo -e $Branco"para depuracao e criacao"$ColorR
          echo -e $Branco"de perfil de programas Linux."$ColorR
          echo -e $Branco"Com seu conjunto de"$ColorR
          echo -e $Branco"ferramentas, voce pode detectar"$ColorR
          echo -e $Branco"automaticamente muitos bugs"$ColorR
          echo -e $Branco"de gerenciamento de memoria"$ColorR
          echo -e $Branco"e threading, evitando horas"$ColorR
          echo -e $Branco"de caca de bugs frustrantes"$ColorR
          echo -e $Branco"e tornando seus programas"$ColorR
          echo -e $Branco"mais estaveis."$ColorR
          echo -e $Branco"Voce tambem pode realizar"$ColorR
          echo -e $Branco"perfis detalhados para ajudar"$ColorR
          echo -e $Branco"a acelerar seus programas"$ColorR
          echo -e $Branco"e usar o Valgrind para criar"$ColorR
          echo -e $Branco"novas ferramentas."$ColorR
          echo -e $Branco"$ valgrind."$ColorR
          echo -e $BrancoBAD"Valgrind Homepage: http://www.valgrind.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://pkg.kali.org/pkg/valgrind"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "11" ]; then
          echo -e $Color"Instalando Programa YARA."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install libyara-dev
          apt-get -y install libyara9
          apt-get -y install yara-doc
          apt-get -y install yara
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "11help" ]; then
          echo -e $BrancoBAD"Sobre YARA:"$ColorR
          echo -e $Branco"YARA e uma ferramenta destinada"$ColorR
          echo -e $Branco"a ajudar os pesquisadores de"$ColorR
          echo -e $Branco"malware a identificar e"$ColorR
          echo -e $Branco"classificar amostras de malware."$ColorR
          echo -e $Branco"Com o YARA, e possivel criar"$ColorR
          echo -e $Branco"descricoes de familias de malware"$ColorR
          echo -e $Branco"com base em padroes textuais"$ColorR
          echo -e $Branco"ou binarios contidos"$ColorR
          echo -e $Branco"em amostras dessas familias."$ColorR
          echo -e $Branco"Cada descricao consiste"$ColorR
          echo -e $Branco"em um conjunto de strings e uma"$ColorR
          echo -e $Branco"expressao booleana que determina sua logica."$ColorR
          echo -e $Branco"Regras complexas e poderosas"$ColorR
          echo -e $Branco"podem ser criadas usando"$ColorR
          echo -e $Branco"strings binarias"$ColorR
          echo -e $Branco"com curingas, strings de texto"$ColorR
          echo -e $Branco"que nao diferenciam"$ColorR
          echo -e $Branco"maiusculas de minusculas,"$ColorR
          echo -e $Branco"operadores especiais, expressoes"$ColorR
          echo -e $Branco"regulares e muitos outros recursos."$ColorR
          echo -e $Branco"$ yara."$ColorR
          echo -e $Branco"$ yarac."$ColorR
          echo -e $BrancoBAD"YARA Homepage: https://virustotal.github.io/yara/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/yara/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "12" ]; then
          echo -e $Color"Instalando Programa Bytecode-Viewer."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install bytecode-viewer
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "12help" ]; then
          echo -e $BrancoBAD"Sobre Bytecode-Viewer:"$ColorR
          echo -e $Branco"Este pacote contem Bytecode Viewer (BCV)."$ColorR
          echo -e $Branco"E um Visualizador de Bytecode Java leve avancado,"$ColorR
          echo -e $Branco"GUI Java Decompiler, GUI Bytecode Editor, GUI Smali,"$ColorR
          echo -e $Branco"GUI Baksmali, GUI APK Editor, GUI Dex Editor,"$ColorR
          echo -e $Branco"GUI APK Decompiler, GUI DEX Decompiler,"$ColorR
          echo -e $Branco"GUI Procyon Java Decompiler,"$ColorR
          echo -e $Branco"GUI Krakatau, GUI CFR Java"$ColorR
          echo -e $Branco"Decompiler, GUI FernFlower"$ColorR
          echo -e $Branco"Java Decompiler, GUI DEX2Jar, GUI Jar2DEX, GUI Jar-Jar,"$ColorR
          echo -e $Branco"Hex Viewer, Code Searcher, Debugger e muito mais."$ColorR
          echo -e $Branco"Ha tambem um sistema"$ColorR
          echo -e $Branco"de plug-ins que permitira"$ColorR
          echo -e $Branco"que voce interaja com os arquivos de classe"$ColorR
          echo -e $Branco"carregados, por exemplo, voce pode escrever"$ColorR
          echo -e $Branco"um desofuscador de String, um buscador de codigo"$ColorR
          echo -e $Branco"malicioso ou qualquer outra"$ColorR
          echo -e $Branco"coisa que voce possa imaginar."$ColorR
          echo -e $Branco"Voce pode usar um dos plugins"$ColorR
          echo -e $Branco"pre-escritos ou escrever o seu proprio."$ColorR
          echo -e $Branco"Ele suporta scripts groovy."$ColorR
          echo -e $Branco"Uma vez que um plugin"$ColorR
          echo -e $Branco"e ativado, ele irs executar"$ColorR
          echo -e $Branco"o plugin com um ClassNode ArrayList de cada"$ColorR
          echo -e $Branco"classe carregada no BCV, isso permite que"$ColorR
          echo -e $Branco"o usuario lide com ele completamente usando o ASM."$ColorR
          echo -e $Branco"Atualmente esta sendo mantido"$ColorR
          echo -e $Branco"e desenvolvido pela Konloch."$ColorR
          echo -e $Branco"$ bytecode-viewer."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/Konloch/bytecode-viewer"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/bytecode-viewer/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "13" ]; then
          echo -e $Color"Instalando Programa Clang."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install clang
          apt-get -y install clang-format
          apt-get -y install clang-tools
          apt-get -y install clangd
          apt-get -y install libc++-dev
          apt-get -y install libc++1
          apt-get -y install libc++abi-dev
          apt-get -y install libc++abi1
          apt-get -y install libclang-cpp-dev
          apt-get -y install libclang-dev
          apt-get -y install libclang1
          apt-get -y install liblldb-dev
          apt-get -y install libllvm-ocaml-dev
          apt-get -y install libomp-dev
          apt-get -y install libomp5
          apt-get -y install lld
          apt-get -y install lldb
          apt-get -y install llvm
          apt-get -y install llvm-dev
          apt-get -y install llvm-runtime
          apt-get -y install python3-clang
          apt-get -y install python3-lldb
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "13help" ]; then
          echo -e $BrancoBAD"Sobre Clang:"$ColorR
          echo -e $Branco"O projeto Clang e um front-end C,"$ColorR
          echo -e $Branco"C++, Objective C e Objective C++"$ColorR
          echo -e $Branco"para o compilador LLVM."$ColorR
          echo -e $Branco"Seu objetivo e oferecer um"$ColorR
          echo -e $Branco"substituto para o GNU"$ColorR
          echo -e $Branco"Compiler Collection (GCC)."$ColorR
          echo -e $Branco"O Clang implementa todos"$ColorR
          echo -e $Branco"os padroes ISO C++ 1998, 11"$ColorR
          echo -e $Branco"e 14 e tambem fornece a maior"$ColorR
          echo -e $Branco"parte do suporte do C++17."$ColorR
          echo -e $Branco"Este e um pacote de dependencia"$ColorR
          echo -e $Branco"que fornece o compilador"$ColorR
          echo -e $Branco"clang padrao."$ColorR
          echo -e $Branco"$ asan_symbolize."$ColorR
          echo -e $Branco"$ clang."$ColorR
          echo -e $Branco"$ clang++."$ColorR
          echo -e $Branco"$ clang-format."$ColorR
          echo -e $Branco"$ clang-format-diff."$ColorR
          echo -e $Branco"$ git-clang-format."$ColorR
          echo -e $Branco"$ clang-tidy."$ColorR
          echo -e $Branco"$ clang-tidy-diff."$ColorR
          echo -e $Branco"$ run-clang-tidy."$ColorR
          echo -e $Branco"$ c-index-test."$ColorR
          echo -e $Branco"$ clang-query."$ColorR
          echo -e $Branco"$ scan-view."$ColorR
          echo -e $Branco"$ clang-apply-replacements."$ColorR
          echo -e $Branco"$ sancov."$ColorR
          echo -e $Branco"$ clang-check."$ColorR
          echo -e $Branco"$ scan-build."$ColorR
          echo -e $Branco"$ clangd."$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/llvm-defaults/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "14" ]; then
          echo -e $Color"Instalando Programa Metasploit-Framework."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install metasploit-framework
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "14help" ]; then
          echo -e $BrancoBAD"Sobre Metasploit-Framework:"$ColorR
          echo -e $Branco"O Metasploit Framework e uma plataforma de codigo"$ColorR
          echo -e $Branco"aberto que oferece suporte a pesquisa de vulnerabilidades,"$ColorR
          echo -e $Branco"desenvolvimento de exploracao e criacao"$ColorR
          echo -e $Branco"de ferramentas de seguranca personalizadas."$ColorR
          echo -e $BrancoBAD"Exemplos de uso do Metasploit-Framework:"$ColorR
          echo -e $Branco"Uma das melhores fontes de informacao sobre"$ColorR
          echo -e $Branco"o uso do Metasploit Framework e"$ColorR
          echo -e $Branco"o Metasploit Unleashed, um curso online"$ColorR
          echo -e $Branco"gratuito criado pela Offensive Security"$ColorR
          echo -e $Branco"O Metasploit Unleashed orienta voce desde"$ColorR
          echo -e $Branco"o basico absoluto do Metasploit ate os topicos avancados."$ColorR
          echo -e $Branco"https://www.offensive-security.com/metasploit-unleashed/"$ColorR
          echo -e $Branco"$ msf-egghunter."$ColorR
          echo -e $Branco"$ msf-find_badchars."$ColorR
          echo -e $Branco"$ msf-java_deserializer."$ColorR
          echo -e $Branco"$ msf-md5_lookup."$ColorR
          echo -e $Branco"$ msf-nasm_shell."$ColorR
          echo -e $Branco"$ msf-pdf2xdp."$ColorR
          echo -e $Branco"$ msfd."$ColorR
          echo -e $Branco"$ msfrpcd."$ColorR
          echo -e $Branco"$ msf-exe2vba."$ColorR
          echo -e $Branco"$ msf-halflm_second."$ColorR
          echo -e $Branco"$ msf-jsobfu."$ColorR
          echo -e $Branco"$ msf-metasm_shell."$ColorR
          echo -e $Branco"$ msf-pattern_create."$ColorR
          echo -e $Branco"$ msf-virustotal."$ColorR
          echo -e $Branco"$ msfdb."$ColorR
          echo -e $Branco"$ msfupdate."$ColorR
          echo -e $Branco"$ msf-exe2vbs."$ColorR
          echo -e $Branco"$ msf-hmac_sha1_crack."$ColorR
          echo -e $Branco"$ msf-makeiplist."$ColorR
          echo -e $Branco"$ msf-msf_irb_shell."$ColorR
          echo -e $Branco"$ msf-pattern_offset."$ColorR
          echo -e $Branco"$ msfconsole."$ColorR
          echo -e $Branco"$ msfrpc."$ColorR
          echo -e $Branco"$ msfvenom."$ColorR
          echo -e $BrancoBAD"Metasploit-Framework Homepage: https://www.metasploit.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/metasploit-framework/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "15" ]; then
          echo -e $Color"Instalando Programa Radare2."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install libradare2-5.0.0
          apt-get -y install libradare2-common
          apt-get -y install libradare2-dev
          apt-get -y install radare2
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "15help" ]; then
          echo -e $BrancoBAD"Sobre Radare2:"$ColorR
          echo -e $Branco"O projeto visa criar uma cadeia"$ColorR
          echo -e $Branco"de ferramentas completa, portatil,"$ColorR
          echo -e $Branco"multi-arquitetura, tipo unix para engenharia reversa."$ColorR
          echo -e $Branco"E composto por um editor hexadecimal"$ColorR
          echo -e $Branco"(radare) com uma camada IO"$ColorR
          echo -e $Branco"encapsulada suportando varios backends"$ColorR
          echo -e $Branco"para arquivos locais/remotos,"$ColorR
          echo -e $Branco"depurador (OS X, BSD, Linux, W32),"$ColorR
          echo -e $Branco"analisador de fluxo, montador/desmontador"$ColorR
          echo -e $Branco"(rasm) para x86, ARM,  PPC, m68k,"$ColorR
          echo -e $Branco"Java, MSIL, SPARC, modulos de analise"$ColorR
          echo -e $Branco"de codigo e facilidades de script."$ColorR
          echo -e $Branco"Um bindiffer chamado radiff, conversor"$ColorR
          echo -e $Branco"de base (rax), auxiliar de desenvolvimento"$ColorR
          echo -e $Branco"de shellcode (rasc), um extrator"$ColorR
          echo -e $Branco"de informacoes binarias que suporta"$ColorR
          echo -e $Branco"PE, mach0, ELF, classe, etc."$ColorR
          echo -e $Branco"chamado rabin, e um utilitario"$ColorR
          echo -e $Branco"de hash baseado em bloco chamado rahash."$ColorR
          echo -e $Branco"$ r2."$ColorR
          echo -e $Branco"$ r2r."$ColorR
          echo -e $Branco"$ radiff2."$ColorR
          echo -e $Branco"$ rahash2."$ColorR
          echo -e $Branco"$ rasm2."$ColorR
          echo -e $Branco"$ r2agent."$ColorR
          echo -e $Branco"$ rabin2."$ColorR
          echo -e $Branco"$ rafind2."$ColorR
          echo -e $Branco"$ rarun2."$ColorR
          echo -e $Branco"$ ravc2."$ColorR
          echo -e $Branco"$ r2pm."$ColorR
          echo -e $Branco"$ radare2."$ColorR
          echo -e $Branco"$ ragg2."$ColorR
          echo -e $Branco"$ rasign2."$ColorR
          echo -e $Branco"$ rax2."$ColorR
          echo -e $BrancoBAD"Radare2 Homepage: https://www.radare.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/radare2/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "16" ]; then
          echo -e $Color"Instalando Programa Radare2-Cutter."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install radare2-cutter
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "16help" ]; then
          echo -e $BrancoBAD"Sobre Radare2-Cutter:"$ColorR
          echo -e $Branco"Cutter e uma GUI baseada em Qt"$ColorR
          echo -e $Branco"para binarios de engenharia reversa,"$ColorR
          echo -e $Branco"que faz uso da estrutura radare2."$ColorR
          echo -e $Branco"Espera-se que os usuarios avancados"$ColorR
          echo -e $Branco"usem as ferramentas CLI radare2, que"$ColorR
          echo -e $Branco"sao muito mais poderosas."$ColorR
          echo -e $Branco"$ Cutter."$ColorR
          echo -e $BrancoBAD"Radare2-Cutter Homepage: https://cutter.re/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/radare2-cutter/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas12

     elif [ "$M" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$M" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$M" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$M" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$M" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$M" = "P13" ]; then
          Programas13

     elif [ "$M" = "P12" ]; then
          Programas12

     elif [ "$M" = "P11" ]; then
          Programas12

     elif [ "$M" = "P10" ]; then
          Programas10

     elif [ "$M" = "P09" ]; then
          Programas09

     elif [ "$M" = "P08" ]; then
          Programas08

     elif [ "$M" = "P07" ]; then
          Programas07

     elif [ "$M" = "P06" ]; then
          Programas06

     elif [ "$M" = "P05" ]; then
          Programas05

     elif [ "$M" = "P04" ]; then
          Programas04

     elif [ "$M" = "P03" ]; then
          Programas03

     elif [ "$M" = "P02" ]; then
          Programas02

     elif [ "$M" = "P01" ]; then
          Programas01

     elif [ "$M" = "Programas01" ]; then
          Programas01

     elif [ "$M" = "Programas02" ]; then
          Programas02

     elif [ "$M" = "Programas03" ]; then
          Programas03

     elif [ "$M" = "Programas04" ]; then
          Programas04

     elif [ "$M" = "Programas05" ]; then
          Programas05

     elif [ "$M" = "Programas06" ]; then
          Programas06

     elif [ "$M" = "Programas07" ]; then
          Programas07

     elif [ "$M" = "Programas08" ]; then
          Programas08

     elif [ "$M" = "Programas09" ]; then
          Programas09

     elif [ "$M" = "Programas10" ]; then
          Programas10

     elif [ "$M" = "Programas12" ]; then
          Programas12

     elif [ "$M" = "Programas12" ]; then
          Programas12

     elif [ "$M" = "Programas13" ]; then
          Programas13

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Programas12
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Programas12
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Programas12
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Programas12
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Programas12
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Programas12
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas12
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas12
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas12
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas12
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas12
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas12
fi
}
Programas11B(){
echo -e $Color"\n\nAtaques de Senha"$ColorR
echo -e $Color"
01) BurpSuite                         35) hashID
1help Sobre BurpSuite                 35help Sobre hashID
02) CeWL                              36) Medusa
2help Sobre CeWL                      36help Sobre Medusa
03) Chntpw                            37) Mimikatz
04) Cisco-Auditing-Tool               37help Sobre Mimikatz
4help Sobre Cisco-Auditing-Tool       38) Onesixtyone
05) CmosPwd                           38help Sobre Onesixtyone
5help Sobre CmosPwd                   39) Ophcrack
06) Creddump7                         39help Sobre Ophcrack
6help Sobre Creddump7                 40) Passing-The-Hash
07) Crunch                            40help Sobre Passing-The
7help Sobre Crunch                    41) PDFCrack
08) Gpp-Decrypt                       41help Sobre PDFCrack
8help Sobre Gpp-Decrypt               42) Pipal
09) Hash-Identifier                   42help Sobre Pipal
9help Sobre Hash-Identifier           43) RarCrack
10) Hydra                             43help Sobre RarCrack
10help Sobre Hydra                    44) Samdump2
11) John the Ripper                   44help Sobre Samdump2
11help Sobre John                     45) SecLists
12) Johnny                            45help Sobre SecLists
12help Sobre Johnny                   46) SIPcrack
13) Maltego-Teeth                     46help Sobre SIPcrack
13help Sobre Maltego-Teeth            47) SIPVicious
14) Maskprocessor                     47help Sobre SIPVicious
14help Sobre Maskprocessor            48) SMBMap
15) Multiforcer                       48help Sobre SMBMap
15help Sobre Multiforcer              49) SuCrack
16) Ncrack                            49help Sobre SuCrack
16help Sobre Ncrack                   50) Twofi
17) Oclgausscrack                     50help Sobre Twofi
17help Sobre Oclgausscrack
18) PACK
18help Sobre PACK
19) Patator
19help Sobre Patator
20) Polenum
20help Sobre Polenum
21) RainbowCrack
21help Sobre RainbowCrack
22) Rcracki-Mt
22help Sobre Rcracki-Mt
23) RSMangler
23help Sobre RSMangler
24) SQLdict
24help Sobre SQLdict
25) Statsprocessor
25help Sobre Statsprocessor
26) Thc-Pptp-Bruter
26help Sobre Thc-Pptp-Bruter
27) TrueCrack
27help Sobre TrueCrack
28) WebScarab
28help Sobre WebScarab
29) Wordlists
29help Sobre Wordlists
30) Zaproxy
30help Sobre Zaproxy
31) Fcrackzip
31help Sobre Fcrackzip
32) FreeRDP-X11
32help Sobre FreeRDP-X11
33) Hashcat
33help Sobre Hashcat
34) Hashcat-Utils
34help Sobre Hashcat-Utils
"$ColorR

echo -e "\n"
echo -e $Verde"Install all Password Attacks tools"$ColorR
echo -e $Verde"(x) (Instalar Todas as ferramentas.)"$ColorR
echo -e "\n\n"
}
PrompTProgramas11(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" K
}
All_Tools_11(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install john
apt-get -y install ophcrack
apt-get -y install samdump2
apt-get -y install seclists
apt-get -y install sucrack
apt-get -y install twofi
apt-get -y install ophcrack-cli
apt-get -y install freerdp2-dev
apt-get -y install freerdp2-shadow-x11
apt-get -y install sipvicious
apt-get -y install smbmap
apt-get -y install freerdp2-wayland
apt-get -y install freerdp2-x11
apt-get -y install hashcat
apt-get -y install hashcat-data
apt-get -y install hashcat-utils
apt-get -y install mimikatz
apt-get -y install rarcrack
apt-get -y install hashid
apt-get -y install medusa
apt-get -y install pipal
apt-get -y install sipcrack
apt-get -y install passing-the-hash
apt-get -y install libfreerdp-client2-2
apt-get -y install libfreerdp-server2-2
apt-get -y install libfreerdp-shadow-subsystem2-2
apt-get -y install libfreerdp-shadow2-2
apt-get -y install libfreerdp2-2
apt-get -y install libuwac0-0
apt-get -y install libuwac0-dev
apt-get -y install libwinpr-tools2-2
apt-get -y install libwinpr2-2
apt-get -y install libwinpr2-dev
apt-get -y install winpr-utils
apt-get -y install ncrack
apt-get -y install pack
apt-get -y install polenum
apt-get -y install zaproxy
apt-get -y install sqldict
apt-get -y install onesixtyone
apt-get -y install thc-pptp-bruter
apt-get -y install fcrackzip
apt-get -y install wordlists
apt-get -y install webscarab
apt-get -y install statsprocessor
apt-get -y install oclgausscrack
apt-get -y install pdfcrack
apt-get -y install chntpw
apt-get -y install hydra
apt-get -y install john-data
apt-get -y install hydra-gtk
apt-get -y install truecrack
apt-get -y install rcracki-mt
apt-get -y install rsmangler
apt-get -y install rainbowcrack
apt-get -y install multiforcer
apt-get -y install maskprocessor
apt-get -y install patator
apt-get -y install johnny
apt-get -y install maltego-teeth
apt-get -y install hash-identifier
apt-get -y install gpp-decrypt
apt-get -y install crunch
apt-get -y install cmospwd
apt-get -y install cisco-auditing-tool
apt-get -y install creddump7
apt-get -y install burpsuite
apt-get -y install cewl
}
Programas11(){
Programas11B
PrompTProgramas11
if [ "$K" = "01" ]; then
   K="1"
fi
if [ "$K" = "02" ]; then
   K="2"
fi
if [ "$K" = "03" ]; then
   K="3"
fi
if [ "$K" = "04" ]; then
   K="4"
fi
if [ "$K" = "05" ]; then
   K="5"
fi
if [ "$K" = "06" ]; then
   K="6"
fi
if [ "$K" = "07" ]; then
   K="7"
fi
if [ "$K" = "08" ]; then
   K="8"
fi
if [ "$K" = "09" ]; then
   K="9"
fi
while [ "$K" ];
do
  if [ "$K" ]; then
     if [ "$K" = "1" ]; then
        echo -e $Color"Instalando Programa BurpSuite."$Color
        apt-get -y update 1> /dev/null 2> /dev/null
        apt-get -y install burpsuite
        sleep 1
        echo -e $Color"Processo Finalizado."$ColorR
        sleep 1
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        PrompTProgramas11

     elif [ "$K" = "1help" ]; then
          echo -e $BrancoBAD"Sobre BurpSuite:"$ColorR
          echo -e $Branco"Burp Suite e uma plataforma integrada"$ColorR
          echo -e $Branco"para realizar testes de seguranca de aplicacoes web."$ColorR
          echo -e $Branco"Suas varias ferramentas funcionam perfeitamente juntas"$ColorR
          echo -e $Branco"para dar suporte a todo o processo de teste,"$ColorR
          echo -e $Branco"desde o mapeamento inicial e a analise da superficie"$ColorR
          echo -e $Branco"de ataque de um aplicativo ate a descoberta"$ColorR
          echo -e $Branco"e exploracao de vulnerabilidades de seguranca."$ColorR
          echo -e $Branco"O Burp oferece controle total, permitindo combinar"$ColorR
          echo -e $Branco"tecnicas manuais avancadas com automacao"$ColorR
          echo -e $Branco"de ultima geracao, para tornar seu trabalho"$ColorR
          echo -e $Branco"mais rapido, eficaz e divertido."$ColorR
          echo -e $Branco"$ burpsuite."$ColorR
          echo -e $BrancoBAD"Burpsuite Homepage: https://portswigger.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/burpsuite/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_11
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_11
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "2" ]; then
          echo -e $Color"Instalando Programa CeWL."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cewl
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "2help" ]; then
          echo -e $BrancoBAD"Sobre CeWL:"$ColorR
          echo -e $Branco"CeWL (Custom Word List generator)"$ColorR
          echo -e $Branco"e um aplicativo ruby que rastreia"$ColorR
          echo -e $Branco"um determinado URL, ate uma"$ColorR
          echo -e $Branco"profundidade especificada, e retorna"$ColorR
          echo -e $Branco"uma lista de palavras que podem ser"$ColorR
          echo -e $Branco"usadas para crackers de senha, como John the Ripper."$ColorR
          echo -e $Branco"Opcionalmente, o CeWL pode seguir links externos."$ColorR
          echo -e $Branco"CeWL tambem pode criar uma lista de"$ColorR
          echo -e $Branco"enderecos de e-mail encontrados"$ColorR
          echo -e $Branco"em links mailto."$ColorR
          echo -e $Branco"Esses enderecos de e-mail podem"$ColorR
          echo -e $Branco"ser usados como nomes de usuario"$ColorR
          echo -e $Branco"em acoes de forca bruta."$ColorR
          echo -e $Branco"Outra ferramenta disponibilizada"$ColorR
          echo -e $Branco"pelo projeto CeWL e o FAB (Files Ja Bagged)."$ColorR
          echo -e $Branco"A FAB extrai o conteudo dos campos"$ColorR
          echo -e $Branco"autor/criador, dos metadados de alguns"$ColorR
          echo -e $Branco"arquivos, para criar listas de"$ColorR
          echo -e $Branco"possiveis nomes de usuario."$ColorR
          echo -e $Branco"Esses nomes de usuario podem ser usados"$ColorR
          echo -e $Branco"em associacao com a lista"$ColorR
          echo -e $Branco"de senhas gerada pelo CeWL."$ColorR
          echo -e $Branco"A FAB usa as mesmas tecnicas"$ColorR
          echo -e $Branco"de extracao de metadados que a CeWL."$ColorR
          echo -e $Branco"Atualmente, a FAB processa"$ColorR
          echo -e $Branco"os formatos Office pré 2007,"$ColorR
          echo -e $Branco"Office 2007 e PDF."$ColorR
          echo -e $Branco"CeWL e util em testes de seguranca"$ColorR
          echo -e $Branco"e investigacoes forenses."$ColorR
          echo -e $Branco"CeWL e pronunciado “cool”."$ColorR
          echo -e $Branco"$ cewl."$ColorR
          echo -e $Branco"$ fab-cewl."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/digininja/CeWL"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cewl/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "3" ]; then
          echo -e $Color"Instalando Programa Chntpw."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install chntpw
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "3help" ]; then
          echo -e $BrancoBAD"Sobre Chntpw:"$ColorR
          echo -e $Branco"Este pequeno programa fornece"$ColorR
          echo -e $Branco"uma maneira de visualizar"$ColorR
          echo -e $Branco"informacoes e alterar senhas"$ColorR
          echo -e $Branco"de usuarios em um arquivo"$ColorR
          echo -e $Branco"de banco de dados de usuarios do Windows NT/2000."$ColorR
          echo -e $Branco"As senhas antigas nao precisam"$ColorR
          echo -e $Branco"ser conhecidas, pois sao sobrescritas."$ColorR
          echo -e $Branco"Alem disso, ele tambem contem um editor de registro"$ColorR
          echo -e $Branco"simples (gravacoes de dados do mesmo tamanho)"$ColorR
          echo -e $Branco"e um editor hexadecimal"$ColorR
          echo -e $Branco"que permite mexer com bits"$ColorR
          echo -e $Branco"e bytes no arquivo como desejar."$ColorR
          echo -e $Branco"Se voce deseja bootdisks GNU/Linux"$ColorR
          echo -e $Branco"para recuperacao de senha offline, voce pode adicionar"$ColorR
          echo -e $Branco"este utilitario a discos de imagem personalizados"$ColorR
          echo -e $Branco"ou usar aqueles fornecidos na"$ColorR
          echo -e $Branco"pagina inicial de ferramentas."$ColorR
          echo -e $Branco"$ chntpw."$ColorR
          echo -e $Branco"$ samunlock."$ColorR
          echo -e $Branco"$ reged."$ColorR
          echo -e $Branco"$ samusrgrp."$ColorR
          echo -e $Branco"$ sampasswd."$ColorR
          echo -e $BrancoBAD"Chntpw Homepage: http://pogostick.net/~pnh/ntpasswd/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/chntpw/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "4" ]; then
          echo -e $Color"Instalando Programa Cisco-Auditing-Tool."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cisco-auditing-tool
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "4help" ]; then
          echo -e $BrancoBAD"Sobre Cisco-Auditing-Tool:"$ColorR
          echo -e $Branco"Script Perl que verifica os roteadores Cisco"$ColorR
          echo -e $Branco"em busca de vulnerabilidades comuns."$ColorR
          echo -e $Branco"$ CAT."$ColorR
          echo -e $BrancoBAD"Cisco-Auditing-Tool Homepage: http://www.scrypt.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cisco-auditing-tool/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "5" ]; then
          echo -e $Color"Instalando Programa CmosPwd."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cmospwd
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "5help" ]; then
          echo -e $BrancoBAD"Sobre CmosPwd:"$ColorR
          echo -e $Branco"CmosPwd e uma ferramenta"$ColorR
          echo -e $Branco"multiplataforma para descriptografar"$ColorR
          echo -e $Branco"a senha armazenada no CMOS usada"$ColorR
          echo -e $Branco"para acessar a configuracao do BIOS"$ColorR
          echo -e $Branco"de um computador."$ColorR
          echo -e $Branco"Este aplicativo deve funcionar"$ColorR
          echo -e $Branco"imediatamente na maioria dos"$ColorR
          echo -e $Branco"sistemas modernos, mas alguns BIOS"$ColorR
          echo -e $Branco"mais esotericos podem nao ser"$ColorR
          echo -e $Branco"suportados ou podem exigir etapas adicionais."$ColorR
          echo -e $Branco"$ cmospwd."$ColorR
          echo -e $BrancoBAD"CmosPwd Homepage: https://www.cgsecurity.org/wiki/CmosPwd"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cmospwd/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "6" ]; then
          echo -e $Color"Instalando Programa Creddump7."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install creddump7
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "6help" ]; then
          echo -e $BrancoBAD"Sobre Creddump7:"$ColorR
          echo -e $Branco"Este pacote contem uma ferramenta Python"$ColorR
          echo -e $Branco"para extrair varias credenciais ed"$ColorR
          echo -e $Branco"segredos das secoes de registro do Windows."$ColorR
          echo -e $Branco"E baseado no programa creddump."$ColorR
          echo -e $Branco"Muitos patches e correcoes foram"$ColorR
          echo -e $Branco"aplicados por Ronnie Flaters."$ColorR
          echo -e $Branco"$ creddump7."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/Neohapsis/creddump7"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/creddump7/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "7" ]; then
          echo -e $Color"Instalando Programa Crunch."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install crunch
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "7help" ]; then
          echo -e $BrancoBAD"Sobre Crunch:"$ColorR
          echo -e $Branco"Crunch e um gerador de lista"$ColorR
          echo -e $Branco"de palavras onde voce pode"$ColorR
          echo -e $Branco"especificar um conjunto de caracteres"$ColorR
          echo -e $Branco"padrao ou qualquer conjunto de"$ColorR
          echo -e $Branco"caracteres a ser usado na geracao"$ColorR
          echo -e $Branco"das listas de palavras."$ColorR
          echo -e $Branco"As listas de palavras sao criadas"$ColorR
          echo -e $Branco"atraves da combinacao e permutacao"$ColorR
          echo -e $Branco"de um conjunto de caracteres."$ColorR
          echo -e $Branco"Voce pode determinar a quantidade"$ColorR
          echo -e $Branco"de caracteres e o tamanho da lista."$ColorR
          echo -e $Branco"Este programa suporta numeros"$ColorR
          echo -e $Branco"e simbolos, caracteres maiusculos"$ColorR
          echo -e $Branco"e minusculos separadamente e Unicode."$ColorR
          echo -e $Branco"$ crunch."$ColorR
          echo -e $BrancoBAD"Crunch Homepage: http://sourceforge.net/projects/crunch-wordlist/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/crunch/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "8" ]; then
          echo -e $Color"Instalando Programa Gpp-Decrypt."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install gpp-decrypt
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "8help" ]; then
          echo -e $BrancoBAD"Sobre Gpp-Decrypt:"$ColorR
          echo -e $Branco"Um script ruby simples que"$ColorR
          echo -e $Branco"descriptografara uma determinada"$ColorR
          echo -e $Branco"string criptografada pelo GPP."$ColorR
          echo -e $Branco"$ gpp-decrypt."$ColorR
          echo -e $BrancoBAD"Gpp-Decrypt Homepage: http://carnal0wnage.attackresearch.com/2012/10/group-policy-preferences-and-getting.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/gpp-decrypt/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "9" ]; then
          echo -e $Color"Instalando Programa Hash-Identifier."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hash-identifier
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "9help" ]; then
          echo -e $BrancoBAD"Sobre Hash-Identifier:"$ColorR
          echo -e $Branco"Software para identificar"$ColorR
          echo -e $Branco"os diferentes tipos de hashes"$ColorR
          echo -e $Branco"usados para criptografar dados"$ColorR
          echo -e $Branco"e principalmente senhas."$ColorR
          echo -e $Branco"$ hash-identifier."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/blackploit/hash-identifier"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hash-identifier/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "10" ]; then
          echo -e $Color"Instalando Programa Hydra."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hydra
          apt-get -y install hydra-gtk
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "10help" ]; then
          echo -e $BrancoBAD"Sobre Hydra:"$ColorR
          echo -e $Branco"Hydra e um cracker de login paralelizado"$ColorR
          echo -e $Branco"que suporta varios protocolos de ataque."$ColorR
          echo -e $Branco"E muito rapido e flexivel, e novos"$ColorR
          echo -e $Branco"modulos sao faceis de adicionar."$ColorR
          echo -e $Branco"Essa ferramenta possibilita que pesquisadores"$ColorR
          echo -e $Branco"e consultores de seguranca mostrem como"$ColorR
          echo -e $Branco"seria facil obter acesso nao autorizado"$ColorR
          echo -e $Branco"a um sistema remotamente."$ColorR
          echo -e $Branco"Suporta: Cisco AAA, Cisco auth, Cisco enable,"$ColorR
          echo -e $Branco"CVS, FTP, HTTP(S)-FORM-GET, HTTP(S)-FORM-POST,"$ColorR
          echo -e $Branco"HTTP(S)-GET, HTTP(S)-HEAD, HTTP-  Proxy,"$ColorR
          echo -e $Branco"ICQ, IMAP, IRC, LDAP, MS-SQL, MySQL,"$ColorR
          echo -e $Branco"NNTP, Oracle Listener, Oracle SID,"$ColorR
          echo -e $Branco"PC-Anywhere, PC-NFS, POP3, PostgreSQL,"$ColorR
          echo -e $Branco"RDP, Rexec, Rlogin, Rsh, SIP, SMB(NT),"$ColorR
          echo -e $Branco"SMTP, SMTP Enum, SNMP v1+v2+v3,"$ColorR
          echo -e $Branco"SOCKS5, SSH (v1 e v2), SSHKEY,"$ColorR
          echo -e $Branco"Subversion, Teamspeak (TS2), Telnet,"$ColorR
          echo -e $Branco"VMware-Auth, VNC e XMPP."$ColorR
          echo -e $Branco"$ dpl4hydra."$ColorR
          echo -e $Branco"$ pw-inspector."$ColorR
          echo -e $Branco"$ hydra."$ColorR
          echo -e $Branco"$ hydra-wizard."$ColorR
          echo -e $Branco"$ xhydra."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/vanhauser-thc/thc-hydra"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hydra/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "11" ]; then
          echo -e $Color"Instalando Programa John."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install john
          apt-get -y install john-data
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "11help" ]; then
          echo -e $BrancoBAD"Sobre John:"$ColorR
          echo -e $Branco"John the Ripper e uma ferramenta"$ColorR
          echo -e $Branco"projetada para ajudar os"$ColorR
          echo -e $Branco"administradores de sistemas"$ColorR
          echo -e $Branco"a encontrar senhas fracas"$ColorR
          echo -e $Branco"(faceis de adivinhar ou decifrar"$ColorR
          echo -e $Branco"por forca bruta) e ate mesmo enviar"$ColorR
          echo -e $Branco"emails automaticamente aos"$ColorR
          echo -e $Branco"usuarios avisando-os sobre"$ColorR
          echo -e $Branco"isso, se desejado."$ColorR
          echo -e $Branco"Alem de varios tipos de hash"$ColorR
          echo -e $Branco"de senha crypt(3) mais comumente"$ColorR
          echo -e $Branco"encontrados em varios tipos"$ColorR
          echo -e $Branco"de Unix, sao suportados imediatamente"$ColorR
          echo -e $Branco"os hashes Kerberos AFS"$ColorR
          echo -e $Branco"e Windows NT/2000/XP/2003 LM, alem"$ColorR
          echo -e $Branco"de varios outros com patches contribuidos."$ColorR
          echo -e $Branco"$ SIPdump."$ColorR
          echo -e $Branco"$ calc_stat."$ColorR
          echo -e $Branco"$ eapmd5tojohn."$ColorR
          echo -e $Branco"$ hccap2john."$ColorR
          echo -e $Branco"$ mailer."$ColorR
          echo -e $Branco"$ racf2john."$ColorR
          echo -e $Branco"$ tgtsnarf."$ColorR
          echo -e $Branco"$ undrop."$ColorR
          echo -e $Branco"$ vncpcap2john."$ColorR
          echo -e $Branco"$ base64conv."$ColorR
          echo -e $Branco"$ cprepair."$ColorR
          echo -e $Branco"$ genmkvpwd."$ColorR
          echo -e $Branco"$ john."$ColorR
          echo -e $Branco"$ mkvcalcproba."$ColorR
          echo -e $Branco"$ rar2john."$ColorR
          echo -e $Branco"$ uaf2john."$ColorR
          echo -e $Branco"$ unique."$ColorR
          echo -e $Branco"$ wpapcap2john."$ColorR
          echo -e $Branco"$ bitlocker2john."$ColorR
          echo -e $Branco"$ dmg2john."$ColorR
          echo -e $Branco"$ gpg2john."$ColorR
          echo -e $Branco"$ keepass2john."$ColorR
          echo -e $Branco"$ putty2john."$ColorR
          echo -e $Branco"$ raw2dyna."$ColorR
          echo -e $Branco"$ unafs."$ColorR
          echo -e $Branco"$ unshadow."$ColorR
          echo -e $Branco"$ zip2john."$ColorR
          echo -e $Branco"$ 1password2john."$ColorR
          echo -e $Branco"$ adxcsouf2john."$ColorR
          echo -e $Branco"$ andotp2john."$ColorR
          echo -e $Branco"$ ansible2john."$ColorR
          echo -e $Branco"$ aruba2john."$ColorR
          echo -e $Branco"$ bestcrypt2john."$ColorR
          echo -e $Branco"$ bitwarden2john."$ColorR
          echo -e $Branco"$ ccache2john."$ColorR
          echo -e $Branco"$ dashlane2john."$ColorR
          echo -e $Branco"$ dmg2john."$ColorR
          echo -e $Branco"$ electrum2john."$ColorR
          echo -e $Branco"$ enpass5tojohn."$ColorR
          echo -e $Branco"$ geli2john."$ColorR
          echo -e $Branco"$ ibmiscanner2john."$ColorR
          echo -e $Branco"$ itunes_backup2john."$ColorR
          echo -e $Branco"$ keychain2john."$ColorR
          echo -e $Branco"$ kirbi2john."$ColorR
          echo -e $Branco"$ kwallet2john."$ColorR
          echo -e $Branco"$ libreoffice2john."$ColorR
          echo -e $Branco"$ luks2john."$ColorR
          echo -e $Branco"$ monero2john."$ColorR
          echo -e $Branco"$ mozilla2john."$ColorR
          echo -e $Branco"$ office2john."$ColorR
          echo -e $Branco"$ padlock2john."$ColorR
          echo -e $Branco"$ pem2john."$ColorR
          echo -e $Branco"$ pgpsda2john."$ColorR
          echo -e $Branco"$ ps_token2john."$ColorR
          echo -e $Branco"$ radius2john."$ColorR
          echo -e $Branco"$ sense2john."$ColorR
          echo -e $Branco"$ ssh2john."$ColorR
          echo -e $Branco"$ strip2john."$ColorR
          echo -e $Branco"$ truecrypt2john."$ColorR
          echo -e $Branco"$ zed2john."$ColorR
          echo -e $Branco"$ 7z2john."$ColorR
          echo -e $Branco"$ aem2john."$ColorR
          echo -e $Branco"$ androidbackup2john."$ColorR
          echo -e $Branco"$ apex2john."$ColorR
          echo -e $Branco"$ atmail2john."$ColorR
          echo -e $Branco"$ bitcoin2john."$ColorR
          echo -e $Branco"$ bks2john."$ColorR
          echo -e $Branco"$ cisco2john."$ColorR
          echo -e $Branco"$ deepsound2john."$ColorR
          echo -e $Branco"$ ecryptfs2john."$ColorR
          echo -e $Branco"$ encfs2john."$ColorR
          echo -e $Branco"$ ethereum2john."$ColorR
          echo -e $Branco"$ hccapx2john."$ColorR
          echo -e $Branco"$ ikescan2john."$ColorR
          echo -e $Branco"$ iwork2john."$ColorR
          echo -e $Branco"$ keyring2john."$ColorR
          echo -e $Branco"$ known_hosts2john."$ColorR
          echo -e $Branco"$ lastpass2john."$ColorR
          echo -e $Branco"$ lion2john."$ColorR
          echo -e $Branco"$ mac2john."$ColorR
          echo -e $Branco"$ money2john."$ColorR
          echo -e $Branco"$ multibit2john."$ColorR
          echo -e $Branco"$ openbsd_softraid2john."$ColorR
          echo -e $Branco"$ pcap2john."$ColorR
          echo -e $Branco"$ pfx2john."$ColorR
          echo -e $Branco"$ pgpwde2john."$ColorR
          echo -e $Branco"$ pse2john."$ColorR
          echo -e $Branco"$ restic2john."$ColorR
          echo -e $Branco"$ signal2john."$ColorR
          echo -e $Branco"$ sspr2john."$ColorR
          echo -e $Branco"$ telegram2john."$ColorR
          echo -e $Branco"$ vdi2john."$ColorR
          echo -e $Branco"$ DPAPImk2john."$ColorR
          echo -e $Branco"$ aix2john."$ColorR
          echo -e $Branco"$ androidfde2john."$ColorR
          echo -e $Branco"$ applenotes2john."$ColorR
          echo -e $Branco"$ axcrypt2john."$ColorR
          echo -e $Branco"$ bitshares2john."$ColorR
          echo -e $Branco"$ blockchain2john."$ColorR
          echo -e $Branco"$ cracf2john."$ColorR
          echo -e $Branco"$ diskcryptor2john."$ColorR
          echo -e $Branco"$ ejabberd2john."$ColorR
          echo -e $Branco"$ enpass2john."$ColorR
          echo -e $Branco"$ filezilla2john."$ColorR
          echo -e $Branco"$ htdigest2john."$ColorR
          echo -e $Branco"$ ios7tojohn."$ColorR
          echo -e $Branco"$ kdcdump2john."$ColorR
          echo -e $Branco"$ keystore2john."$ColorR
          echo -e $Branco"$ krb2john."$ColorR
          echo -e $Branco"$ ldif2john."$ColorR
          echo -e $Branco"$ lotus2john."$ColorR
          echo -e $Branco"$ mcafee_epo2john."$ColorR
          echo -e $Branco"$ mosquitto2john."$ColorR
          echo -e $Branco"$ neo2john."$ColorR
          echo -e $Branco"$ openssl2john."$ColorR
          echo -e $Branco"$ pdf2john."$ColorR
          echo -e $Branco"$ pgpdisk2john."$ColorR
          echo -e $Branco"$ prosody2john."$ColorR
          echo -e $Branco"$ pwsafe2john."$ColorR
          echo -e $Branco"$ sap2john."$ColorR
          echo -e $Branco"$ sipdump2john."$ColorR
          echo -e $Branco"$ staroffice2john."$ColorR
          echo -e $Branco"$ tezos2john."$ColorR
          echo -e $Branco"$ vmx2john."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/magnumripper/JohnTheRipper"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/john/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "12" ]; then
          echo -e $Color"Instalando Programa Johnny."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install johnny
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "12help" ]; then
          echo -e $BrancoBAD"Sobre Johnny:"$ColorR
          echo -e $Branco"Johnny fornece uma GUI"$ColorR
          echo -e $Branco"para a ferramenta de quebra"$ColorR
          echo -e $Branco"de senha John the Ripper."$ColorR
          echo -e $BrancoBAD"Github: https://openwall.info/wiki/john/johnny"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/johnny/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "13" ]; then
          echo -e $Color"Instalando Programa Maltego-Teeth."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install maltego-teeth
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "13help" ]; then
          echo -e $BrancoBAD"Sobre Maltego-Teeth:"$ColorR
          echo -e $Branco"Um conjunto de transformacoes"$ColorR
          echo -e $Branco"para o Maltego executar nmap,"$ColorR
          echo -e $Branco"sqlmap e muito mais"$ColorR
          echo -e $Branco"em entidades no Maltego."$ColorR
          echo -e $BrancoBAD"Maltego-Teeth Homepage: https://www.maltego.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/maltego-teeth/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "14" ]; then
          echo -e $Color"Instalando Programa Maskprocessor."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install maskprocessor
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "14help" ]; then
          echo -e $BrancoBAD"Sobre Maskprocessor:"$ColorR
          echo -e $Branco"Maskprocessor e um gerador"$ColorR
          echo -e $Branco"de lista de palavras rapido."$ColorR
          echo -e $Branco"Ele enumera todas as combinacoes"$ColorR
          echo -e $Branco"de um determinado keyspace"$ColorR
          echo -e $Branco"definido pelo usuario"$ColorR
          echo -e $Branco"e gera os resultados."$ColorR
          echo -e $Branco"Uma vez que suporta diferentes"$ColorR
          echo -e $Branco"alfabetos (que tambem"$ColorR
          echo -e $Branco"podem ser combinados) em diferentes"$ColorR
          echo -e $Branco"posicoes no modelo de geracao"$ColorR
          echo -e $Branco"(“mascara”), essa abordagem"$ColorR
          echo -e $Branco"permite uma geracao de candidatos"$ColorR
          echo -e $Branco"mais ajustavel do que usar"$ColorR
          echo -e $Branco"a enumeracao de palavras"$ColorR
          echo -e $Branco"por forva bruta “ingenua”."$ColorR
          echo -e $Branco"As mascaras sao definidas usando"$ColorR
          echo -e $Branco"a descricao tambem usada"$ColorR
          echo -e $Branco"no utilitario de recuperacao"$ColorR
          echo -e $Branco"de senha Hashcat."$ColorR
          echo -e $Branco"$ mp32."$ColorR
          echo -e $Branco"$ mp64."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/hashcat/maskprocessor"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/maskprocessor/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "15" ]; then
          echo -e $Color"Instalando Programa Multiforcer."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install multiforcer
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "15help" ]; then
          echo -e $BrancoBAD"Sobre Multiforcer:"$ColorR
          echo -e $Branco"Uma implementacao de tabela de"$ColorR
          echo -e $Branco"arco-iris acelerada por CUDA e OpenCL"$ColorR
          echo -e $Branco"desde o inicio e uma ferramenta"$ColorR
          echo -e $Branco"de forca bruta de hash CUDA"$ColorR
          echo -e $Branco"com suporte para muitos tipos"$ColorR
          echo -e $Branco"de hash, incluindo MD5, SHA1,"$ColorR
          echo -e $Branco"LM, NTLM e muito mais."$ColorR
          echo -e $Branco"$ multiforcer."$ColorR
          echo -e $Branco"$ showconfig-opencl."$ColorR
          echo -e $BrancoBAD"Multiforcer Homepage: https://sourceforge.net/projects/cryptohaze/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/multiforcer/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "16" ]; then
          echo -e $Color"Instalando Programa Ncrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ncrack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "16help" ]; then
          echo -e $BrancoBAD"Sobre Ncrack:"$ColorR
          echo -e $Branco"Ncrack e uma ferramenta de cracking"$ColorR
          echo -e $Branco"de autenticacao de rede de alta velocidade."$ColorR
          echo -e $Branco"Ele foi desenvolvido para ajudar as empresas"$ColorR
          echo -e $Branco"a proteger suas redes testando proativamente todos"$ColorR
          echo -e $Branco"os seus hosts e dispositivos de rede"$ColorR
          echo -e $Branco"em busca de senhas ruins."$ColorR
          echo -e $Branco"Os profissionais de seguranca"$ColorR
          echo -e $Branco"tambem confiam no Ncrack ao auditar seus clientes."$ColorR
          echo -e $Branco"O Ncrack foi projetado usando uma abordagem"$ColorR
          echo -e $Branco"modular, uma sintaxe de linha de comando"$ColorR
          echo -e $Branco"semelhante ao Nmap e um mecanismo dinamico"$ColorR
          echo -e $Branco"que pode adaptar seu comportamento com base"$ColorR
          echo -e $Branco"no feedback da rede."$ColorR
          echo -e $Branco"Ele permite uma auditoria em larga"$ColorR
          echo -e $Branco"escala rapida e confiavel de varios hosts."$ColorR
          echo -e $Branco"Os recursos do Ncrack incluem uma interface"$ColorR
          echo -e $Branco"muito flexivel que garante ao usuario controle"$ColorR
          echo -e $Branco"total das operacoes de rede, permitindo ataques"$ColorR
          echo -e $Branco"de forca bruta muito sofisticados, modelos de tempo"$ColorR
          echo -e $Branco"para facilidade de uso, interacao em tempo"$ColorR
          echo -e $Branco"de execucao semelhante ao Nmap e muito mais."$ColorR
          echo -e $Branco"Os protocolos suportados incluem RDP, SSH,"$ColorR
          echo -e $Branco"http(s), SMB, pop3(s), VNC, FTP e telnet."$ColorR
          echo -e $Branco"Certifique-se de ler a pagina de manual do Ncrack"$ColorR
          echo -e $Branco"(https://nmap.org/ncrack/man.html)"$ColorR
          echo -e $Branco"para entender completamente o uso do Ncrack."$ColorR
          echo -e $Branco"$ ncrack."$ColorR
          echo -e $BrancoBAD"Ncrack Homepage: https://nmap.org/ncrack/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ncrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "17" ]; then
          echo -e $Color"Instalando Programa Oclgausscrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install oclgausscrack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "17help" ]; then
          echo -e $BrancoBAD"Sobre Oclgausscrack:"$ColorR
          echo -e $Branco"O objetivo do programa e"$ColorR
          echo -e $Branco"quebrar o hash de verificacao"$ColorR
          echo -e $Branco"da carga criptografada"$ColorR
          echo -e $Branco"do virus Gauss."$ColorR
          echo -e $Branco"$ gausscombinator."$ColorR
          echo -e $Branco"$ gaussfilter."$ColorR
          echo -e $Branco"$ oclgausscrack."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/jsteube/oclGaussCrack"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/oclgausscrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "18" ]; then
          echo -e $Color"Instalando Programa PACK."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install pack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "18help" ]; then
          echo -e $BrancoBAD"Sobre PACK:"$ColorR
          echo -e $Branco"O PACK foi desenvolvido"$ColorR
          echo -e $Branco"para auxiliar"$ColorR
          echo -e $Branco"em uma competicao"$ColorR
          echo -e $Branco"de cracking de senhas"$ColorR
          echo -e $Branco"“Crack Me If You Can” que"$ColorR
          echo -e $Branco"ocorreu durante a Defcon 2010."$ColorR
          echo -e $Branco"O objetivo deste kit"$ColorR
          echo -e $Branco"de ferramentas"$ColorR
          echo -e $Branco"e auxiliar na preparacao"$ColorR
          echo -e $Branco"para os ataques de senha"$ColorR
          echo -e $Branco"“melhor do que forca bruta”"$ColorR
          echo -e $Branco"analisando maneiras comuns"$ColorR
          echo -e $Branco"que as pessoas criar senhas."$ColorR
          echo -e $Branco"Apos a etapa de analise, o"$ColorR
          echo -e $Branco"banco de dados estatisticos"$ColorR
          echo -e $Branco"pode ser usado para gerar"$ColorR
          echo -e $Branco"mascaras de ataque"$ColorR
          echo -e $Branco"para ferramentas"$ColorR
          echo -e $Branco"como oclHashcat."$ColorR
          echo -e $Branco"NOTA: Esta ferramenta em si"$ColorR
          echo -e $Branco"nao pode decifrar senhas,"$ColorR
          echo -e $Branco"mas ajuda outras ferramentas"$ColorR
          echo -e $Branco"a decifrar mais senhas"$ColorR
          echo -e $Branco"mais rapidamente."$ColorR
          echo -e $Branco"$ dictstat."$ColorR
          echo -e $Branco"$ policygen."$ColorR
          echo -e $Branco"$ unpack200."$ColorR
          echo -e $Branco"$ maskgen."$ColorR
          echo -e $Branco"$ rulegen."$ColorR
          echo -e $Branco"$ pack200."$ColorR
          echo -e $Branco"$ statsgen."$ColorR
          echo -e $BrancoBAD"PACK Homepage: https://medium.com/@iphelix"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/pack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "19" ]; then
          echo -e $Color"Instalando Programa Patator."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install patator
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "19help" ]; then
          echo -e $BrancoBAD"Sobre Patator:"$ColorR
          echo -e $Branco"Patator e um brute-forcer"$ColorR
          echo -e $Branco"multifuncional, com design"$ColorR
          echo -e $Branco"modular e uso flexivel."$ColorR
          echo -e $BrancoBAD"Atualmente suporta"$ColorR
          echo -e $BrancoBAD"os seguintes modulos:"$ColorR
          echo -e $Branco"* ftp_login: FTP de forca bruta."$ColorR
          echo -e $Branco"* ssh_login: SSH de forca bruta."$ColorR
          echo -e $Branco"* telnet_login: Telnet de forca bruta."$ColorR
          echo -e $Branco"* smtp_login: SMTP de forca bruta."$ColorR
          echo -e $Branco"* smtp_vrfy: enumera usuarios"$ColorR
          echo -e $Branco"validos usando SMTP VRFY."$ColorR
          echo -e $Branco"* smtp_rcpt: Enumera usuarios"$ColorR
          echo -e $Branco"validos usando SMTP RCPT TO."$ColorR
          echo -e $Branco"finger_lookup: Enumerar usuarios"$ColorR
          echo -e $Branco"validos usando o Finger."$ColorR
          echo -e $Branco"* http_fuzz: HTTP de forca bruta."$ColorR
          echo -e $Branco"* ajp_fuzz: forca bruta AJP."$ColorR
          echo -e $Branco"* pop_login: forca bruta POP3."$ColorR
          echo -e $Branco"* pop_passd: forca bruta poppass"$ColorR
          echo -e $Branco"(http://netwinsite.com/poppassd/)."$ColorR
          echo -e $Branco"* imap_login: forca bruta IMAP4."$ColorR
          echo -e $Branco"* ldap_login: LDAP de forca bruta."$ColorR
          echo -e $Branco"* dcom_login: DCOM de forca bruta."$ColorR
          echo -e $Branco"* smb_login: SMB de forca bruta."$ColorR
          echo -e $Branco"* smb_lookupsid: pesquisa SID SMB"$ColorR
          echo -e $Branco"de forca bruta."$ColorR
          echo -e $Branco"* rlogin_login: rlogin de forca bruta."$ColorR
          echo -e $Branco"* vmauthd_login: Daemon"$ColorR
          echo -e $Branco"de autenticacao VMware de forca bruta."$ColorR
          echo -e $Branco"* mssql_login: forca bruta MSSQL."$ColorR
          echo -e $Branco"* mysql_login: MySQL de forca bruta."$ColorR
          echo -e $Branco"* mysql_query: consultas MySQL"$ColorR
          echo -e $Branco"de forca bruta."$ColorR
          echo -e $Branco"* rdp_login: RDP de forca bruta (NLA)."$ColorR
          echo -e $Branco"* pgsql_login: PostgreSQL"$ColorR
          echo -e $Branco"de forca bruta."$ColorR
          echo -e $Branco"* vnc_login: VNC de forca bruta."$ColorR
          echo -e $Branco"* dns_forward: pesquisa DNS direta."$ColorR
          echo -e $Branco"* dns_reverse: pesquisa DNS reversa."$ColorR
          echo -e $Branco"* snmp_login: forca bruta SNMP v1/2/3."$ColorR
          echo -e $Branco"* ike_enum: Enumerar transformacoes IKE."$ColorR
          echo -e $Branco"* unzip_pass: forca bruta a senha"$ColorR
          echo -e $Branco"de arquivos ZIP criptografados."$ColorR
          echo -e $Branco"* keystore_pass: forca bruta a"$ColorR
          echo -e $Branco"senha dos arquivos de keystore Java."$ColorR
          echo -e $Branco"* umbraco_crack: Decifrar hashes"$ColorR
          echo -e $Branco"de senha Umbraco HMAC-SHA1."$ColorR
          echo -e $Branco"* tcp_fuzz: servicos TCP Fuzz."$ColorR
          echo -e $Branco"* dummy_test: modulo de teste."$ColorR
          echo -e $Branco"$ patator."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/lanjelot/patator"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/patator/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "20" ]; then
          echo -e $Color"Instalando Programa Polenum."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install polenum
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "20help" ]; then
          echo -e $BrancoBAD"Sobre Polenum:"$ColorR
          echo -e $Branco"polenum e um script Python que usa a Biblioteca"$ColorR
          echo -e $Branco"Impacket da CORE Security Technologies"$ColorR
          echo -e $Branco"para extrair as informacoes de politica"$ColorR
          echo -e $Branco"de senha de uma maquina Windows."$ColorR
          echo -e $Branco"Isso permite que um usuario nao Windows"$ColorR
          echo -e $Branco"(Linux, Mac OSX, BSD etc.)"$ColorR
          echo -e $Branco"consulte a politica de senha de uma caixa Windows"$ColorR
          echo -e $Branco"remota sem a necessidade de ter acesso a uma maquina Windows."$ColorR
          echo -e $Branco"$ polenum."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/Wh1t3Fox/polenum/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/polenum/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "21" ]; then
          echo -e $Color"Instalando Programa RainbowCrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rainbowcrack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "21help" ]; then
          echo -e $BrancoBAD"Sobre RainbowCrack:"$ColorR
          echo -e $Branco"RainbowCrack e uma implementacao"$ColorR
          echo -e $Branco"de proposta geral da tecnica"$ColorR
          echo -e $Branco"de troca de memoria de tempo mais"$ColorR
          echo -e $Branco"rapida de Philippe Oechslin."$ColorR
          echo -e $Branco"Ele quebra hashes com tabelas"$ColorR
          echo -e $Branco"de arco-iris."$ColorR
          echo -e $Branco"RainbowCrack usa algoritmo"$ColorR
          echo -e $Branco"de troca de memoria de tempo"$ColorR
          echo -e $Branco"para quebrar hashes."$ColorR
          echo -e $Branco"Ele difere dos crackers de hash"$ColorR
          echo -e $Branco"que usam algoritmo de forca bruta."$ColorR
          echo -e $Branco"$ rcrack."$ColorR
          echo -e $Branco"$ rtgen."$ColorR
          echo -e $Branco"$ rt2rtc."$ColorR
          echo -e $Branco"$ rtmerge."$ColorR
          echo -e $Branco"$ rtc2rt."$ColorR
          echo -e $Branco"$ rtsort."$ColorR
          echo -e $BrancoBAD"RainbowCrack Homepage: http://project-rainbowcrack.com/index.htm"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rainbowcrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "22" ]; then
          echo -e $Color"Instalando Programa Rcracki-Mt."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rcracki-mt
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "22help" ]; then
          echo -e $BrancoBAD"Sobre Rcracki-Mt:"$ColorR
          echo -e $Branco"rcrack_mt e nossa versao"$ColorR
          echo -e $Branco"modificada do rcrack que suporta"$ColorR
          echo -e $Branco"tabelas hibridas e indexadas."$ColorR
          echo -e $Branco"Alem disso, tambem adiciona"$ColorR
          echo -e $Branco"suporte multi-core."$ColorR
          echo -e $Branco"$ rcracki_mt."$ColorR
          echo -e $BrancoBAD"Rcracki-Mt Homepage: https://freerainbowtables.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rcracki-mt/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "23" ]; then
          echo -e $Color"Instalando Programa RSMangler."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rsmangler
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "23help" ]; then
          echo -e $BrancoBAD"Sobre RSMangler:"$ColorR
          echo -e $Branco"O RSMangler pegara uma lista"$ColorR
          echo -e $Branco"de palavras e realizara varias"$ColorR
          echo -e $Branco"manipulacoes nela semelhantes"$ColorR
          echo -e $Branco"as feitas por John, o Estripador,"$ColorR
          echo -e $Branco"a principal diferenca e"$ColorR
          echo -e $Branco"que primeiro pegara as palavras"$ColorR
          echo -e $Branco"de entrada e gerara todas"$ColorR
          echo -e $Branco"as permutacoes e o acronimo"$ColorR
          echo -e $Branco"das palavras (na ordem em que"$ColorR
          echo -e $Branco"aparecem no arquivo)"$ColorR
          echo -e $Branco"antes de aplicar"$ColorR
          echo -e $Branco"o resto dos mangles."$ColorR
          echo -e $Branco"$ rsmangler."$ColorR
          echo -e $BrancoBAD"RSMangler Homepage: https://digi.ninja/projects/rsmangler.php"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rsmangler/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "24" ]; then
          echo -e $Color"Instalando Programa SQLdict."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sqldict
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "24help" ]; then
          echo -e $BrancoBAD"Sobre SQLdict:"$ColorR
          echo -e $Branco"SQLdict e uma ferramenta"$ColorR
          echo -e $Branco"de ataque de dicionario"$ColorR
          echo -e $Branco"para SQL Server."$ColorR
          echo -e $Branco"$ sqldict."$ColorR
          echo -e $BrancoBAD"SQLdict Homepage: http://ntsecurity.nu/toolbox/sqldict/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sqldict/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "25" ]; then
          echo -e $Color"Instalando Programa Statsprocessor."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install statsprocessor
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "25help" ]; then
          echo -e $BrancoBAD"Sobre Statsprocessor:"$ColorR
          echo -e $Branco"Statsprocessor e um gerador"$ColorR
          echo -e $Branco"de palavras baseado em cadeias"$ColorR
          echo -e $Branco"de Markov por posicao empacotadas"$ColorR
          echo -e $Branco"em um unico binario autonomo."$ColorR
          echo -e $Branco"Ele gera palavras candidatas"$ColorR
          echo -e $Branco"com base em um arquivo .hcstat"$ColorR
          echo -e $Branco"no formato Hashcat usando"$ColorR
          echo -e $Branco"essas informacoes para determinar"$ColorR
          echo -e $Branco"qual letra esta seguindo qual"$ColorR
          echo -e $Branco"letra com base na analise"$ColorR
          echo -e $Branco"do dicionario de entrada original"$ColorR
          echo -e $Branco"usado para gerar o .hcstat."$ColorR
          echo -e $Branco"As palavras resultantes podem,"$ColorR
          echo -e $Branco"por exemplo, ser pos-processadas"$ColorR
          echo -e $Branco"e inseridas no Hashcat ou"$ColorR
          echo -e $Branco"em outras ferramentas"$ColorR
          echo -e $Branco"de recuperacao de senha."$ColorR
          echo -e $Branco"$ sp32."$ColorR
          echo -e $Branco"$ sp64."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/hashcat/statsprocessor"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/statsprocessor/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "26" ]; then
          echo -e $Color"Instalando Programa Thc-Pptp-Bruter."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install thc-pptp-bruter
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "26help" ]; then
          echo -e $BrancoBAD"Sobre Thc-Pptp-Bruter:"$ColorR
          echo -e $Branco"Programa de forca bruta"$ColorR
          echo -e $Branco"contra endpoints pptp"$ColorR
          echo -e $Branco"vpn (porta tcp 1723)."$ColorR
          echo -e $Branco"Totalmente autonomo."$ColorR
          echo -e $Branco"Suporta a autenticacao MSChapV2"$ColorR
          echo -e $Branco"mais recente."$ColorR
          echo -e $Branco"Testado contra gateways"$ColorR
          echo -e $Branco"Windows e Cisco."$ColorR
          echo -e $Branco"Explora uma fraqueza"$ColorR
          echo -e $Branco"na implementacao anti-brute"$ColorR
          echo -e $Branco"force da Microsoft, que"$ColorR
          echo -e $Branco"possibilita tentar 300"$ColorR
          echo -e $Branco"senhas por segundo."$ColorR
          echo -e $Branco"$ thc-pptp-bruter."$ColorR
          echo -e $BrancoBAD"Thc-Pptp-Bruter Homepage: http://www.thc.org/releases.php"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/thc-pptp-bruter/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "27" ]; then
          echo -e $Color"Instalando Programa TrueCrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install truecrack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "27help" ]; then
          echo -e $BrancoBAD"Sobre TrueCrack:"$ColorR
          echo -e $Branco"TrueCrack e um cracker de senha"$ColorR
          echo -e $Branco"bruteforce para volume TrueCrypt (Copyright)."$ColorR
          echo -e $Branco"E otimizado com a tecnologia Nvidia Cuda."$ColorR
          echo -e $Branco"Funciona com PBKDF2 (definido em PKCS5 v2.0)"$ColorR
          echo -e $Branco"baseado na funcao de derivacao"$ColorR
          echo -e $Branco"de chave RIPEMD160 e modo"$ColorR
          echo -e $Branco"de operacao de cifra de bloco XTS"$ColorR
          echo -e $Branco"usado para criptografia"$ColorR
          echo -e $Branco"de disco rigido baseada em AES."$ColorR
          echo -e $Branco"$ truecrack."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/lvaccaro/truecrack"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/truecrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "28" ]; then
          echo -e $Color"Instalando Programa WebScarab."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install webscarab
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "28help" ]; then
          echo -e $BrancoBAD"Sobre Webscarab:"$ColorR
          echo -e $Branco"O WebScarab foi projetado para ser uma"$ColorR
          echo -e $Branco"ferramenta para qualquer pessoa que"$ColorR
          echo -e $Branco"precise expor o funcionamento de um aplicativo"$ColorR
          echo -e $Branco"baseado em HTTP(S), seja para permitir"$ColorR
          echo -e $Branco"que o desenvolvedor depure problemas dificeis"$ColorR
          echo -e $Branco"ou para permitir que um especialista"$ColorR
          echo -e $Branco"em seguranca identifique vulnerabilidades"$ColorR
          echo -e $Branco"na maneira como o aplicativo"$ColorR
          echo -e $Branco"foi projetado ou implementado."$ColorR
          echo -e $Branco"$ webscarab."$ColorR
          echo -e $BrancoBAD"Webscarab Homepage: http://dawes.za.net/rogan/webscarab/#current"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/webscarab/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "29" ]; then
          echo -e $Color"Instalando Programa Wordlists."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install wordlists
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "29help" ]; then
          echo -e $BrancoBAD"Sobre Wordlists:"$ColorR
          echo -e $Branco"Este pacote contem a lista"$ColorR
          echo -e $Branco"de palavras rockyou.txt e tem"$ColorR
          echo -e $Branco"um tamanho de"$ColorR
          echo -e $Branco"instalacao de 134 MB."$ColorR
          echo -e $Branco"$ wordlists."$ColorR
          echo -e $BrancoBAD"Wordlists Homepage: https://www.kali.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/wordlists/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "30" ]; then
          echo -e $Color"Instalando Programa Zaproxy."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install zaproxy
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "30help" ]; then
          echo -e $BrancoBAD"Sobre Zaproxy:"$ColorR
          echo -e $Branco"O OWASP Zed Attack Proxy (ZAP) e uma ferramenta"$ColorR
          echo -e $Branco"de teste de penetracao integrada facil"$ColorR
          echo -e $Branco"de usar para encontrar vulnerabilidades"$ColorR
          echo -e $Branco"em aplicativos da web."$ColorR
          echo -e $Branco"Ele foi projetado para ser usado por pessoas"$ColorR
          echo -e $Branco"com uma ampla gama de experiencia"$ColorR
          echo -e $Branco"em seguranca e, como tal, e ideal para desenvolvedores"$ColorR
          echo -e $Branco"e testadores funcionais que sao novos em testes"$ColorR
          echo -e $Branco"de penetracao, alem de ser uma adicao"$ColorR
          echo -e $Branco"util a uma caixa de ferramentas de testadores"$ColorR
          echo -e $Branco"de caneta experientes. https://www.owasp.org/index.php/ZAP"$ColorR
          echo -e $Branco"$ owasp-zap."$ColorR
          echo -e $Branco"$ zaproxy."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/zaproxy/zaproxy"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/zaproxy/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "31" ]; then
          echo -e $Color"Instalando Programa Fcrackzip."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install fcrackzip
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "31help" ]; then
          echo -e $BrancoBAD"Sobre Fcrackzip:"$ColorR
          echo -e $Branco"fcrackzip e um cracker de senha rapido"$ColorR
          echo -e $Branco"parcialmente escrito em assembler."$ColorR
          echo -e $Branco"Ele e capaz de quebrar arquivos zip protegidos"$ColorR
          echo -e $Branco"por senha com forca bruta ou ataques"$ColorR
          echo -e $Branco"baseados em dicionario, opcionalmente"$ColorR
          echo -e $Branco"testando com descompactar seus resultados."$ColorR
          echo -e $Branco"Ele tambem pode quebrar imagens com cpmask."$ColorR
          echo -e $Branco"Este pacote e util para pentesters, hackers eticos"$ColorR
          echo -e $Branco"e especialistas forenses."$ColorR
          echo -e $Branco"$ fcrackzip."$ColorR
          echo -e $Branco"$ fcrackzipinfo."$ColorR
          echo -e $BrancoBAD"Fcrackzip Homepage: http://oldhome.schmorp.de/marc/fcrackzip.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/fcrackzip/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "32" ]; then
          echo -e $Color"Instalando Programa FreeRDP-X11."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install freerdp2-dev
          apt-get -y install freerdp2-shadow-x11
          apt-get -y install freerdp2-wayland
          apt-get -y install freerdp2-x11
          apt-get -y install libfreerdp-client2-2
          apt-get -y install libfreerdp-server2-2
          apt-get -y install libfreerdp-shadow-subsystem2-2
          apt-get -y install libfreerdp-shadow2-2
          apt-get -y install libfreerdp2-2
          apt-get -y install libuwac0-0
          apt-get -y install libuwac0-dev
          apt-get -y install libwinpr-tools2-2
          apt-get -y install libwinpr2-2
          apt-get -y install libwinpr2-dev
          apt-get -y install winpr-utils
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "32help" ]; then
          echo -e $BrancoBAD"Sobre FreeRDP-X11:"$ColorR
          echo -e $Branco"FreeRDP e uma implementacao"$ColorR
          echo -e $Branco"livre de cliente/servidor"$ColorR
          echo -e $Branco"do Remote"$ColorR
          echo -e $Branco"Desktop Protocol (RDP)."$ColorR
          echo -e $BrancoBAD"Atualmente, o"$ColorR
          echo -e $BrancoBAD"cliente FreeRDP"$ColorR
          echo -e $BrancoBAD"suporta as seguintes"$ColorR
          echo -e $BrancoBAD"versoes do Windows:"$ColorR
          echo -e $Branco"* Servidor Windows NT."$ColorR
          echo -e $Branco"* Servidor de terminais"$ColorR
          echo -e $Branco"Windows 2000."$ColorR
          echo -e $Branco"* Windows XP."$ColorR
          echo -e $Branco"* Servidor Windows 2003."$ColorR
          echo -e $Branco"* Windows Vista."$ColorR
          echo -e $Branco"* Servidor Windows"$ColorR
          echo -e $Branco"2008/2008r2/2011SBS."$ColorR
          echo -e $Branco"* Windows 7."$ColorR
          echo -e $Branco"* Servidor Windows"$ColorR
          echo -e $Branco"2012/2012r2."$ColorR
          echo -e $Branco"* Windows 8."$ColorR
          echo -e $Branco"* Windows 10."$ColorR
          echo -e $Branco"Este pacote contem o cliente"$ColorR
          echo -e $Branco"baseado em X11."$ColorR
          echo -e $Branco"$ freerdp-shadow-cli."$ColorR
          echo -e $Branco"$ wlfreerdp."$ColorR
          echo -e $Branco"$ xfreerdp."$ColorR
          echo -e $Branco"$ winpr-hash."$ColorR
          echo -e $Branco"$ winpr-makecert."$ColorR
          echo -e $BrancoBAD"FreeRDP-X11 Homepage: https://www.freerdp.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/freerdp2/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "33" ]; then
          echo -e $Color"Instalando Programa Hashcat."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hashcat
          apt-get -y install hashcat-data
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "33help" ]; then
          echo -e $BrancoBAD"Sobre Hashcat:"$ColorR
          echo -e $Branco"Hashcat suporta cinco modos exclusivos de ataque"$ColorR
          echo -e $Branco"para mais de 300 algoritmos de hash altamente otimizados."$ColorR
          echo -e $Branco"hashcat atualmente suporta CPUs, GPUs e outros aceleradores"$ColorR
          echo -e $Branco"de hardware no Linux e tem recursos"$ColorR
          echo -e $Branco"para ajudar a habilitar a quebra de senha distribuida."$ColorR
          echo -e $Branco"Exemplos de algoritmos de hash"$ColorR
          echo -e $Branco"suportados por hashcat sao:"$ColorR
          echo -e $Branco"MD5, HMAC-MD5, SHA1, HMAC-SHA1,"$ColorR
          echo -e $Branco"MySQL323, MySQL4.1/MySQL5,"$ColorR
          echo -e $Branco"phpass, MD5(Wordpress), MD5(phpBB3),"$ColorR
          echo -e $Branco"MD5(Joomla), md5crypt, MD5(Unix),"$ColorR
          echo -e $Branco"FreeBSD MD5, Cisco-IOS, MD4, NTLM,"$ColorR
          echo -e $Branco"Domain Cached Credentials (DCC),"$ColorR
          echo -e $Branco"MS Cache, SHA256, HMAC-SHA256,"$ColorR
          echo -e $Branco"md5apr1, MD5(APR), Apache MD5,"$ColorR
          echo -e $Branco"SHA512, HMAC-SHA512, Cisco-PIX,"$ColorR
          echo -e $Branco"Cisco  -ASA, WPA/WPA2, Double MD5,"$ColorR
          echo -e $Branco"bcrypt, Blowfish (OpenBSD), MD5"$ColorR
          echo -e $Branco"(Sun), Double SHA1, SHA-3 (Keccak),"$ColorR
          echo -e $Branco"Half MD5, Password Safe SHA-256,"$ColorR
          echo -e $Branco"IKE-PSK MD5, IKE-PSK SHA1,"$ColorR
          echo -e $Branco"NetNTLMv1-VANILLA/NetNTLMv1-ESS,"$ColorR
          echo -e $Branco"NetNTLMv2, Cisco-IOS SHA256,"$ColorR
          echo -e $Branco"Android PIN, AIX {smd5}, AIX {ssha256},"$ColorR
          echo -e $Branco"AIX {ssha512}, AIX {ssha1},"$ColorR
          echo -e $Branco"GOST, GOST R 34, Fortigate (FortiOS),"$ColorR
          echo -e $Branco"OS X v10.8+, GRUB 2,"$ColorR
          echo -e $Branco"IPMI2, RAKP, HMAC-SHA1, sha256crypt,"$ColorR
          echo -e $Branco"SHA256(Unix), Drupal7, WBB3,"$ColorR
          echo -e $Branco'scrypt, Cisco $8$, Cisco $9$,'$ColorR
          echo -e $Branco" Radmin2, Django (PBKDF2-SHA256),"$ColorR
          echo -e $Branco"Cram MD5, SAP, iSSHA-1, PrestaShop,"$ColorR
          echo -e $Branco"PostgreSQL, Autenticacao"$ColorR
          echo -e $Branco"Challenge-Response (MD5),"$ColorR
          echo -e $Branco"MySQL Challenge-Response, Autenticacao (SHA1),"$ColorR
          echo -e $Branco"autenticacao SIP Digest (MD5), Plaintex t,"$ColorR
          echo -e $Branco"Joomla < 2.5.18, PostgreSQL,"$ColorR
          echo -e $Branco"osCommerce, xt:Commerce, Skype, nsldap,"$ColorR
          echo -e $Branco"Netscape, LDAP, nsldaps,"$ColorR
          echo -e $Branco"SSHA-1(Base64), Oracle S: Type (Oracle 11+),"$ColorR
          echo -e $Branco"SMF > v1.1, OS  X v10.4,"$ColorR
          echo -e $Branco"v10.5, v10.6, EPi, Django (SHA-1),"$ColorR
          echo -e $Branco"MSSQL(2000), MSSQL(2005), PeopleSoft,"$ColorR
          echo -e $Branco"EPiServer 6.x < v4, hMailServer,"$ColorR
          echo -e $Branco"SSHA-512(Base64),  LDAP {SSHA512},"$ColorR
          echo -e $Branco"OS X v10.7, MSSQL (2012 e 2014),"$ColorR
          echo -e $Branco"vBulletin < v3.8.5, PHPS,"$ColorR
          echo -e $Branco"vBulletin > v3.8.5, IPB2+, MyBB1.2+,"$ColorR
          echo -e $Branco"Mediawiki B type, WebEdition CMS, Redmine."$ColorR
          echo -e $Branco"Hashcat oferece varios modos de ataque"$ColorR
          echo -e $Branco"para obter cobertura eficaz e complexa"$ColorR
          echo -e $Branco"sobre o keyspace de um hash."$ColorR
          echo -e $Branco"Esses modos sao:"$ColorR
          echo -e $Branco"* Ataque de forca bruta."$ColorR
          echo -e $Branco"* Ataque combinador."$ColorR
          echo -e $Branco"* Ataque de dicionario."$ColorR
          echo -e $Branco"* Ataque de impressao digital."$ColorR
          echo -e $Branco"* Ataque hibrido."$ColorR
          echo -e $Branco"* Ataque de mascara."$ColorR
          echo -e $Branco"* Ataque de permutacao."$ColorR
          echo -e $Branco"* Ataque baseado em regras."$ColorR
          echo -e $Branco"* Ataque de pesquisa de tabela."$ColorR
          echo -e $Branco"* Ataque de caixa de alternancia."$ColorR
          echo -e $Branco"* Ataque PRINCIPE."$ColorR
          echo -e $Branco"$ hashcat."$ColorR
          echo -e $BrancoBAD"Hashcat Homepage: https://hashcat.net/hashcat/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hashcat/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "34" ]; then
          echo -e $Color"Instalando Programa Hashcat-Utils."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hashcat-utils
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "34help" ]; then
          echo -e $BrancoBAD"Sobre Hashcat-Utils:"$ColorR
          echo -e $Branco"Hashcat-utils e um conjunto"$ColorR
          echo -e $Branco"de pequenos utilitarios que"$ColorR
          echo -e $Branco"sao uteis na quebra"$ColorR
          echo -e $Branco"avancada de senhas."$ColorR
          echo -e $Branco"Todos eles sao empacotados"$ColorR
          echo -e $Branco"em varios binarios autonomos."$ColorR
          echo -e $Branco"Todos esses utilitarios"$ColorR
          echo -e $Branco"sao projetados para executar"$ColorR
          echo -e $Branco"apenas uma funcao especifica."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/hashcat/hashcat-utils/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hashcat-utils/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "35" ]; then
          echo -e $Color"Instalando Programa hashID."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hashid
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "35help" ]; then
          echo -e $BrancoBAD"Sobre hashID:"$ColorR
          echo -e $Branco"Identifique os diferentes"$ColorR
          echo -e $Branco"tipos de hashes usados"$ColorR
          echo -e $Branco"para criptografar dados"$ColorR
          echo -e $Branco"e especialmente senhas."$ColorR
          echo -e $Branco"hashID e uma ferramenta escrita"$ColorR
          echo -e $Branco"em Python 3.x que suporta"$ColorR
          echo -e $Branco"a identificacao de mais de 175"$ColorR
          echo -e $Branco"tipos de hash unicos usando"$ColorR
          echo -e $Branco"expressoes regulares."$ColorR
          echo -e $Branco"E capaz de identificar um"$ColorR
          echo -e $Branco"unico hash ou analisar um"$ColorR
          echo -e $Branco"arquivo e identificar os"$ColorR
          echo -e $Branco"hashes dentro dele."$ColorR
          echo -e $Branco"Ha tambem uma versao nodejs"$ColorR
          echo -e $Branco"do hashID disponivel que e"$ColorR
          echo -e $Branco"facilmente configurada"$ColorR
          echo -e $Branco"para fornecer identificacao"$ColorR
          echo -e $Branco"de hash online."$ColorR
          echo -e $Branco"$ hashid."$ColorR
          echo -e $BrancoBAD"hashID Homepage: https://psypanda.github.io/hashID/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hashid/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "36" ]; then
          echo -e $Color"Instalando Programa Medusa."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install medusa
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "36help" ]; then
          echo -e $BrancoBAD"Sobre Medusa:"$ColorR
          echo -e $Branco"Medusa pretende ser um brute-forcer de login"$ColorR
          echo -e $Branco"rapido, massivamente paralelo e modular."$ColorR
          echo -e $Branco"O objetivo e oferecer suporte ao maior"$ColorR
          echo -e $Branco"numero possivel de servicos que permitem"$ColorR
          echo -e $Branco"autenticacao remota."$ColorR
          echo -e $BrancoBAD"O autor considera os seguintes itens"$ColorR
          echo -e $BrancoBAD"como alguns dos principais recursos"$ColorR
          echo -e $BrancoBAD"deste aplicativo:"$ColorR
          echo -e $Branco"* Teste paralelo baseado em thread."$ColorR
          echo -e $Branco"O teste de forca bruta pode ser executado"$ColorR
          echo -e $Branco"em varios hosts, usuarios ou senhas simultaneamente."$ColorR
          echo -e $Branco"* Entrada de usuario flexivel."$ColorR
          echo -e $Branco"As informacoes de destino (host/usuario/senha)"$ColorR
          echo -e $Branco"podem ser especificadas de varias maneiras."$ColorR
          echo -e $Branco"Por exemplo, cada item pode ser uma unica"$ColorR
          echo -e $Branco"entrada ou um arquivo contendo varias entradas."$ColorR
          echo -e $Branco"Alem disso, um formato de arquivo de combinacao"$ColorR
          echo -e $Branco"permite ao usuario refinar sua lista de destino."$ColorR
          echo -e $Branco"* Design modular."$ColorR
          echo -e $Branco"Cada modulo de servico existe como"$ColorR
          echo -e $Branco"um arquivo .mod independente."$ColorR
          echo -e $Branco"Isso significa que nenhuma modificacao e necessaria"$ColorR
          echo -e $Branco"no aplicativo principal para estender a lista"$ColorR
          echo -e $Branco"de servicos com suporte para forca bruta."$ColorR
          echo -e $Branco"$ medusa."$ColorR
          echo -e $BrancoBAD"Medusa Homepage: http://foofus.net/?page_id=51"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/medusa/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "37" ]; then
          echo -e $Color"Instalando Programa Mimikatz."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install mimikatz
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "37help" ]; then
          echo -e $BrancoBAD"Sobre Mimikatz:"$ColorR
          echo -e $Branco"Mimikatz usa direitos de"$ColorR
          echo -e $Branco"administrador no Windows"$ColorR
          echo -e $Branco"para exibir as senhas"$ColorR
          echo -e $Branco"de usuarios conectados no"$ColorR
          echo -e $Branco"momento em texto simples."$ColorR
          echo -e $Branco"$ mimikatz."$ColorR
          echo -e $BrancoBAD"Mimikatz Homepage: https://blog.gentilkiwi.com/mimikatz"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/mimikatz/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "38" ]; then
          echo -e $Color"Instalando Programa Onesixtyone."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install onesixtyone
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "38help" ]; then
          echo -e $BrancoBAD"Sobre Onesixtyone:"$ColorR
          echo -e $Branco"O onesixtyone e um scanner SNMP simples"$ColorR
          echo -e $Branco"que envia solicitacoes SNMP"$ColorR
          echo -e $Branco"para o valor sysDescr de forma assincrona"$ColorR
          echo -e $Branco"com tempos de envio ajustaveis pelo usuario e,"$ColorR
          echo -e $Branco"em seguida, registra as respostas que fornecem"$ColorR
          echo -e $Branco"a descricao do software em execucao no dispositivo."$ColorR
          echo -e $Branco"A execucao do onesixtyone em uma rede classe B"$ColorR
          echo -e $Branco"(comutada de 100 Mbs com backbone de 1 Gbs)"$ColorR
          echo -e $Branco"com -w 10 oferece um desempenho de 3 segundos"$ColorR
          echo -e $Branco"por classe C, sem pacotes descartados,"$ColorR
          echo -e $Branco"e todos os 65.536 enderecos IP foram verificados"$ColorR
          echo -e $Branco"em menos de 13 minutos."$ColorR
          echo -e $Branco"$ onesixtyone."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/trailofbits/onesixtyone"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/onesixtyone/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "39" ]; then
          echo -e $Color"Instalando Programa Ophcrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ophcrack
          apt-get -y install ophcrack-cli
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "39help" ]; then
          echo -e $BrancoBAD"Sobre Ophcrack:"$ColorR
          echo -e $Branco"Ophcrack e um cracker de senha"$ColorR
          echo -e $Branco"do Windows baseado em uma"$ColorR
          echo -e $Branco"troca de memoria de tempo"$ColorR
          echo -e $Branco"usando tabelas de arco-iris."$ColorR
          echo -e $Branco"Esta e uma nova variante"$ColorR
          echo -e $Branco"do trade-off original"$ColorR
          echo -e $Branco"de Hellman, com"$ColorR
          echo -e $Branco"melhor desempenho."$ColorR
          echo -e $Branco"Recupera 99,9% das senhas"$ColorR
          echo -e $Branco"alfanumericas em segundos."$ColorR
          echo -e $Branco"Funciona para Windows"$ColorR
          echo -e $Branco"NT/2000/XP/Vista/7."$ColorR
          echo -e $Branco"Este pacote contem ophcrack"$ColorR
          echo -e $Branco"com interface grafica"$ColorR
          echo -e $Branco"baseada em QT4."$ColorR
          echo -e $Branco"Observe que tambem pode ser"$ColorR
          echo -e $Branco"usado na linha de comando."$ColorR
          echo -e $Branco"$ ophcrack."$ColorR
          echo -e $Branco"$ ophcrack-cli."$ColorR
          echo -e $BrancoBAD"Ophcrack Homepage: http://ophcrack.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ophcrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "40" ]; then
          echo -e $Color"Instalando Programa Passing-The-Hash."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install passing-the-hash
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "40help" ]; then
          echo -e $BrancoBAD"Sobre Passing-The-Hash:"$ColorR
          echo -e $Branco"Este pacote contem versoes"$ColorR
          echo -e $Branco"modificadas do Curl,"$ColorR
          echo -e $Branco"Iceweasel, FreeTDS,"$ColorR
          echo -e $Branco"Samba 4, WinEXE e WMI."$ColorR
          echo -e $Branco"Eles sao instalados como"$ColorR
          echo -e $Branco"executaveis comecando"$ColorR
          echo -e $Branco"com a string “pth-”."$ColorR
          echo -e $Branco"$ pth-curl."$ColorR
          echo -e $Branco"$ pth-smbclient."$ColorR
          echo -e $Branco"$ pth-winexe."$ColorR
          echo -e $Branco"$ pth-net."$ColorR
          echo -e $Branco"$ pth-smbget."$ColorR
          echo -e $Branco"$ pth-wmic."$ColorR
          echo -e $Branco"$ pth-rpcclient."$ColorR
          echo -e $Branco"$ pth-sqsh."$ColorR
          echo -e $Branco"$ pth-wmis."$ColorR
          echo -e $BrancoBAD"Passing-The-Hash Homepage: http://passing-the-hash.blogspot.fr/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/passing-the-hash/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "41" ]; then
          echo -e $Color"Instalando Programa PDFCrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install pdfcrack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "41help" ]; then
          echo -e $BrancoBAD"Sobre PDFCrack:"$ColorR
          echo -e $Branco"PDFCrack e uma ferramenta"$ColorR
          echo -e $Branco"simples para recuperar"$ColorR
          echo -e $Branco"senhas de documentos pdf."$ColorR
          echo -e $Branco"Ele deve ser capaz de lidar"$ColorR
          echo -e $Branco"com todos os pdfs que usam"$ColorR
          echo -e $Branco"o manipulador de seguranca"$ColorR
          echo -e $Branco"padrao, mas as rotinas de"$ColorR
          echo -e $Branco"analise de pdf sao um pouco"$ColorR
          echo -e $Branco"rapidas, entao voce pode"$ColorR
          echo -e $Branco"tropecar em alguns pdfs"$ColorR
          echo -e $Branco"em que o analisador precisa"$ColorR
          echo -e $Branco"ser corrigido para lidar."$ColorR
          echo -e $BrancoBAD"As principais funcionalidades"$ColorR
          echo -e $BrancoBAD"do PDFCrack sao:"$ColorR
          echo -e $Branco"* Suporta o manipulador de"$ColorR
          echo -e $Branco"seguranca padrao"$ColorR
          echo -e $Branco"(revisao 2, 3 e 4) em todas"$ColorR
          echo -e $Branco"as versoes de PDF conhecidas."$ColorR
          echo -e $Branco"* Suporta quebra de senhas"$ColorR
          echo -e $Branco"de proprietario e usuario."$ColorR
          echo -e $Branco"* Ambas as listas de palavras"$ColorR
          echo -e $Branco"e forca bruta da senha"$ColorR
          echo -e $Branco"sao suportadas."$ColorR
          echo -e $Branco"* Permutacoes simples"$ColorR
          echo -e $Branco"(atualmente apenas tentando"$ColorR
          echo -e $Branco"o primeiro caractere"$ColorR
          echo -e $Branco"como Maiusculas)."$ColorR
          echo -e $Branco"* Salve e carregue um"$ColorR
          echo -e $Branco"trabalho em execucao."$ColorR
          echo -e $Branco"Benchmarking simples."$ColorR
          echo -e $Branco"* Pesquisa otimizada por senha"$ColorR
          echo -e $Branco"do proprietario quando a"$ColorR
          echo -e $Branco"senha do usuario e conhecida."$ColorR
          echo -e $Branco"* Este programa pode ser usado"$ColorR
          echo -e $Branco"em investigacoes forenses ou"$ColorR
          echo -e $Branco"atividades similares,"$ColorR
          echo -e $Branco"para quebra legal de senhas."$ColorR
          echo -e $Branco"$ pdfcrack."$ColorR
          echo -e $BrancoBAD"PDFCrack Homepage: http://pdfcrack.sf.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/pdfcrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "42" ]; then
          echo -e $Color"Instalando Programa Pipal."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install pipal
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "42help" ]; then
          echo -e $BrancoBAD"Sobre Pipal:"$ColorR
          echo -e $Branco"Tudo o que essa ferramenta faz e fornecer as estatisticas"$ColorR
          echo -e $Branco"e as informacoes para ajuda-lo a analisar as senhas."$ColorR
          echo -e $Branco"O trabalho real e feito por voce na interpretacao dos resultados."$ColorR
          echo -e $Branco"$ pipal."$ColorR
          echo -e $BrancoBAD"Pipal Homepage: https://www.digininja.org/projects/pipal.php"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/pipal/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "43" ]; then
          echo -e $Color"Instalando Programa RarCrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rarcrack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "43help" ]; then
          echo -e $BrancoBAD"Sobre RarCrack:"$ColorR
          echo -e $Branco"Este programa usa um algoritmo"$ColorR
          echo -e $Branco"de forca bruta para adivinhar"$ColorR
          echo -e $Branco"a senha do seu arquivo"$ColorR
          echo -e $Branco"compactado criptografado."$ColorR
          echo -e $Branco"Este programa pode quebrar"$ColorR
          echo -e $Branco"senhas de arquivos"$ColorR
          echo -e $Branco"zip, 7z e rar."$ColorR
          echo -e $Branco"$ rarcrack."$ColorR
          echo -e $BrancoBAD"RarCrack Homepage: http://rarcrack.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rarcrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "44" ]; then
          echo -e $Color"Instalando Programa Samdump2."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install samdump2
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "44help" ]; then
          echo -e $BrancoBAD"Sobre Samdump2:"$ColorR
          echo -e $Branco"Essa ferramenta foi projetada"$ColorR
          echo -e $Branco"para despejar hashes de senha"$ColorR
          echo -e $Branco"do Windows 2k/NT/XP"$ColorR
          echo -e $Branco"de um arquivo SAM, usando"$ColorR
          echo -e $Branco"a tecla de inicializacao"$ColorR
          echo -e $Branco"syskey do hive do sistema."$ColorR
          echo -e $Branco"Este pacote tambem fornece a"$ColorR
          echo -e $Branco"funcionalidade do bkhive, que"$ColorR
          echo -e $Branco"recupera a chave de"$ColorR
          echo -e $Branco"inicializacao syskey"$ColorR
          echo -e $Branco"de um hive do sistema"$ColorR
          echo -e $Branco"Windows NT/2K/XP."$ColorR
          echo -e $Branco"Syskey e um recurso do Windows"$ColorR
          echo -e $Branco"que adiciona uma camada de"$ColorR
          echo -e $Branco"criptografia adicional aos"$ColorR
          echo -e $Branco"hashes de senha armazenados"$ColorR
          echo -e $Branco"no banco de dados SAM."$ColorR
          echo -e $Branco"$ samdump2."$ColorR
          echo -e $BrancoBAD"Samdump2 Homepage: http://ophcrack.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/samdump2/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                       "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "45" ]; then
          echo -e $Color"Instalando Programa SecLists."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install seclists
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "45help" ]; then
          echo -e $BrancoBAD"Sobre SecLists:"$ColorR
          echo -e $Branco"SecLists e uma colecao"$ColorR
          echo -e $Branco"de varios tipos de listas"$ColorR
          echo -e $Branco"usadas durante as"$ColorR
          echo -e $Branco"avaliacoes de seguranca."$ColorR
          echo -e $Branco"Os tipos de lista incluem"$ColorR
          echo -e $Branco"nomes de usuario, senhas,"$ColorR
          echo -e $Branco"URLs, strings grep de dados"$ColorR
          echo -e $Branco"confidenciais, cargas uteis"$ColorR
          echo -e $Branco"fuzzing e muito mais."$ColorR
          echo -e $Branco"O objetivo e permitir que"$ColorR
          echo -e $Branco"um testador de seguranca"$ColorR
          echo -e $Branco"puxe esse repositorio"$ColorR
          echo -e $Branco"para uma nova caixa de"$ColorR
          echo -e $Branco"teste e tenha acesso"$ColorR
          echo -e $Branco"a todo tipo de lista que"$ColorR
          echo -e $Branco"possa ser necessaria."$ColorR
          echo -e $Branco"$ seclists."$ColorR
          echo -e $BrancoBAD"SecLists Homepage: https://www.owasp.org/index.php/Projects/OWASP_SecLists_Project"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/seclists/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "46" ]; then
          echo -e $Color"Instalando Programa SIPcrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sipcrack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "46help" ]; then
          echo -e $BrancoBAD"Sobre SIPcrack:"$ColorR
          echo -e $Branco"As ferramentas contidas"$ColorR
          echo -e $Branco"neste pacote oferecem suporte"$ColorR
          echo -e $Branco"para arquivos pcap, listas"$ColorR
          echo -e $Branco"de palavras e muito mais"$ColorR
          echo -e $Branco"para extrair todas as"$ColorR
          echo -e $Branco"informacoes necessarias e"$ColorR
          echo -e $Branco"forcar as senhas"$ColorR
          echo -e $Branco"para as contas rastreadas."$ColorR
          echo -e $Branco"sipdump - Dump autenticacoes"$ColorR
          echo -e $Branco"SIP digest para um arquivo."$ColorR
          echo -e $Branco"sipcrack - Forca a senha"$ColorR
          echo -e $Branco"do usuario usando o arquivo"$ColorR
          echo -e $Branco"dump gerado pelo sipdump."$ColorR
          echo -e $Branco"$ sipcrack."$ColorR
          echo -e $Branco"$ sipdump."$ColorR
          echo -e $BrancoBAD"SIPcrack Homepage: http://www.remote-exploit.org/codes_sipcrack.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sipcrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "47" ]; then
          echo -e $Color"Instalando Programa SIPVicious."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sipvicious
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "47help" ]; then
          echo -e $BrancoBAD"Sobre SIPVicious:"$ColorR
          echo -e $Branco"A suite SIPVicious e um conjunto de ferramentas"$ColorR
          echo -e $Branco"que podem ser usadas para auditar sistemas VoIP baseados"$ColorR
          echo -e $Branco"em SIP."$ColorR
          echo -e $BrancoBAD"Esta suite possui cinco ferramentas:"$ColorR
          echo -e $Branco"svmap, svwar, svcrack, svreport, svcrash."$ColorR
          echo -e $Branco"svmap e um scanner de gole."$ColorR
          echo -e $Branco"Quando iniciado em intervalos de espaco"$ColorR
          echo -e $Branco"de endereco IP, ele identificara quaisquer servidores"$ColorR
          echo -e $Branco"SIP que encontrar no caminho."$ColorR
          echo -e $Branco"svwar identifica linhas de ramal"$ColorR
          echo -e $Branco"em funcionamento em um PBX."$ColorR
          echo -e $Branco"Tambem informa se a linha de ramal"$ColorR
          echo -e $Branco"requer autenticacao ou nao."$ColorR
          echo -e $Branco"svcrack e um cracker de senhas que usa"$ColorR
          echo -e $Branco"autenticacao digest."$ColorR
          echo -e $Branco"E capaz de quebrar senhas em servidores"$ColorR
          echo -e $Branco"de registro e servidores proxy."$ColorR
          echo -e $Branco"svreport e capaz de gerenciar sessoes"$ColorR
          echo -e $Branco"criadas pelo resto das ferramentas"$ColorR
          echo -e $Branco"e exportar para pdf, xml, csv e texto simples."$ColorR
          echo -e $Branco"svcrash responde a mensagens SIP svwar e svcrack"$ColorR
          echo -e $Branco"com uma mensagem que faz"$ColorR
          echo -e $Branco"com que versoes antigas travem."$ColorR
          echo -e $Branco"$ svcrack."$ColorR
          echo -e $Branco"$ svreport."$ColorR
          echo -e $Branco"$ svcrash."$ColorR
          echo -e $Branco"$ svwar."$ColorR
          echo -e $Branco"$ svmap."$ColorR
          echo -e $Branco"$ svmap."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/EnableSecurity/sipvicious"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sipvicious/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "48" ]; then
          echo -e $Color"Instalando Programa SMBMap."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install smbmap
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "48help" ]; then
          echo -e $BrancoBAD"Sobre SMBMap:"$ColorR
          echo -e $Branco"O SMBMap permite que os"$ColorR
          echo -e $Branco"usuarios enumerem unidades"$ColorR
          echo -e $Branco"de compartilhamento de samba"$ColorR
          echo -e $Branco"em um dominio inteiro."$ColorR
          echo -e $Branco"Liste unidades de"$ColorR
          echo -e $Branco"compartilhamento, permissoes"$ColorR
          echo -e $Branco"de unidade, conteudo de"$ColorR
          echo -e $Branco"compartilhamento, funcionalidade"$ColorR
          echo -e $Branco"de upload/download,"$ColorR
          echo -e $Branco"correspondencia de padrao de"$ColorR
          echo -e $Branco"download automatico de nome"$ColorR
          echo -e $Branco"de arquivo e ate mesmo"$ColorR
          echo -e $Branco"execute comandos remotos."$ColorR
          echo -e $Branco"Essa ferramenta foi projetada"$ColorR
          echo -e $Branco"com o teste de caneta em"$ColorR
          echo -e $Branco"mente e destina-se a"$ColorR
          echo -e $Branco"simplificar a pesquisa"$ColorR
          echo -e $Branco"de dados potencialmente"$ColorR
          echo -e $Branco"confidenciais em grandes redes."$ColorR
          echo -e $Branco"$ smbmap."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/ShawnDEvans/smbmap"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/smbmap/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "49" ]; then
          echo -e $Color"Instalando Programa SuCrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sucrack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "49help" ]; then
          echo -e $BrancoBAD"Sobre SuCrack:"$ColorR
          echo -e $Branco"sucrack e uma ferramenta"$ColorR
          echo -e $Branco"Linux/UNIX multithread"$ColorR
          echo -e $Branco"para quebrar contas de"$ColorR
          echo -e $Branco"usuarios locais via"$ColorR
          echo -e $Branco"wordlist bruteforcing su."$ColorR
          echo -e $Branco"Essa ferramenta e util"$ColorR
          echo -e $Branco"quando voce obtem acesso"$ColorR
          echo -e $Branco"a uma conta de usuario"$ColorR
          echo -e $Branco"com poucos privilegios, mas"$ColorR
          echo -e $Branco"tem permissao para su"$ColorR
          echo -e $Branco"para outros usuarios."$ColorR
          echo -e $Branco"Muitas implementacoes su"$ColorR
          echo -e $Branco"requerem que um pseudo"$ColorR
          echo -e $Branco"terminal seja anexado"$ColorR
          echo -e $Branco"para obter a senha do usuario."$ColorR
          echo -e $Branco"Isso nao pode ser facilmente"$ColorR
          echo -e $Branco"alcancado com um simples"$ColorR
          echo -e $Branco"script de shell."$ColorR
          echo -e $Branco"Esta ferramenta, escrita"$ColorR
          echo -e $Branco"em C, e altamente eficiente"$ColorR
          echo -e $Branco"e pode tentar varios"$ColorR
          echo -e $Branco"logins ao mesmo tempo."$ColorR
          echo -e $Branco"$ sucrack."$ColorR
          echo -e $BrancoBAD"SuCrack Homepage: https://labs.portcullis.co.uk/tools/sucrack/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sucrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "50" ]; then
          echo -e $Color"Instalando Programa Twofi."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install twofi
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "50help" ]; then
          echo -e $BrancoBAD"Sobre Twofi:"$ColorR
          echo -e $Branco"Ao tentar quebrar senhas, listas"$ColorR
          echo -e $Branco"de palavras personalizadas sao adicoes muito uteis"$ColorR
          echo -e $Branco"aos dicionarios padrao."$ColorR
          echo -e $Branco"Uma ideia interessante lancada originalmente"$ColorR
          echo -e $Branco"no blog “7 Habits of Highly Effective Hackers”"$ColorR
          echo -e $Branco"foi usar o Twitter para ajudar"$ColorR
          echo -e $Branco"a gerar essas listas com base"$ColorR
          echo -e $Branco"em buscas por palavras-chave relacionadas"$ColorR
          echo -e $Branco"a lista que esta sendo quebrada."$ColorR
          echo -e $Branco"Eu expandi essa ideia em twofi, que"$ColorR
          echo -e $Branco"pegara varios termo de pesquisa"$ColorR
          echo -e $Branco"e retornara uma lista de palavras"$ColorR
          echo -e $Branco"classificadas primeiro pelas mais comuns."$ColorR
          echo -e $Branco"$ twofi."$ColorR
          echo -e $BrancoBAD"Twofi Homepage:"\
                  "https://www.digininja.org/projects/twofi.php"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/twofi/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas11

     elif [ "$K" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$K" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$K" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$K" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$K" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$K" = "P13" ]; then
          Programas13

     elif [ "$K" = "P12" ]; then
          Programas12

     elif [ "$K" = "P11" ]; then
          Programas11

     elif [ "$K" = "P10" ]; then
          Programas10

     elif [ "$K" = "P09" ]; then
          Programas09

     elif [ "$K" = "P08" ]; then
          Programas08

     elif [ "$K" = "P07" ]; then
          Programas07

     elif [ "$K" = "P06" ]; then
          Programas06

     elif [ "$K" = "P05" ]; then
          Programas05

     elif [ "$K" = "P04" ]; then
          Programas04

     elif [ "$K" = "P03" ]; then
          Programas03

     elif [ "$K" = "P02" ]; then
          Programas02

     elif [ "$K" = "P01" ]; then
          Programas01

     elif [ "$K" = "Programas01" ]; then
          Programas01

     elif [ "$K" = "Programas02" ]; then
          Programas02

     elif [ "$K" = "Programas03" ]; then
          Programas03

     elif [ "$K" = "Programas04" ]; then
          Programas04

     elif [ "$K" = "Programas05" ]; then
          Programas05

     elif [ "$K" = "Programas06" ]; then
          Programas06

     elif [ "$K" = "Programas07" ]; then
          Programas07

     elif [ "$K" = "Programas08" ]; then
          Programas08

     elif [ "$K" = "Programas09" ]; then
          Programas09

     elif [ "$K" = "Programas10" ]; then
          Programas10

     elif [ "$K" = "Programas11" ]; then
          Programas11

     elif [ "$K" = "Programas12" ]; then
          Programas12

     elif [ "$K" = "Programas13" ]; then
          Programas13

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Programas11
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Programas11
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Programas11
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Programas11
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Programas11
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Programas11
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas11
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas11
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas11
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas11
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas11
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas11
fi
}
Programas10B(){
echo -e $Color"\n\nTeste de Estresse"$ColorR
echo -e $Color"
01) DHCPig
1help Sobre DHCPig
02) Iaxflood
2help Sobre Iaxflood
03) Inviteflood
3help Sobre Inviteflood
04) Ipv6-Toolkit
4help Sobre Ipv6-Toolkit
05) Mdk3
5help Sobre Mdk3
06) Reaver
6help Sobre Reaver
07) Rtpflood
7help Sobre Rtpflood
08) SlowHTTPTest
8help Sobre SlowHTTPTest
09) T50
9help Sobre T50
10) Termineter
10help Sobre Termineter
11) THC-IPV6
11help Sobre THC-IPV6
12) THC-SSL-DOS
12help Sobre THC-SSL-DOS
"$ColorR

echo -e "\n"
echo -e $Verde"Install all Stress Testing tools"$ColorR
echo -e $Verde"(x) (Instalar Todas as ferramentas.)"$ColorR
echo -e "\n\n"
}
PrompTProgramas10(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" J
}
All_Tools_10(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install dhcpig
apt-get -y install reaver
apt-get -y install rtpflood
apt-get -y install t50
apt-get -y install ipv6-toolkit
apt-get -y install thc-ipv6
apt-get -y install termineter
apt-get -y install iaxflood
apt-get -y install slowhttptest
apt-get -y install inviteflood
apt-get -y install mdk3
}
Programas10(){
Programas10B
PrompTProgramas10
if [ "$J" = "01" ]; then
   J="1"
fi
if [ "$J" = "02" ]; then
   J="2"
fi
if [ "$J" = "03" ]; then
   J="3"
fi
if [ "$J" = "04" ]; then
   J="4"
fi
if [ "$J" = "05" ]; then
   J="5"
fi
if [ "$J" = "06" ]; then
   J="6"
fi
if [ "$J" = "07" ]; then
   J="7"
fi
if [ "$J" = "08" ]; then
   J="8"
fi
if [ "$J" = "09" ]; then
   J="9"
fi
while [ "$J" ];
do
  if [ "$J" ]; then
     if [ "$J" = "1" ]; then
        echo -e $Color"Instalando Programa DHCPig."$Color
        apt-get -y update 1> /dev/null 2> /dev/null
        apt-get -y install dhcpig
        sleep 1
        echo -e $Color"Processo Finalizado."$ColorR
        sleep 1
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        PrompTProgramas10

     elif [ "$J" = "1help" ]; then
          echo -e $BrancoBAD"Sobre DHCPig:"$ColorR
          echo -e $Branco"DHCPig inicia um ataque"$ColorR
          echo -e $Branco"avancado de esgotamento de DHCP."$ColorR
          echo -e $Branco"Ele consumira todos os IPs na LAN, impedira que novos"$ColorR
          echo -e $Branco"usuarios obtenham IPs, liberara todos os IPs"$ColorR
          echo -e $Branco"em uso e, em boa medida, enviara ARP gratuito"$ColorR
          echo -e $Branco"e desconectara todos os hosts do Windows."$ColorR
          echo -e $Branco"Ele e baseado na biblioteca scapy e solicita"$ColorR
          echo -e $Branco"privilegios de administrador para ser executado."$ColorR
          echo -e $Branco"Ele foi testado em varias distribuicoes Linux"$ColorR
          echo -e $Branco"e varios servidores DHCP (ISC, Windows 2k3/2k8)."$ColorR
          echo -e $Branco"$ dhcpig."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/kamorin/DHCPig"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dhcpig/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_10
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_10
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "2" ]; then
          echo -e $Color"Instalando Programa Iaxflood."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install iaxflood
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "2help" ]; then
          echo -e $BrancoBAD"Sobre Iaxflood:"$ColorR
          echo -e $Branco"Um pacote UDP Inter-Asterisk_eXchange (ou seja, IAX)"$ColorR
          echo -e $Branco"foi capturado de um canal IAX entre dois PBXs"$ColorR
          echo -e $Branco"IP Asterisk."$ColorR
          echo -e $Branco"O conteudo desse pacote e a fonte da carga util"$ColorR
          echo -e $Branco"para o ataque incorporado por essa ferramenta."$ColorR
          echo -e $Branco"Embora o cabecalho do protocolo IAX"$ColorR
          echo -e $Branco"possa nao corresponder ao PBX Asterisk"$ColorR
          echo -e $Branco"que voce atacara com esta ferramenta,"$ColorR
          echo -e $Branco"pode exigir mais processamento"$ColorR
          echo -e $Branco"por parte do PBX do que um simples udpflood"$ColorR
          echo -e $Branco"sem qualquer carga util que se assemelhe"$ColorR
          echo -e $Branco"a uma carga util IAX."$ColorR
          echo -e $Branco"$ iaxflood."$ColorR
          echo -e $BrancoBAD"Iaxflood Homepage: http://www.hackingexposedvoip.com/sec_tools.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/iaxflood/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "3" ]; then
          echo -e $Color"Instalando Programa Inviteflood."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install inviteflood
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "3help" ]; then
          echo -e $BrancoBAD"Sobre Inviteflood:"$ColorR
          echo -e $Branco"Uma ferramenta para executar inundacao"$ColorR
          echo -e $Branco"de mensagens SIP/SDP INVITE sobre UDP/IP."$ColorR
          echo -e $Branco"Ele foi testado em uma plataforma Linux Red Hat"$ColorR
          echo -e $Branco"Fedora Core 4 (Pentium IV, 2,5 GHz), mas espera-se"$ColorR
          echo -e $Branco"que esta ferramenta seja construida e executada"$ColorR
          echo -e $Branco"com sucesso em uma variedade"$ColorR
          echo -e $Branco"de distribuicoes Linux."$ColorR
          echo -e $Branco"$ inviteflood."$ColorR
          echo -e $BrancoBAD"Inviteflood Homepage: http://www.hackingvoip.com/sec_tools.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/inviteflood/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "4" ]; then
          echo -e $Color"Instalando Programa Ipv6-Toolkit."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ipv6-toolkit
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "4help" ]; then
          echo -e $BrancoBAD"Sobre Ipv6-Toolkit:"$ColorR
          echo -e $Branco"$ addr6: Uma ferramenta de analise"$ColorR
          echo -e $Branco"e manipulacao de enderecos IPv6."$ColorR
          echo -e $Branco"$ flow6: Uma ferramenta para realizar"$ColorR
          echo -e $Branco"uma avaliacao de seguranca"$ColorR
          echo -e $Branco"do rotulo de fluxo IPv6."$ColorR
          echo -e $Branco"$ frag6: Uma ferramenta para realizar"$ColorR
          echo -e $Branco"ataques baseados em fragmentacao IPv6"$ColorR
          echo -e $Branco"e realizar uma avaliacao de seguranca"$ColorR
          echo -e $Branco"de varios aspectos relacionados a fragmentacao."$ColorR
          echo -e $Branco"$ icmp6: Uma ferramenta para realizar"$ColorR
          echo -e $Branco"ataques baseados em mensagens de erro ICMPv6."$ColorR
          echo -e $Branco"$ jumbo6: Uma ferramenta para avaliar"$ColorR
          echo -e $Branco"possiveis falhas no manuseio de Jumbogramas IPv6."$ColorR
          echo -e $Branco"$ na6: Uma ferramenta para enviar"$ColorR
          echo -e $Branco"mensagens arbitrarias de anuncios de vizinhos."$ColorR
          echo -e $Branco"$ ni6: Uma ferramenta para enviar"$ColorR
          echo -e $Branco"mensagens arbitrarias ICMPv6 Node"$ColorR
          echo -e $Branco"Information e avaliar possiveis falhas"$ColorR
          echo -e $Branco"no processamento de tais pacotes."$ColorR
          echo -e $Branco"$ ns6: Uma ferramenta para enviar"$ColorR
          echo -e $Branco"mensagens arbitrarias de Solicitacao de Vizinhos."$ColorR
          echo -e $Branco"$ ra6: Uma ferramenta para enviar"$ColorR
          echo -e $Branco"mensagens arbitrarias de anuncio de roteador."$ColorR
          echo -e $Branco"$ rd6: Uma ferramenta para enviar"$ColorR
          echo -e $Branco"mensagens de redirecionamento ICMPv6 arbitrarias."$ColorR
          echo -e $Branco"$ rs6: Uma ferramenta para enviar"$ColorR
          echo -e $Branco"mensagens arbitrarias de Solicitacao de Roteador."$ColorR
          echo -e $Branco"$ scan6: Uma ferramenta de verificacao de enderecos IPv6."$ColorR
          echo -e $Branco"$ tcp6: Uma ferramenta para enviar"$ColorR
          echo -e $Branco"segmentos TCP arbitrarios e executar"$ColorR
          echo -e $Branco"uma variedade de ataques baseados em TCP."$ColorR
          echo -e $Branco"$ addr6."$ColorR
          echo -e $Branco"$ frag6."$ColorR
          echo -e $Branco"$ messi."$ColorR
          echo -e $Branco"$ ni6."$ColorR
          echo -e $Branco"$ ra6."$ColorR
          echo -e $Branco"$ scan6."$ColorR
          echo -e $Branco"$ udp6."$ColorR
          echo -e $Branco"$ blackhole6."$ColorR
          echo -e $Branco"$ icmp6."$ColorR
          echo -e $Branco"$ mldq6."$ColorR
          echo -e $Branco"$ ns6."$ColorR
          echo -e $Branco"$ rd6."$ColorR
          echo -e $Branco"$ script6."$ColorR
          echo -e $Branco"$ flow6."$ColorR
          echo -e $Branco"$ jumbo6."$ColorR
          echo -e $Branco"$ na6."$ColorR
          echo -e $Branco"$ path6."$ColorR
          echo -e $Branco"$ rs6."$ColorR
          echo -e $Branco"$ tcp6."$ColorR
          echo -e $BrancoBAD"Ipv6-Toolkit Homepage: https://www.si6networks.com/tools/ipv6toolkit/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ipv6-toolkit/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "5" ]; then
          echo -e $Color"Instalando Programa Mdk3."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install mdk3
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "5help" ]; then
          echo -e $BrancoBAD"Sobre Mdk3:"$ColorR
          echo -e $Branco"O MDK e uma ferramenta de"$ColorR
          echo -e $Branco"prova de conceito para explorar"$ColorR
          echo -e $Branco"os pontos fracos comuns do protocolo IEEE 802.11 (Wi-Fi)."$ColorR
          echo -e $BrancoBAD"Recursos:"$ColorR
          echo -e $Branco"* Filtros MAC Bruteforce."$ColorR
          echo -e $Branco"* SSIDs ocultos do Bruteforce"$ColorR
          echo -e $Branco"(algumas"$ColorR
          echo -e $Branco"pequenas listas de palavras SSID incluidas)."$ColorR
          echo -e $Branco"* Sonde as redes para verificar se podem ouvi-lo."$ColorR
          echo -e $Branco"* Intelligent Authentication-DoS para"$ColorR
          echo -e $Branco"congelar APs (com verificacoes de sucesso)."$ColorR
          echo -e $Branco"* FakeAP - Beacon Flooding com salto de canal"$ColorR
          echo -e $Branco"(pode travar"$ColorR
          echo -e $Branco"o NetStumbler e alguns drivers com bugs)"$ColorR
          echo -e $Branco"* Desconecte tudo (tambem conhecido como AMOK-MODE)"$ColorR
          echo -e $Branco"* com pacotes de desautenticacao e desassociacao."$ColorR
          echo -e $Branco"* Negacao de servico WPA TKIP."$ColorR
          echo -e $Branco"* WDS Confusion - Desliga"$ColorR
          echo -e $Branco"instalacoes multi-AP em grande escala."$ColorR
          echo -e $Branco"$ mdk3."$ColorR
          echo -e $BrancoBAD"Mdk3 Homepage: https://aspj.aircrack-ng.org/index.html#mdk3"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/mdk3/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "6" ]; then
          echo -e $Color"Instalando Programa Reaver."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install reaver
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "6help" ]; then
          echo -e $BrancoBAD"Sobre Reaver:"$ColorR
          echo -e $Branco"O Reaver executa um ataque de forca bruta"$ColorR
          echo -e $Branco"contra o numero do pino de configuracao protegida"$ColorR
          echo -e $Branco"por WiFi de um ponto de acesso."$ColorR
          echo -e $Branco"Uma vez que o pino WPS e encontrado, o WPA PSK"$ColorR
          echo -e $Branco"pode ser recuperado e, alternativamente, as"$ColorR
          echo -e $Branco"configuracoes sem fio do AP"$ColorR
          echo -e $Branco"podem ser reconfiguradas."$ColorR
          echo -e $Branco"$ reaver."$ColorR
          echo -e $Branco"$ wash."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/t6x/reaver-wps-fork-t6x"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/reaver/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "7" ]; then
          echo -e $Color"Instalando Programa Rtpflood."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rtpflood
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "7help" ]; then
          echo -e $BrancoBAD"Sobre Rtpflood:"$ColorR
          echo -e $Branco"Uma ferramenta de linha de comando usada"$ColorR
          echo -e $Branco"para inundar qualquer dispositivo"$ColorR
          echo -e $Branco"que esteja processando RTP."$ColorR
          echo -e $Branco"$ rtpflood."$ColorR
          echo -e $BrancoBAD"Rtpflood Homepage: http://www.hackingvoip.com/sec_tools.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rtpflood/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "8" ]; then
          echo -e $Color"Instalando Programa SlowHTTPTest."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install slowhttptest
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "8help" ]; then
          echo -e $BrancoBAD"Sobre SlowHTTPTest:"$ColorR
          echo -e $Branco"SlowHTTPTest e uma ferramenta altamente"$ColorR
          echo -e $Branco"configuravel que simula alguns ataques"$ColorR
          echo -e $Branco"de negacao de servico na camada de aplicacao."$ColorR
          echo -e $Branco"Ele implementa os ataques mais comuns de negacao"$ColorR
          echo -e $Branco"de servico da camada de aplicativo de baixa"$ColorR
          echo -e $Branco"largura de banda, como"$ColorR
          echo -e $Branco"* Slowloris."$ColorR
          echo -e $Branco"* POST HTTP lento."$ColorR
          echo -e $Branco"* Ataque de leitura lenta (com base na exploracao"$ColorR
          echo -e $Branco"do temporizador de persistencia TCP) drenando"$ColorR
          echo -e $Branco"o pool de conexoes simultaneas."$ColorR
          echo -e $Branco"* Ataque Apache Range Header, causando um"$ColorR
          echo -e $Branco"uso muito significativo"$ColorR
          echo -e $Branco"de memoria e CPU no servidor."$ColorR
          echo -e $Branco"$ slowhttptest."$ColorR
          echo -e $Branco"Github: https://github.com/shekyan/slowhttptest"$ColorR
          echo -e $Branco"Kali: https://www.kali.org/tools/slowhttptest/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "9" ]; then
          echo -e $Color"Instalando Programa T50."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install t50
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "9help" ]; then
          echo -e $BrancoBAD"Sobre T50:"$ColorR
          echo -e $Branco"Ferramenta de injecao de pacotes"$ColorR
          echo -e $Branco"multiprotocolo para sistemas *nix,"$ColorR
          echo -e $Branco"na verdade suportando 15 protocolos."$ColorR
          echo -e $BrancoBAD"Caracteristicas:"$ColorR
          echo -e $Branco"* Flooding."$ColorR
          echo -e $Branco"* Suporte CIDR."$ColorR
          echo -e $Branco"* Suporte a TCP, UDP, ICMP, IGMPv2, IGMPv3,"$ColorR
          echo -e $Branco"EGP, DCCP, RSVP, RIPv1, RIPv2, GRE,"$ColorR
          echo -e $Branco"ESP, AH, EIGRP e OSPF."$ColorR
          echo -e $Branco"* Opcoes de TCP."$ColorR
          echo -e $Branco"* Alta performance."$ColorR
          echo -e $Branco"* Pode atingir cerca de 1.000.000 pacotes por segundo."$ColorR
          echo -e $Branco"$ t50."$ColorR
          echo -e $BrancoBAD"Github: https://gitlab.com/fredericopissarra/t50"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/t50/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "10" ]; then
          echo -e $Color"Instalando Programa Termineter."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install termineter
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "10help" ]; then
          echo -e $BrancoBAD"Sobre Termineter:"$ColorR
          echo -e $Branco"Este pacote contem uma estrutura Python"$ColorR
          echo -e $Branco"que fornece uma plataforma para o teste de seguranca"$ColorR
          echo -e $Branco"de medidores inteligentes."$ColorR
          echo -e $Branco"Implementa os protocolos C1218 e C1219"$ColorR
          echo -e $Branco"para comunicacao atraves de uma interface optica."$ColorR
          echo -e $Branco"Atualmente ha suporte para medidores usando C1219-2007"$ColorR
          echo -e $Branco"com conjuntos de caracteres de 7 bits."$ColorR
          echo -e $Branco"Esta e, a configuracao mais comum encontrada"$ColorR
          echo -e $Branco"na America do Norte."$ColorR
          echo -e $Branco"O Termineter se comunica com Smart Meters"$ColorR
          echo -e $Branco"por meio de uma conexao usando uma sonda"$ColorR
          echo -e $Branco"otica ANSI tipo 2 com uma interface serial."$ColorR
          echo -e $Branco"$ termineter."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/securestate/termineter"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/termineter/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "11" ]; then
          echo -e $Color"Instalando Programa THC-IPV6."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install thc-ipv6
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "11help" ]; then
          echo -e $BrancoBAD"Sobre THC-IPV6:"$ColorR
          echo -e $Branco"Kit de ferramentas de ataque para testar as"$ColorR
          echo -e $Branco"fraquezas dos protocolos IPv6 e ICMPv6."$ColorR
          echo -e $Branco"Algumas das ferramentas incluidas:"$ColorR
          echo -e $Branco"$ alive6: uma varredura viva eficaz."$ColorR
          echo -e $Branco"$ denial6: tente uma colecao de testes de"$ColorR
          echo -e $Branco"negacao de servico contra um alvo."$ColorR
          echo -e $Branco"$ detect-new-ip6: detecta novos dispositivos"$ColorR
          echo -e $Branco"ip6 que ingressam na rede."$ColorR
          echo -e $Branco"$ dnsdict6: bruteforcer de dicionario dns"$ColorR
          echo -e $Branco"ipv6 paralelizado."$ColorR
          echo -e $Branco"$ dos-new-ip6: detecta novos dispositivos"$ColorR
          echo -e $Branco"ip6 e informa que o IP escolhido colide"$ColorR
          echo -e $Branco"na rede (DOS)."$ColorR
          echo -e $Branco"$ exploit6: teste vulnerabilidades IPv6"$ColorR
          echo -e $Branco"conhecidas em um alvo."$ColorR
          echo -e $Branco"$ fake_mld6: anuncie-se em um grupo multicast"$ColorR
          echo -e $Branco"de sua escolha na rede."$ColorR
          echo -e $Branco"$ fake_router6: anuncie-se como um"$ColorR
          echo -e $Branco"roteador na rede."$ColorR
          echo -e $Branco"$ flood_advertise6: inunda um alvo com"$ColorR
          echo -e $Branco"anuncios aleatorios de vizinhos."$ColorR
          echo -e $Branco"$ flood_router6: inunda um alvo com anuncios"$ColorR
          echo -e $Branco"aleatorios de roteador."$ColorR
          echo -e $Branco"$ implementation6: executa varias verificacoes"$ColorR
          echo -e $Branco"de implementacao no IPv6."$ColorR
          echo -e $Branco"$ parasite6: spoofer de solicitacao/anuncio"$ColorR
          echo -e $Branco"de vizinho icmp."$ColorR
          echo -e $Branco"$ redir6: redireciona o trafego para voce de"$ColorR
          echo -e $Branco"forma inteligente (man-in-the-middle)"$ColorR
          echo -e $Branco"com um spoofer de redirecionamento"$ColorR
          echo -e $Branco"icmp6 inteligente."$ColorR
          echo -e $Branco"$ rsmurf6: smurfer remoto (conhecido por"$ColorR
          echo -e $Branco"funcionar apenas contra Linux no momento)."$ColorR
          echo -e $Branco"$ thcping6: envia um pacote ping6 feito a mao."$ColorR
          echo -e $Branco"$ toobig6: Mtu decrescente com a mesma inteligencia que redir6.."$ColorR
          echo -e $Branco"$ atk6-address6."$ColorR
          echo -e $Branco"$ atk6-connsplit6."$ColorR
          echo -e $Branco"$ atk6-denial6."$ColorR
          echo -e $Branco"$ atk6-dnsdict6."$ColorR
          echo -e $Branco"$ atk6-dos-new-ip6."$ColorR
          echo -e $Branco"$ atk6-exploit6."$ColorR
          echo -e $Branco"$ atk6-fake_advertise6."$ColorR
          echo -e $Branco"$ atk6-fake_dnsupdate6."$ColorR
          echo -e $Branco"$ atk6-fake_mld6."$ColorR
          echo -e $Branco"$ atk6-fake_router26."$ColorR
          echo -e $Branco"$ atk6-flood_mld26."$ColorR
          echo -e $Branco"$ atk6-flood_redir6."$ColorR
          echo -e $Branco"$ atk6-flood_rs6."$ColorR
          echo -e $Branco"$ atk6-four2six."$ColorR
          echo -e $Branco"$ atk6-fuzz_dhcpc6."$ColorR
          echo -e $Branco"$ atk6-implementation6."$ColorR
          echo -e $Branco"$ atk6-inverse_lookup6."$ColorR
          echo -e $Branco"$ atk6-ndpexhaust6."$ColorR
          echo -e $Branco"$ atk6-passive_discovery6."$ColorR
          echo -e $Branco"$ atk6-redirsniff6."$ColorR
          echo -e $Branco"$ atk6-sendpeesmp6."$ColorR
          echo -e $Branco"$ atk6-thcsyn6."$ColorR
          echo -e $Branco"$ atk6-trace6."$ColorR
          echo -e $Branco"$ atk6-alive6."$ColorR
          echo -e $Branco"$ atk6-covert_send6."$ColorR
          echo -e $Branco"$ atk6-detect-new-ip6."$ColorR
          echo -e $Branco"$ atk6-dnsrevenum6."$ColorR
          echo -e $Branco"$ atk6-dump_dhcp6."$ColorR
          echo -e $Branco"$ atk6-extract_hosts6."$ColorR
          echo -e $Branco"$ atk6-fake_dhcps6."$ColorR
          echo -e $Branco"$ atk6-fake_mipv6."$ColorR
          echo -e $Branco"$ atk6-fake_mldrouter6."$ColorR
          echo -e $Branco"$ atk6-fake_router6."$ColorR
          echo -e $Branco"$ atk6-flood_advertise6."$ColorR
          echo -e $Branco"$ atk6-flood_mld6."$ColorR
          echo -e $Branco"$ atk6-flood_router26."$ColorR
          echo -e $Branco"$ atk6-flood_solicitate6."$ColorR
          echo -e $Branco"$ atk6-fragmentation6."$ColorR
          echo -e $Branco"$ atk6-fuzz_dhcps6."$ColorR
          echo -e $Branco"$ atk6-implementation6d."$ColorR
          echo -e $Branco"$ atk6-kill_router6."$ColorR
          echo -e $Branco"$ atk6-node_query6."$ColorR
          echo -e $Branco"$ atk6-randicmp6."$ColorR
          echo -e $Branco"$ atk6-rsmurf6."$ColorR
          echo -e $Branco"$ atk6-smurf6."$ColorR
          echo -e $Branco"$ atk6-toobig6."$ColorR
          echo -e $Branco"$ atk6-connect6."$ColorR
          echo -e $Branco"$ atk6-covert_send6d."$ColorR
          echo -e $Branco"$ atk6-detect_sniffer6."$ColorR
          echo -e $Branco"$ atk6-dnssecwalk."$ColorR
          echo -e $Branco"$ atk6-dump_router6."$ColorR
          echo -e $Branco"$ atk6-extract_networks6."$ColorR
          echo -e $Branco"$ atk6-fake_dns6d."$ColorR
          echo -e $Branco"$ atk6-fake_mld26."$ColorR
          echo -e $Branco"$ atk6-fake_pim6."$ColorR
          echo -e $Branco"$ atk6-fake_solicitate6."$ColorR
          echo -e $Branco"$ atk6-flood_dhcpc6."$ColorR
          echo -e $Branco"$ atk6-flood_mldrouter6."$ColorR
          echo -e $Branco"$ atk6-flood_router6."$ColorR
          echo -e $Branco"$ atk6-flood_unreach6."$ColorR
          echo -e $Branco"$ atk6-fragrouter6."$ColorR
          echo -e $Branco"$ atk6-fuzz_ip6."$ColorR
          echo -e $Branco"$ atk6-inject_alive6."$ColorR
          echo -e $Branco"$ atk6-ndpexhaust26."$ColorR
          echo -e $Branco"$ atk6-parasite6."$ColorR
          echo -e $Branco"$ atk6-redir6."$ColorR
          echo -e $Branco"$ atk6-sendpees6."$ColorR
          echo -e $Branco"$ atk6-thcping6."$ColorR
          echo -e $Branco"$ atk6-toobigsniff6."$ColorR
          echo -e $BrancoBAD"Thc-Ipv6 Homepage: http://www.thc.org/thc-ipv6/"$ColorR
          echo -e $BrancoBAD"Github:"\
                                    "https://github.com/vanhauser-thc/thc-ipv6"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/thc-ipv6/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "12" ]; then
          echo -e $Color"Instalando Programa THC-SSL-DOS."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install thc-ssl-dos
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "12help" ]; then
          echo -e $BrancoBAD"Sobre THC-SSL-DOS:"$ColorR
          echo -e $Branco"THC-SSL-DOS e uma ferramenta"$ColorR
          echo -e $Branco"para verificar o desempenho do SSL."$ColorR
          echo -e $Branco"Estabelecer uma conexao SSL segura"$ColorR
          echo -e $Branco"requer 15 vezes mais poder de processamento"$ColorR
          echo -e $Branco"no servidor do que no cliente."$ColorR
          echo -e $Branco"O THC-SSL-DOS explora essa propriedade"$ColorR
          echo -e $Branco"assimetrica sobrecarregando o servidor e tirando-o"$ColorR
          echo -e $Branco"da Internet."$ColorR
          echo -e $Branco"Esse problema afeta todas as"$ColorR
          echo -e $Branco"implementacoes de SSL hoje."$ColorR
          echo -e $Branco"Os fornecedores estao cientes desse problema"$ColorR
          echo -e $Branco"desde 2003 e o tema tem sido amplamente discutido."$ColorR
          echo -e $Branco"Este ataque explora ainda mais o recurso SSL Secure"$ColorR
          echo -e $Branco"Renegociation para acionar milhares de renegociacoes"$ColorR
          echo -e $Branco"por meio de uma unica conexao TCP."$ColorR
          echo -e $Branco"$ thc-ssl-dos."$ColorR
          echo -e $BrancoBAD"THC-SSL-DOS Homepage: http://www.thc.org/thc-ssl-dos/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/thc-ssl-dos/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas10

     elif [ "$J" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$J" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$J" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$J" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$J" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$J" = "P13" ]; then
          Programas13

     elif [ "$J" = "P12" ]; then
          Programas12

     elif [ "$J" = "P11" ]; then
          Programas11

     elif [ "$J" = "P10" ]; then
          Programas10

     elif [ "$J" = "P09" ]; then
          Programas09

     elif [ "$J" = "P08" ]; then
          Programas08

     elif [ "$J" = "P07" ]; then
          Programas07

     elif [ "$J" = "P06" ]; then
          Programas06

     elif [ "$J" = "P05" ]; then
          Programas05

     elif [ "$J" = "P04" ]; then
          Programas04

     elif [ "$J" = "P03" ]; then
          Programas03

     elif [ "$J" = "P02" ]; then
          Programas02

     elif [ "$J" = "P01" ]; then
          Programas01

     elif [ "$J" = "Programas01" ]; then
          Programas01

     elif [ "$J" = "Programas02" ]; then
          Programas02

     elif [ "$J" = "Programas03" ]; then
          Programas03

     elif [ "$J" = "Programas04" ]; then
          Programas04

     elif [ "$J" = "Programas05" ]; then
          Programas05

     elif [ "$J" = "Programas06" ]; then
          Programas06

     elif [ "$J" = "Programas07" ]; then
          Programas07

     elif [ "$J" = "Programas08" ]; then
          Programas08

     elif [ "$J" = "Programas09" ]; then
          Programas09

     elif [ "$J" = "Programas10" ]; then
          Programas10

     elif [ "$J" = "Programas11" ]; then
          Programas11

     elif [ "$J" = "Programas12" ]; then
          Programas12

     elif [ "$J" = "Programas13" ]; then
          Programas13

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Programas10
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Programas10
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Programas10
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Programas10
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Programas10
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Programas10
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas10
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas10
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas10
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas10
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas10
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas10
fi
}
Programas09Bi(){
echo -e $Color"\n\nFerramentas Forenses (Plus)"$ColorR
echo -e $Color"
01) Samdump2
1help Sobre Samdump2
02) Scalpel
2help Sobre Scalpel
03) Scrounge-Ntfs
3help Sobre Scrounge-Ntfs
04) SleuthKit
4help Sobre SleuthKit
05) Smali
5help Sobre Smali
06) SQLiteBrowser
6help Sobre SQLiteBrowser
07) SSdeep
7help Sobre SSdeep
08) Tcpdump
8help Sobre Tcpdump
09) Tcpflow
9help Sobre Tcpflow
10) Polenum
10help Sobre Polenum
11) Tcpick
11help Sobre Tcpick
12) Tcpreplay
12help Sobre Tcpreplay
13) TrueCrack
13help Sobre TrueCrack
14) UnDBX
14help Sobre UnDBX
15) Unhide
15help Sobre Unhide
16) Unrar-Nonfree
16help Sobre Unrar-Nonfree
17) Unar
17help Sobre Unar
18) Upx-Ucl
18help Sobre Upx-Ucl
19) Vinetto
19help Sobre Vinetto
20) WCE
20help Sobre WCE
21) Winregfs
21help Sobre Winregfs
22) Wireshark
22help Sobre Wireshark
23) Xmount
23help Sobre Xmount
24) Xplico
24help Sobre Xplico
25) YARA
25help Sobre YARA
26) LVM2
26help Sobre LVM2
27) Lynis
27help Sobre Lynis
28) Pst-Utils
28help Sobre Pst-Utils
29) CeWL
29help Sobre CeWL
30) PDFCrack
30help Sobre PDFCrack
"$ColorR

echo -e "\n"
echo -e $Verde"Install all Forensics tools (Plus)"$ColorR
echo -e $Verde"(x) (Instalar Todas as ferramentas.)"$ColorR
echo -e "\n\n"
}
PrompTProgramas09i(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" I
}
All_Tools_09i(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install smali
apt-get -y install unhide
apt-get -y install wce
apt-get -y install lynis
apt-get -y install upx-ucl
apt-get -y install pdfcrack
apt-get -y install cewl
apt-get -y install dmeventd
apt-get -y install dmsetup
apt-get -y install libpst-dev
apt-get -y install libpst4
apt-get -y install pst-utils
apt-get -y install libdevmapper-dev
apt-get -y install libdevmapper-event1.02.1
apt-get -y install libdevmapper1.02.1
apt-get -y install liblvm2-dev
apt-get -y install liblvm2cmd2.03
apt-get -y install lvm2
apt-get -y install lvm2-dbusd
apt-get -y install lvm2-lockd
apt-get -y install xmount
apt-get -y install yara-doc
apt-get -y install yara
apt-get -y install libyara9
apt-get -y install libyara-dev
apt-get -y install libwireshark-data
apt-get -y install libwireshark-dev
apt-get -y install libwireshark15
apt-get -y install libwiretap-dev
apt-get -y install libwiretap12
apt-get -y install libwsutil-dev
apt-get -y install libwsutil13
apt-get -y install tshark
apt-get -y install wireshark
apt-get -y install wireshark-common
apt-get -y install wireshark-dev
apt-get -y install wireshark-doc
apt-get -y install wireshark-gtk
apt-get -y install wireshark-qt
apt-get -y install vinetto
apt-get -y install samdump2
apt-get -y install scalpel
apt-get -y install ssdeep
apt-get -y install tcpick
apt-get -y install truecrack
apt-get -y install tcpreplay
apt-get -y install winregfs
apt-get -y install xplico
apt-get -y install libunrar-dev
apt-get -y install libunrar-headers
apt-get -y install libunrar5
apt-get -y install unrar
apt-get -y install sqlitebrowser
apt-get -y install tcpdump
apt-get -y install tcpflow
apt-get -y install tcpflow-nox
apt-get -y install scrounge-ntfs
apt-get -y install polenum
apt-get -y install libtsk-dev
apt-get -y install libtsk19
apt-get -y install sleuthkit
apt-get -y install undbx
apt-get -y install libfuzzy-dev
apt-get -y install libfuzzy2
}
Programas09B(){
echo -e $Color"\n\nFerramentas Forenses"$ColorR
echo -e $Color"
01) Binwalk                      35) Gpart
1help Sobre Binwalk              35help Sobre Gpart
02) Bulk-Extractor               36) GParted
2help Sobre Bulk-Extractor       36help Sobre GParted
03) Capstone                     37) GrokEVT
3help Sobre Capstone             37help Sobre GrokEVT
04) Chntpw                       38) Hashdeep
4help Sobre Chntpw               38help Sobre Hashdeep
05) Dc3dd                        39) INetSim
5help Sobre Dc3dd                39help Sobre INetSim
06) Ddrescue                     40) Jadx
6help Sobre Ddrescue             40help Sobre Jadx
07) DiStorm3                     41) JavaSnoop
7help Sobre DiStorm3             41help Sobre JavaSnoop
08) Dumpzilla                    42) Mac-Robber
8help Sobre Dumpzilla            42help Sobre Mac-Robber
09) Extundelete                  43) MagicRescue
9help Sobre Extundelete          43help Sobre MagicRescue
10) Foremost                     44) Mdbtools
10help Sobre Foremost            44help Sobre Mdbtools
11) Galleta                      45) Memdump
11help Sobre Galleta             45help Sobre Memdump
12) Guymager                     46) MetaCam
12help Sobre Guymager            46help Sobre MetaCam
13) P0f                          47) Missidentify
13help Sobre P0f                 47help Sobre Missidentify
14) Pdf-Parser                   48) Myrescue
14help Sobre Pdf-Parser          48help Sobre Myrescue
15) PDFiD                        49) NASM
15help Sobre PDFiD               49help Sobre NASM
16) Xplico                       50) Nasty
16help Sobre Xplico              50help Sobre Nasty
17) Afflib-Tools                 51) OllyDbg
17help Sobre Afflib-Tools        51help Sobre OllyDbg
18) Apktool                      52) P7zip-Full
18help Sobre Apktool             52help Sobre P7zip-Full
19) Autopsy                      53) GNU-Parted
19help Sobre Autopsy             53help Sobre GNU-Parted
20) Bytecode-Viewer              54) Pasco
20help Sobre Bytecode-Viewer     54help Sobre Pasco
21) Cabextract                   55) Pev
21help Sobre Cabextract          55help Sobre Pev
22) Chkrootkit                   56) Plaso
22help Sobre Chkrootkit          56help Sobre Plaso
23) Creddump7                    57) Radare2
23help Sobre Creddump7           57help Sobre Radare2
24) Dcfldd                       58) Radare2-Cutter
24help Sobre Dcfldd              58help Sobre Radare2-Cutt
25) Edb-Debugger                 59) Recoverdm
25help Sobre Edb-Debugger        59help Sobre Recoverdm
26) Ewf-Tools                    60) Recoverjpeg
26help Sobre Ewf-Tools           60help Sobre Recoverjpeg
27) Exifprobe                    61) RegLookup
27help Sobre Exifprobe           61help Sobre RegLookup
28) Exiv2                        62) RegRipper
28help Sobre Exiv2               62help Sobre RegRipper
29) Ext3grep                     63) Rephrase
29help Sobre Ext3grep            63help Sobre Rephrase
30) Ext4magic                    64) Rifiuti
30help Sobre Ext4magic           64help Sobre Rifiuti
31) Fcrackzip                    65) Rifiuti2
31help Sobre Fcrackzip           65help Sobre Rifiuti2
32) Forensic-Artifacts           66) Rkhunter
32help Sobre Forensic-Artifacts  66help Sobre Rkhunter
33) Forensics-Colorize           67) Rsakeyfind
33help Sobre Forensics-Colorize  67help Sobre Rsakeyfind
34) GDB                          68) Safecopy
34help Sobre GDB                 68help Sobre Safecopy
"$ColorR

echo -e "\n"
echo -e $Verde"Install all Forensics tools"$ColorR
echo -e $Verde"(x) (Instalar Todas as ferramentas.)"$ColorR
echo -e $Verde"(s) Plus, mais Forensics tools"
echo -e "\n\n"
}
PrompTProgramas09(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" I
}
All_Tools_09(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install safecopy
apt-get -y install xmount
apt-get -y install rsakeyfind
apt-get -y install ollydbg
apt-get -y install upx-ucl
apt-get -y install binwalk
apt-get -y install apktool
apt-get -y install gdb
apt-get -y install vinetto
apt-get -y install pev
apt-get -y install libpst-dev
apt-get -y install libpst4
apt-get -y install pst-utils
apt-get -y install libunrar-dev
apt-get -y install libunrar-headers
apt-get -y install libunrar5
apt-get -y install unrar
apt-get -y install truecrack
apt-get -y install libregfi-dev
apt-get -y install libregfi1
apt-get -y install dmeventd
apt-get -y install dmsetup
apt-get -y install lynis
apt-get -y install libdevmapper-dev
apt-get -y install libdevmapper-event1.02.1
apt-get -y install libdevmapper1.02.1
apt-get -y install liblvm2-dev
apt-get -y install liblvm2cmd2.03
apt-get -y install lvm2
apt-get -y install lvm2-dbusd
apt-get -y install lvm2-lockd
apt-get -y install python3-pyregfi
apt-get -y install regripper
apt-get -y install reglookup
apt-get -y install reglookup-doc
apt-get -y install rkhunter
apt-get -y install tcpreplay
apt-get -y install winregfs
apt-get -y install libwireshark-data
apt-get -y install libwireshark-dev
apt-get -y install libwireshark15
apt-get -y install libwiretap-dev
apt-get -y install libwiretap12
apt-get -y install libwsutil-dev
apt-get -y install libwsutil13
apt-get -y install tshark
apt-get -y install wireshark
apt-get -y install wireshark-common
apt-get -y install wireshark-dev
apt-get -y install wireshark-doc
apt-get -y install wireshark-gtk
apt-get -y install wireshark-qt
apt-get -y install yara-doc
apt-get -y install yara
apt-get -y install libyara9
apt-get -y install libyara-dev
apt-get -y install recoverjpeg
apt-get -y install radare2-cutter
apt-get -y install nasm
apt-get -y install plaso
apt-get -y install rifiuti
apt-get -y install python3-plaso
apt-get -y install myrescue
apt-get -y install memdump
apt-get -y install p7zip
apt-get -y install p7zip-full
apt-get -y install rifiuti2
apt-get -y install tcpick
apt-get -y install wce
apt-get -y install libradare2-5.0.0
apt-get -y install libradare2-common
apt-get -y install libradare2-dev
apt-get -y install radare2
apt-get -y install gdb-minimal
apt-get -y install gdb-multiarch
apt-get -y install gpart
apt-get -y install gdb-source
apt-get -y install gdbserver
apt-get -y install tcpdump
apt-get -y install autopsy
apt-get -y install libparted-dev
apt-get -y install libparted-fs-resize0
apt-get -y install libparted-i18n
apt-get -y install libparted2
apt-get -y install parted
apt-get -y install parted-doc
apt-get -y install pasco
apt-get -y install javasnoop
apt-get -y install rephrase
apt-get -y install recoverdm
apt-get -y install undbx
apt-get -y install mac-robber
apt-get -y install smali
apt-get -y install tcpflow
apt-get -y install polenum
apt-get -y install tcpflow-nox
apt-get -y install missidentify
apt-get -y install creddump7
apt-get -y install xplico
apt-get -y install chkrootkit
apt-get -y install grokevt
apt-get -y install libmdb3
apt-get -y install libmdbsql3
apt-get -y install mdbtools
apt-get -y install unhide
apt-get -y install mdbtools-dev
apt-get -y install mdbtools-doc
apt-get -y install odbc-mdbtools
apt-get -y install cabextract
apt-get -y install dcfldd
apt-get -y install ewf-tools
apt-get -y install libewf-dev
apt-get -y install libewf2
apt-get -y install nasty
apt-get -y install magicrescue
apt-get -y install gparted
apt-get -y install gparted-common
apt-get -y install exifprobe
apt-get -y install exiv2
apt-get -y install jadx
apt-get -y install metacam
apt-get -y install libexiv2-27
apt-get -y install libexiv2-dev
apt-get -y install libexiv2-doc
apt-get -y install forensic-artifacts
apt-get -y install python3-libewf
apt-get -y install edb-debugger
apt-get -y install edb-debugger-plugins
apt-get -y install ext4magic
apt-get -y install forensics-colorize
apt-get -y install inetsim
apt-get -y install bytecode-viewer
apt-get -y install afflib-tools
apt-get -y install libafflib-dev
apt-get -y install libafflib0v5
apt-get -y install python3-artifacts
apt-get -y install sqlitebrowser
apt-get -y install bulk-extractor
apt-get -y install ext3grep
apt-get -y install chntpw
apt-get -y install xplico
apt-get -y install capstone-tool
apt-get -y install p0f
apt-get -y install pdfid
apt-get -y install ddrescue
apt-get -y install libcapstone-dev
apt-get -y install libcapstone4
apt-get -y install guymager
apt-get -y install python3-capstone
apt-get -y install galleta
apt-get -y install dc3dd
apt-get -y install dumpzilla
apt-get -y install libdistorm3-3
apt-get -y install libdistorm3-dev
apt-get -y install python3-distorm3
apt-get -y install hashdeep
apt-get -y install extundelete
apt-get -y install foremost
apt-get -y install pdf-parser
apt-get -y install fcrackzip
apt-get -y install samdump2
apt-get -y install scalpel
apt-get -y install scrounge-ntfs
apt-get -y install libtsk-dev
apt-get -y install libtsk19
apt-get -y install sleuthkit
apt-get -y install ssdeep
apt-get -y install libfuzzy2
apt-get -y install libfuzzy-dev
}
Programas09(){
Programas09B
PrompTProgramas09
if [ "$I" = "01" ]; then
   I="1"
fi
if [ "$I" = "02" ]; then
   I="2"
fi
if [ "$I" = "03" ]; then
   I="3"
fi
if [ "$I" = "04" ]; then
   I="4"
fi
if [ "$I" = "05" ]; then
   I="5"
fi
if [ "$I" = "06" ]; then
   I="6"
fi
if [ "$I" = "07" ]; then
   I="7"
fi
if [ "$I" = "08" ]; then
   I="8"
fi
if [ "$I" = "09" ]; then
   I="9"
fi
if [ "$I" = "s" ]; then
   I="S"
fi
while [ "$I" ];
do
  if [ "$I" ]; then
     if [ "$I" = "1" ]; then
        echo -e $Color"Instalando Programa Binwalk."$Color
        apt-get -y update 1> /dev/null 2> /dev/null
        apt-get -y install binwalk
        sleep 1
        echo -e $Color"Processo Finalizado."$ColorR
        sleep 1
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        PrompTProgramas09

    elif [ "$I" = "1help" ]; then
         echo -e $BrancoBAD"Sobre Binwalk:"$ColorR
         echo -e $Branco"Binwalk e uma ferramenta"$ColorR
         echo -e $Branco"para pesquisar uma determinada"$ColorR
         echo -e $Branco"imagem binaria para arquivos"$ColorR
         echo -e $Branco"incorporados e codigo executavel."$ColorR
         echo -e $Branco"Especificamente, ele e projetado para identificar"$ColorR
         echo -e $Branco"arquivos e codigos incorporados em imagens de firmware."$ColorR
         echo -e $Branco"Binwalk usa a biblioteca libmagic, por isso e compativel"$ColorR
         echo -e $Branco"com assinaturas magicas criadas"$ColorR
         echo -e $Branco"para o utilitario de arquivo Unix."$ColorR
         echo -e $Branco"Binwalk tambem inclui um arquivo de assinatura"$ColorR
         echo -e $Branco"magica personalizado que contem assinaturas aprimoradas"$ColorR
         echo -e $Branco"para arquivos que sao comumente encontrados em"$ColorR
         echo -e $Branco"imagens de firmware, como"$ColorR
         echo -e $Branco"arquivos compactados/arquivados, cabecalhos"$ColorR
         echo -e $Branco"de firmware, kernels Linux, carregadores"$ColorR
         echo -e $Branco"de inicializacao, sistemas de arquivos, etc."$ColorR
         echo -e $Branco"$ binwalk"$ColorR
         echo -e $BrancoBAD"Github: https://github.com/ReFirmLabs/binwalk"$ColorR
         echo -e $BrancoBAD"Kali: https://www.kali.org/tools/binwalk/"$ColorR
         echo -e $Color"De um Enter para Restaurar"\
                       "a Interface Padrao."$ColorR
         sleep 1
         PrompTProgramas09

     elif [ "$I" = "S" ]; then
          Programas09i

     elif [ "$I" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_09
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_09
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "2" ]; then
          echo -e $Color"Instalando Programa Bulk-Extractor."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install bulk-extractor
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "2help" ]; then
          echo -e $BrancoBAD"Sobre Bulk-Extractor:"$ColorR
          echo -e $Branco"bulk_extractor e um programa C++ que verifica"$ColorR
          echo -e $Branco"uma imagem de disco, um arquivo ou um diretorio"$ColorR
          echo -e $Branco"de arquivos e extrai informacoes"$ColorR
          echo -e $Branco"uteis sem analisar"$ColorR
          echo -e $Branco"o sistema de arquivos ou as"$ColorR
          echo -e $Branco"estruturas do sistema de arquivos."$ColorR
          echo -e $Branco"Os resultados sao armazenados"$ColorR
          echo -e $Branco"em arquivos de recursos"$ColorR
          echo -e $Branco"que podem ser facilmente inspecionados, analisados"$ColorR
          echo -e $Branco"ou processados com ferramentas automatizadas."$ColorR
          echo -e $Branco"bulk_extractor tambem cria histogramas de recursos"$ColorR
          echo -e $Branco"que encontra, pois os recursos mais"$ColorR
          echo -e $Branco"comuns tendem a ser mais importantes."$ColorR
          echo -e $Branco"$ bulk_extractor."$ColorR
          echo -e $Branco"$ test_be."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/simsong/bulk_extractor"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/bulk-extractor/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "3" ]; then
          echo -e $Color"Instalando Programa Capstone."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install capstone-tool
          apt-get -y install libcapstone-dev
          apt-get -y install libcapstone4
          apt-get -y install python3-capstone
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "3help" ]; then
          echo -e $BrancoBAD"Sobre Capstone:"$ColorR
          echo -e $Branco"Capstone e uma estrutura"$ColorR
          echo -e $Branco"leve de desmontagem"$ColorR
          echo -e $Branco"multiplataforma e multiarquitetura."$ColorR
          echo -e $BrancoBAD"Caracteristicas:"$ColorR
          echo -e $Branco"Suporta arquiteturas de hardware: ARM, ARM64"$ColorR
          echo -e $Branco"(tambem conhecido como ARMv8), Mips, PowerPC e Intel."$ColorR
          echo -e $Branco"API de arquitetura neutra/simples/leve/intuitiva."$ColorR
          echo -e $Branco"Forneca detalhes sobre as"$ColorR
          echo -e $Branco"instrucoes desmontadas"$ColorR
          echo -e $Branco"(chamadas de “decompositor” por alguns outros)."$ColorR
          echo -e $Branco"Forneca alguma semantica da"$ColorR
          echo -e $Branco"instrucao desmontada, como lista"$ColorR
          echo -e $Branco"de registros implicitos lidos e escritos."$ColorR
          echo -e $Branco"Implementado em linguagem C pura,"$ColorR
          echo -e $Branco"com bindings para Java, OCaml"$ColorR
          echo -e $Branco"e Python prontos para uso e Ruby, C#,"$ColorR
          echo -e $Branco"GO & Vala disponiveis em git repos."$ColorR
          echo -e $Branco"Suporte nativo para Windows e *nix"$ColorR
          echo -e $Branco"(com OS X, Linux, *BSD e Solaris confirmados)."$ColorR
          echo -e $Branco"Thread-safe por design."$ColorR
          echo -e $Branco"Suporte especial para incorporacao em firmware ou kernel"$ColorR
          echo -e $Branco"do sistema operacional."$ColorR
          echo -e $Branco"Distribuido sob a licenca BSD de codigo aberto."$ColorR
          echo -e $Branco"$ cstool."$ColorR
          echo -e $BrancoBAD"Capstone Homepage: https://www.capstone-engine.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/capstone/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "4" ]; then
          echo -e $Color"Instalando Programa Chntpw."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install chntpw
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "4help" ]; then
          echo -e $BrancoBAD"Sobre Chntpw:"$ColorR
          echo -e $Branco"Este pequeno programa fornece"$ColorR
          echo -e $Branco"uma maneira de visualizar"$ColorR
          echo -e $Branco"informacoes e alterar senhas"$ColorR
          echo -e $Branco"de usuarios em um arquivo"$ColorR
          echo -e $Branco"de banco de dados de usuarios do Windows NT/2000."$ColorR
          echo -e $Branco"As senhas antigas nao precisam"$ColorR
          echo -e $Branco"ser conhecidas, pois sao sobrescritas."$ColorR
          echo -e $Branco"Alem disso, ele tambem contem um editor de registro"$ColorR
          echo -e $Branco"simples (gravacoes de dados do mesmo tamanho)"$ColorR
          echo -e $Branco"e um editor hexadecimal"$ColorR
          echo -e $Branco"que permite mexer com bits"$ColorR
          echo -e $Branco"e bytes no arquivo como desejar."$ColorR
          echo -e $Branco"Se voce deseja bootdisks GNU/Linux"$ColorR
          echo -e $Branco"para recuperacao de senha offline, voce pode adicionar"$ColorR
          echo -e $Branco"este utilitario a discos de imagem personalizados"$ColorR
          echo -e $Branco"ou usar aqueles fornecidos na"$ColorR
          echo -e $Branco"pagina inicial de ferramentas."$ColorR
          echo -e $Branco"$ chntpw."$ColorR
          echo -e $Branco"$ samunlock."$ColorR
          echo -e $Branco"$ reged."$ColorR
          echo -e $Branco"$ samusrgrp."$ColorR
          echo -e $Branco"$ sampasswd."$ColorR
          echo -e $BrancoBAD"Chntpw Homepage: http://pogostick.net/~pnh/ntpasswd/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/chntpw/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "5" ]; then
          echo -e $Color"Instalando Programa Dc3dd."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dc3dd
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "5help" ]; then
          echo -e $BrancoBAD"Sobre Dc3dd:"$ColorR
          echo -e $Branco"dc3dd e uma versao corrigida do GNU dd"$ColorR
          echo -e $Branco"com recursos adicionais para computacao forense:"$ColorR
          echo -e $Branco"* hash em tempo real (md5, sha-1, sha-256 e sha-512);"$ColorR
          echo -e $Branco"* possibilidade de escrever erros em um arquivo;"$ColorR
          echo -e $Branco"* erros de grupo no log de erros;"$ColorR
          echo -e $Branco"* limpeza padrao;"$ColorR
          echo -e $Branco"* relatorio de progresso;"$ColorR
          echo -e $Branco"* possibilidade de dividir a saida."$ColorR
          echo -e $Branco"$ dc3dd."$ColorR
          echo -e $BrancoBAD"Dc3dd Homepage: http://dc3dd.sf.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dc3dd/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "6" ]; then
          echo -e $Color"Instalando Programa Ddrescue."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ddrescue
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "6help" ]; then
          echo -e $BrancoBAD"Sobre Ddrescue:"$ColorR
          echo -e $Branco"Quando seu disco trava e voce"$ColorR
          echo -e $Branco"tenta copia-lo para outro, as ferramentas padrao"$ColorR
          echo -e $Branco"do Unix como cp, cat e dd irao"$ColorR
          echo -e $Branco"abortar em cada erro de E/S, o dd_rescue nao."$ColorR
          echo -e $Branco"Ele otimiza a copia usando"$ColorR
          echo -e $Branco"blocos grandes, desde que nao"$ColorR
          echo -e $Branco"ocorram erros e volte para blocos menores."$ColorR
          echo -e $Branco"Ele suporta copia de direcao reversa"$ColorR
          echo -e $Branco"(para abordar um ponto ruim a partir do topo),"$ColorR
          echo -e $Branco"copia esparsa, prece-alocacao"$ColorR
          echo -e $Branco"de espaco, splice zerocopy"$ColorR
          echo -e $Branco"e ignorar o cache de pagina do kernel com O_DIRECT."$ColorR
          echo -e $Branco"dd_rescue fornece exclusao"$ColorR
          echo -e $Branco"segura de dados sobrescrevendo"$ColorR
          echo -e $Branco"arquivos (ou particoes/discos melhores)"$ColorR
          echo -e $Branco"varias vezes com numeros aleatorios rapidos."$ColorR
          echo -e $Branco"Com o plugin ddr_hash, ele suporta"$ColorR
          echo -e $Branco"o calculo de um valor de hash"$ColorR
          echo -e $Branco"(como um sha256sum)"$ColorR
          echo -e $Branco"ou um HMAC durante a copia."$ColorR
          echo -e $Branco"$ dd_rescue."$ColorR
          echo -e $BrancoBAD"Ddrescure Homepage: http://www.garloff.de/kurt/linux/ddrescue/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ddrescue/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "7" ]; then
          echo -e $Color"Instalando Programa DiStorm3."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install libdistorm3-3
          apt-get -y install libdistorm3-dev
          apt-get -y install python3-distorm3
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "7help" ]; then
          echo -e $BrancoBAD"Sobre DiStorm3:"$ColorR
          echo -e $Branco"Distribuicao para python."$ColorR
          echo -e $Branco"diStorm3 e um projeto de"$ColorR
          echo -e $Branco"biblioteca de desmontagem de fluxo binario."$ColorR
          echo -e $Branco"Com o diStorm3, nao sao"$ColorR
          echo -e $Branco"necessarias mais strings de analise."$ColorR
          echo -e $Branco"O diStorm3 e realmente um"$ColorR
          echo -e $Branco"decompositor, o que significa"$ColorR
          echo -e $Branco"que ele recebe uma instrucao"$ColorR
          echo -e $Branco"e retorna uma estrutura"$ColorR
          echo -e $Branco"binaria que a descreve em vez de texto estatico."$ColorR
          echo -e $Branco"Isso e otimo para analise"$ColorR
          echo -e $Branco"avancada de codigo binario."$ColorR
          echo -e $Branco"Este pacote fornece as ligacoes do Python3."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/gdabah/distorm"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/distorm3/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "8" ]; then
          echo -e $Color"Instalando Programa Dumpzilla."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dumpzilla
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "8help" ]; then
          echo -e $BrancoBAD"Sobre Dumpzilla:"$ColorR
          echo -e $Branco"O aplicativo Dumpzilla e desenvolvido"$ColorR
          echo -e $Branco"em Python 3.xe tem como"$ColorR
          echo -e $Branco"finalidade extrair todas as"$ColorR
          echo -e $Branco"informacoes de interesse forense"$ColorR
          echo -e $Branco"dos navegadores Firefox, Iceweasel"$ColorR
          echo -e $Branco"e Seamonkey a serem analisadas."$ColorR
          echo -e $Branco"Devido ao seu desenvolvimento Python 3.x,"$ColorR
          echo -e $Branco"pode nao funcionar corretamente"$ColorR
          echo -e $Branco"em versoes antigas"$ColorR
          echo -e $Branco"do Python, principalmente com certos caracteres."$ColorR
          echo -e $Branco"Funciona em sistemas Unix e Windows 32/64 bits."$ColorR
          echo -e $Branco"Funciona em interface de linha de comando, de"$ColorR
          echo -e $Branco"modo que os dumps de informacoes"$ColorR
          echo -e $Branco"podem ser redirecionados"$ColorR
          echo -e $Branco"por pipes com ferramentas"$ColorR
          echo -e $Branco"como grep, awk, cut, sed… Dumpzilla"$ColorR
          echo -e $Branco"permite visualizar as"$ColorR
          echo -e $Branco"seguintes secoes, personalizar"$ColorR
          echo -e $Branco"a pesquisa e extrair determinado conteudo."$ColorR
          echo -e $Branco"$ dumpzilla."$ColorR
          echo -e $BrancoBAD"Dumpzilla Homepage: http://www.dumpzilla.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dumpzilla/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "9" ]; then
          echo -e $Color"Instalando Programa Extundelete."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install extundelete
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "9help" ]; then
          echo -e $BrancoBAD"Sobre Extundelete:"$ColorR
          echo -e $Branco"extundelete usa as"$ColorR
          echo -e $Branco"informacoes armazenadas no"$ColorR
          echo -e $Branco"diario da particao para tentar"$ColorR
          echo -e $Branco"recuperar um arquivo que foi excluido."$ColorR
          echo -e $Branco"Nao ha garantia de que qualquer"$ColorR
          echo -e $Branco"arquivo especifico podera ser recuperado."$ColorR
          echo -e $Branco"$ extundelete."$ColorR
          echo -e $BrancoBAD"Extundelete Homepage: http://extundelete.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/extundelete/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "10" ]; then
          echo -e $Color"Instalando Programa Foremost."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install foremost
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "10help" ]; then
          echo -e $BrancoBAD"Sobre Foremost:"$ColorR
          echo -e $Branco"O Foremost e um programa"$ColorR
          echo -e $Branco"forense para recuperar"$ColorR
          echo -e $Branco"arquivos perdidos com"$ColorR
          echo -e $Branco"base em seus cabecalhos,"$ColorR
          echo -e $Branco"rodapes e estruturas de dados internas."$ColorR
          echo -e $Branco"O primeiro pode trabalhar"$ColorR
          echo -e $Branco"em arquivos de imagem,"$ColorR
          echo -e $Branco"como aqueles gerados por dd, Safeback, Encase,"$ColorR
          echo -e $Branco"etc, ou diretamente em uma unidade."$ColorR
          echo -e $Branco"Os cabecalhos e rodapes"$ColorR
          echo -e $Branco"podem ser especificados"$ColorR
          echo -e $Branco"por um arquivo de configuracao ou voce pode"$ColorR
          echo -e $Branco"usar opcoes de linha de comando"$ColorR
          echo -e $Branco"para especificar tipos de arquivos internos."$ColorR
          echo -e $Branco"Esses tipos internos analisam as estruturas"$ColorR
          echo -e $Branco"de dados de um determinado"$ColorR
          echo -e $Branco"formato de arquivo, permitindo"$ColorR
          echo -e $Branco"uma recuperacao mais confiavel e rapida."$ColorR
          echo -e $Branco"$ foremost."$ColorR
          echo -e $BrancoBAD"Foremost Homepage: https://sourceforge.net/projects/foremost/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/foremost/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "11" ]; then
          echo -e $Color"Instalando Programa Galleta."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install galleta
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "11help" ]; then
          echo -e $BrancoBAD"Sobre Galleta:"$ColorR
          echo -e $Branco"Galleta e uma ferramenta forense que examina"$ColorR
          echo -e $Branco"o conteudo de arquivos de cookies produzidos"$ColorR
          echo -e $Branco"pelo Microsoft Internet Explorer (MSIE)."$ColorR
          echo -e $Branco"Ele analisa o arquivo e gera"$ColorR
          echo -e $Branco"um campo separado que"$ColorR
          echo -e $Branco"pode ser carregado em uma planilha."$ColorR
          echo -e $Branco"$ galleta."$ColorR
          echo -e $BrancoBAD"Galleta Homepage: http://odessa.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/galleta/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "12" ]; then
          echo -e $Color"Instalando Programa Guymager."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install guymager
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "12help" ]; then
          echo -e $BrancoBAD"Sobre Guymager:"$ColorR
          echo -e $Branco"O imager forense contido neste"$ColorR
          echo -e $Branco"pacote, guymager, foi projetado"$ColorR
          echo -e $Branco"para suportar diferentes"$ColorR
          echo -e $Branco"formatos de arquivo de imagem,"$ColorR
          echo -e $Branco"para ser mais facil de usar e rodar muito rapido."$ColorR
          echo -e $Branco"Possui um mecanismo multi-thread de alta velocidade"$ColorR
          echo -e $Branco"usando compressao paralela"$ColorR
          echo -e $Branco"para melhor desempenho"$ColorR
          echo -e $Branco"em maquinas multi-processador e hyper-threading."$ColorR
          echo -e $Branco"$ guymager."$ColorR
          echo -e $BrancoBAD"Guymager Homepage: http://guymager.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/guymager/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "13" ]; then
          echo -e $Color"Instalando Programa P0f."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install p0f
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "13help" ]; then
          echo -e $BrancoBAD"Sobre P0f:"$ColorR
          echo -e $Branco"O P0F realiza deteccao passiva"$ColorR
          echo -e $Branco"do sistema operacional"$ColorR
          echo -e $Branco"com base em pacotes Syn."$ColorR
          echo -e $Branco"Ao contrario do Nmap e Queso, o"$ColorR
          echo -e $Branco"P0F nao e o reconhecimento sem enviar dados."$ColorR
          echo -e $Branco"Alem disso, e capaz de determinar a distancia"$ColorR
          echo -e $Branco"para o host remoto e pode"$ColorR
          echo -e $Branco"ser usado para determinar"$ColorR
          echo -e $Branco"a estrutura de uma rede externa ou local."$ColorR
          echo -e $Branco"Ao executar no gateway de"$ColorR
          echo -e $Branco"uma rede, e capaz de coletar"$ColorR
          echo -e $Branco"grandes quantidades de dados"$ColorR
          echo -e $Branco"e fornecer estatisticas uteis."$ColorR
          echo -e $Branco"Em um computador com extremidade do"$ColorR
          echo -e $Branco"usuario, ele pode ser usado"$ColorR
          echo -e $Branco"como poderoso add-on IDS. O P0F suporta"$ColorR
          echo -e $Branco"expressoes de filtragem"$ColorR
          echo -e $Branco"de estilo tcpdump completo"$ColorR
          echo -e $Branco"e possui uma base de dados de"$ColorR
          echo -e $Branco"impressoes digitais extensiveis e detalhadas."$ColorR
          echo -e $Branco"$ p0f."$ColorR
          echo -e $BrancoBAD"P0f Homepage: http://lcamtuf.coredump.cx/p0f3/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/p0f/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "14" ]; then
          echo -e $Color"Instalando Programa Pdf-Parser."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install pdf-parser
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "14help" ]; then
          echo -e $BrancoBAD"Sobre Pdf-Parser:"$ColorR
          echo -e $Branco"Esta ferramenta analisara um documento PDF"$ColorR
          echo -e $Branco"para identificar os elementos"$ColorR
          echo -e $Branco"fundamentais usados no arquivo analisado."$ColorR
          echo -e $Branco"Ele nao renderizara um documento PDF."$ColorR
          echo -e $Branco"$ pdf-parser."$ColorR
          echo -e $BrancoBAD"Pdf-Parser Homepage: https://blog.didierstevens.com/programs/pdf-tools/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/pdf-parser/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "15" ]; then
          echo -e $Color"Instalando Programa PDFiD."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install pdfid
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "15help" ]; then
          echo -e $BrancoBAD"Sobre PDFiD:"$ColorR
          echo -e $Branco"Esta ferramenta nao e um analisador"$ColorR
          echo -e $Branco"de PDF, mas ira digitalizar um arquivo"$ColorR
          echo -e $Branco"para procurar determinadas"$ColorR
          echo -e $Branco"palavras-chave de PDF, permitindo"$ColorR
          echo -e $Branco"que voce identifique documentos PDF"$ColorR
          echo -e $Branco"que contenham (por exemplo) JavaScript"$ColorR
          echo -e $Branco"ou execute uma acao quando aberto."$ColorR
          echo -e $Branco"O PDFiD tambem lidara"$ColorR
          echo -e $Branco"com a ofuscacao de nomes."$ColorR
          echo -e $Branco"$ pdfid."$ColorR
          echo -e $BrancoBAD"Pdfid Homepage: https://blog.didierstevens.com/programs/pdf-tools/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/pdfid/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "16" ]; then
          echo -e $Color"Instalando Programa Xplico."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install xplico
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "16help" ]; then
          echo -e $BrancoBAD"Sobre Xplico:"$ColorR
          echo -e $Branco"O objetivo do Xplico e extrair"$ColorR
          echo -e $Branco"de uma captura de"$ColorR
          echo -e $Branco"trafego de internet os dados"$ColorR
          echo -e $Branco"dos aplicativos contidos."$ColorR
          echo -e $Branco"Por exemplo, de um arquivo"$ColorR
          echo -e $Branco"pcap, o Xplico extrai"$ColorR
          echo -e $Branco"cada e-mail (protocolos POP, IMAP e SMTP), todo o"$ColorR
          echo -e $Branco"conteudo HTTP, cada chamada"$ColorR
          echo -e $Branco"VoIP (SIP, MGCP, H323), FTP, TFTP"$ColorR
          echo -e $Branco"e assim por diante."$ColorR
          echo -e $Branco"Xplico nao e um analisador"$ColorR
          echo -e $Branco"de protocolo de rede."$ColorR
          echo -e $Branco"$ mfbc."$ColorR
          echo -e $Branco"$ mwmail."$ColorR
          echo -e $Branco"$ xplico-webui."$ColorR
          echo -e $Branco"$ mfile."$ColorR
          echo -e $Branco"$ trigcap."$ColorR
          echo -e $Branco"$ xplico-webui-stop."$ColorR
          echo -e $Branco"$ mpaltalk."$ColorR
          echo -e $Branco"$ xplico."$ColorR
          echo -e $BrancoBAD"Xplico Homepage: http://www.xplico.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/xplico/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "17" ]; then
          echo -e $Color"Instalando Programa Afflib-Tools."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install afflib-tools
          apt-get -y install libafflib-dev
          apt-get -y install libafflib0v5
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "17help" ]; then
          echo -e $BrancoBAD"Sobre Afflib-Tools:"$ColorR
          echo -e $Branco"O Advanced Forensic Format"$ColorR
          echo -e $Branco"(AFF) e um formato em disco"$ColorR
          echo -e $Branco"para armazenar informacoes forenses de computador."$ColorR
          echo -e $BrancoBAD"Os recursos criticos do AFF incluem:"$ColorR
          echo -e $Branco"O AFF permite armazenar"$ColorR
          echo -e $Branco"dados forenses de computador"$ColorR
          echo -e $Branco"e metadados associados em um ou mais arquivos."$ColorR
          echo -e $Branco"O AFF permite que os arquivos sejam assinados"$ColorR
          echo -e $Branco"digitalmente, para fornecer cadeia de custodia"$ColorR
          echo -e $Branco"e integridade de arquivos de longo prazo."$ColorR
          echo -e $Branco"O AFF permite que imagens de disco forenses"$ColorR
          echo -e $Branco"sejam armazenadas criptografadas e descriptografadas"$ColorR
          echo -e $Branco"em tempo real para processamento."$ColorR
          echo -e $Branco"Isso permite que imagens"$ColorR
          echo -e $Branco"de disco contendo material"$ColorR
          echo -e $Branco"sensivel a privacidade sejam armazenadas na Internet."$ColorR
          echo -e $Branco"Este pacote fornece o AFF Toolkit, que e um conjunto"$ColorR
          echo -e $Branco"de programas para trabalhar com"$ColorR
          echo -e $Branco"informacoes forenses de computador."$ColorR
          echo -e $BrancoBAD"Usando essas ferramentas Voce pode"$ColorR
          echo -e $BrancoBAD"Interconverta imagens de disco"$ColorR
          echo -e $Branco"entre varios formatos, incluindo:"$ColorR
          echo -e $Branco"bruto ou “dd”;"$ColorR
          echo -e $Branco"splitraw (no qual uma unica imagem"$ColorR
          echo -e $Branco"e dividida entre varios arquivos);"$ColorR
          echo -e $Branco"formato AFF (no qual toda a imagem do"$ColorR
          echo -e $Branco"disco e armazenada em um unico arquivo);"$ColorR
          echo -e $Branco"Formato AFD (no qual uma"$ColorR
          echo -e $Branco"imagem de disco e armazenada"$ColorR
          echo -e $Branco"em varios arquivos AFF"$ColorR
          echo -e $Branco"armazenados em um unico diretorio);"$ColorR
          echo -e $Branco"Formato AFM (no qual um arquivo AFF"$ColorR
          echo -e $Branco"e usado para anotar um arquivo bruto)."$ColorR
          echo -e $Branco"Compare imagens de disco e relate"$ColorR
          echo -e $Branco"os dados ou metadados que sao diferentes."$ColorR
          echo -e $Branco"Copie imagens de disco de um local"$ColorR
          echo -e $Branco"para outro, com verificacao"$ColorR
          echo -e $Branco"completa de dados, metadados"$ColorR
          echo -e $Branco"e geracao automatica de um"$ColorR
          echo -e $Branco"segmento de cadeia de custodia."$ColorR
          echo -e $Branco"Encontre erros em um arquivo AFF e corrija-os."$ColorR
          echo -e $Branco"Imprimir informacoes sobre um arquivo."$ColorR
          echo -e $Branco"Imprimir estatisticas detalhadas sobre um arquivo"$ColorR
          echo -e $Branco"Gere uma representacao"$ColorR
          echo -e $Branco"XML dos metadados de uma"$ColorR
          echo -e $Branco"imagem de disco (por exemplo, tempo de aquisicao"$ColorR
          echo -e $Branco"ou o numero de serie do dispositivo de aquisicao)."$ColorR
          echo -e $Branco"Produza um “diskprint” XML que permite que uma"$ColorR
          echo -e $Branco"imagem de disco seja rapidamente impressa sem"$ColorR
          echo -e $Branco"que o computador tenha o SHA1 de todo o disco."$ColorR
          echo -e $BrancoBAD"O AFF Toolkit fornece estes executaveis:"$ColorR
          echo -e $Branco"affcat, affcompare, affconvert, affcopy, affcrypto,"$ColorR
          echo -e $Branco"affdiskprint, affinfo, affix, affrecover, affsegment,"$ColorR
          echo -e $Branco"affsign, affstats, affuse, affverify e affxml."$ColorR
          echo -e $Branco"$ affcat."$ColorR
          echo -e $Branco"$ affcopy."$ColorR
          echo -e $Branco"$ affinfo."$ColorR
          echo -e $Branco"$ affsegment."$ColorR
          echo -e $Branco"$ affuse."$ColorR
          echo -e $Branco"$ affcompare."$ColorR
          echo -e $Branco"$ affcrypto."$ColorR
          echo -e $Branco"$ affix."$ColorR
          echo -e $Branco"$ affsign."$ColorR
          echo -e $Branco"$ affverify."$ColorR
          echo -e $Branco"$ affconvert."$ColorR
          echo -e $Branco"$ affdiskprint."$ColorR
          echo -e $Branco"$ affrecover."$ColorR
          echo -e $Branco"$ affstats."$ColorR
          echo -e $Branco"$ affxml."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/sshock/AFFLIBv3"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/afflib/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "18" ]; then
          echo -e $Color"Instalando Programa Apktool."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install apktool
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "18help" ]; then
          echo -e $BrancoBAD"Sobre Apktool:"$ColorR
          echo -e $Branco"Uma ferramenta para engenharia"$ColorR
          echo -e $Branco"reversa de aplicativos"$ColorR
          echo -e $Branco"Android binarios, fechados e de terceiros."$ColorR
          echo -e $Branco"Ele pode decodificar recursos"$ColorR
          echo -e $Branco"para a forma quase original e reconstrui-los"$ColorR
          echo -e $Branco"apos fazer algumas modificacoes;"$ColorR
          echo -e $Branco"torna possivel depurar"$ColorR
          echo -e $Branco"o codigo smali passo a passo."$ColorR
          echo -e $Branco"Tambem facilita o trabalho com um aplicativo"$ColorR
          echo -e $Branco"devido a estrutura de arquivos semelhante a"$ColorR
          echo -e $Branco"um projeto e a automacao de algumas tarefas"$ColorR
          echo -e $Branco"repetitivas, como a criacao de apk."$ColorR
          echo -e $Branco"$ apktool."$ColorR
          echo -e $BrancoBAD"Apktool Homepage: https://ibotpeaches.github.io/Apktool/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/apktool/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "19" ]; then
          echo -e $Color"Instalando Programa Autopsy."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install autopsy
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "19help" ]; then
          echo -e $BrancoBAD"Sobre Autopsy:"$ColorR
          echo -e $Branco"O Autopsy Forensic Browser"$ColorR
          echo -e $Branco"e uma interface grafica"$ColorR
          echo -e $Branco"para as ferramentas de analise forense"$ColorR
          echo -e $Branco"digital de linha de comando no The Sleuth Kit."$ColorR
          echo -e $Branco"Juntos, o Sleuth Kit e o Autopsy fornecem muitos"$ColorR
          echo -e $Branco"dos mesmos recursos que as ferramentas forenses"$ColorR
          echo -e $Branco"digitais comerciais para a analise de sistemas"$ColorR
          echo -e $Branco"de arquivos Windows e"$ColorR
          echo -e $Branco"UNIX (NTFS, FAT, FFS, EXT2FS e EXT3FS)."$ColorR
          echo -e $Branco"$ autopsy."$ColorR
          echo -e $BrancoBAD"Autopsy Homepage: https://www.sleuthkit.org/autopsy/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/autopsy/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "20" ]; then
          echo -e $Color"Instalando Programa Bytecode-Viewer."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install bytecode-viewer
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "20help" ]; then
          echo -e $BrancoBAD"Sobre Bytecode-Viewer:"$ColorR
          echo -e $Branco"Este pacote contem Bytecode Viewer (BCV)."$ColorR
          echo -e $Branco"E um Visualizador de Bytecode Java leve avancado,"$ColorR
          echo -e $Branco"GUI Java Decompiler, GUI Bytecode Editor, GUI Smali,"$ColorR
          echo -e $Branco"GUI Baksmali, GUI APK Editor, GUI Dex Editor,"$ColorR
          echo -e $Branco"GUI APK Decompiler, GUI DEX Decompiler,"$ColorR
          echo -e $Branco"GUI Procyon Java Decompiler,"$ColorR
          echo -e $Branco"GUI Krakatau, GUI CFR Java"$ColorR
          echo -e $Branco"Decompiler, GUI FernFlower"$ColorR
          echo -e $Branco"Java Decompiler, GUI DEX2Jar, GUI Jar2DEX, GUI Jar-Jar,"$ColorR
          echo -e $Branco"Hex Viewer, Code Searcher, Debugger e muito mais."$ColorR
          echo -e $Branco"Ha tambem um sistema"$ColorR
          echo -e $Branco"de plug-ins que permitira"$ColorR
          echo -e $Branco"que voce interaja com os arquivos de classe"$ColorR
          echo -e $Branco"carregados, por exemplo, voce pode escrever"$ColorR
          echo -e $Branco"um desofuscador de String, um buscador de codigo"$ColorR
          echo -e $Branco"malicioso ou qualquer outra"$ColorR
          echo -e $Branco"coisa que voce possa imaginar."$ColorR
          echo -e $Branco"Voce pode usar um dos plugins"$ColorR
          echo -e $Branco"pre-escritos ou escrever o seu proprio."$ColorR
          echo -e $Branco"Ele suporta scripts groovy."$ColorR
          echo -e $Branco"Uma vez que um plugin"$ColorR
          echo -e $Branco"e ativado, ele irs executar"$ColorR
          echo -e $Branco"o plugin com um ClassNode ArrayList de cada"$ColorR
          echo -e $Branco"classe carregada no BCV, isso permite que"$ColorR
          echo -e $Branco"o usuario lide com ele completamente usando o ASM."$ColorR
          echo -e $Branco"Atualmente esta sendo mantido"$ColorR
          echo -e $Branco"e desenvolvido pela Konloch."$ColorR
          echo -e $Branco"$ bytecode-viewer."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/Konloch/bytecode-viewer"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/bytecode-viewer/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "21" ]; then
          echo -e $Color"Instalando Programa Cabextract."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cabextract
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "21help" ]; then
          echo -e $BrancoBAD"Sobre Cabextract:"$ColorR
          echo -e $Branco"Cabextract e um programa que descompacta arquivos"$ColorR
          echo -e $Branco"de gabinete (.cab), que sao uma forma de arquivo"$ColorR
          echo -e $Branco"que a Microsoft usa para distribuir"$ColorR
          echo -e $Branco"seu software e coisas como Windows Font Packs."$ColorR
          echo -e $Branco"$ cabextract."$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cabextract/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "22" ]; then
          echo -e $Color"Instalando Programa Chkrootkit."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install chkrootkit
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "22help" ]; then
          echo -e $BrancoBAD"Sobre Chkrootkit:"$ColorR
          echo -e $Branco"O scanner de seguranca"$ColorR
          echo -e $Branco"chkrootkit procura sinais"$ColorR
          echo -e $Branco"de que o sistema esta infectado com um “rootkit”."$ColorR
          echo -e $Branco"Os rootkits sao uma forma"$ColorR
          echo -e $Branco"de malware que busca explorar"$ColorR
          echo -e $Branco"falhas de seguranca"$ColorR
          echo -e $Branco"para conceder acesso nao autorizado"$ColorR
          echo -e $Branco"a um computador ou seus"$ColorR
          echo -e $Branco"servicos, geralmente para fins maliciosos."$ColorR
          echo -e $Branco"O chkrootkit pode identificar sinais de mais"$ColorR
          echo -e $Branco"de 70 rootkits diferentes"$ColorR
          echo -e $Branco"(consulte o site do projeto para obter uma lista)."$ColorR
          echo -e $Branco"Observe que uma ferramenta automatizada como"$ColorR
          echo -e $Branco"o chkrootkit nunca pode"$ColorR
          echo -e $Branco"garantir que um sistema nao seja comprometido."$ColorR
          echo -e $Branco"Nem todo relatorio sempre significa um problema genuino:"$ColorR
          echo -e $Branco"julgamento humano"$ColorR
          echo -e $Branco"e investigacao adicional sempre"$ColorR
          echo -e $Branco"serao necessarios para garantir a seguranca do seu sistema."$ColorR
          echo -e $Branco"$ chklastlog."$ColorR
          echo -e $Branco"$ chkrootkit."$ColorR
          echo -e $Branco"$ chkwtmp."$ColorR
          echo -e $BrancoBAD"Chkrootkit Homepage: http://www.chkrootkit.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/chkrootkit/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "23" ]; then
          echo -e $Color"Instalando Programa Creddump7."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install creddump7
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "23help" ]; then
          echo -e $BrancoBAD"Sobre Creddump7:"$ColorR
          echo -e $Branco"Este pacote contem uma ferramenta Python"$ColorR
          echo -e $Branco"para extrair varias credenciais ed"$ColorR
          echo -e $Branco"segredos das secoes de registro do Windows."$ColorR
          echo -e $Branco"E baseado no programa creddump."$ColorR
          echo -e $Branco"Muitos patches e correcoes foram"$ColorR
          echo -e $Branco"aplicados por Ronnie Flaters."$ColorR
          echo -e $Branco"$ creddump7."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/Neohapsis/creddump7"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/creddump7/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "24" ]; then
          echo -e $Color"Instalando Programa Dcfldd."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dcfldd
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "24help" ]; then
          echo -e $Branco"Sobre Dcfldd:"$ColorR
          echo -e $Branco"O dcfldd foi desenvolvido"$ColorR
          echo -e $Branco"inicialmente no Laboratorio"$ColorR
          echo -e $Branco"de Forense Computacional do Departamento de Defesa (DCFL)."$ColorR
          echo -e $BrancoBAD"Esta ferramenta e baseada no"$ColorR
          echo -e $BrancoBAD"programa dd com os seguintes recursos adicionais:"$ColorR
          echo -e $Branco"* Hashing on-the-fly: o dcfldd pode fazer"$ColorR
          echo -e $Branco"o hash dos dados de entrada a medida que sao"$ColorR
          echo -e $Branco"transferidos, ajudando a garantir a integridade dos dados."$ColorR
          echo -e $Branco"* Saida de status: o dcfldd pode atualizar"$ColorR
          echo -e $Branco"o usuario sobre seu progresso em termos"$ColorR
          echo -e $Branco"da quantidade de dados transferidos e"$ColorR
          echo -e $Branco"quanto tempo a operacao levara."$ColorR
          echo -e $Branco"* Limpezas de disco flexiveis: dcfldd"$ColorR
          echo -e $Branco"pode ser usado para limpar discos rapidamente"$ColorR
          echo -e $Branco"e com um padrao conhecido, se desejado."$ColorR
          echo -e $Branco"* Verificacao de imagem/limpeza:"$ColorR
          echo -e $Branco"o dcfldd pode verificar se uma unidade"$ColorR
          echo -e $Branco"de destino e uma correspondencia bit a bit"$ColorR
          echo -e $Branco"do arquivo ou padrao de entrada especificado."$ColorR
          echo -e $Branco"* Multiplas saidas:"$ColorR
          echo -e $Branco"o dcfldd pode produzir varios"$ColorR
          echo -e $Branco"arquivos ou discos ao mesmo tempo."$ColorR
          echo -e $Branco"* Saida dividida:"$ColorR
          echo -e $Branco"o dcfldd pode dividir a saida em varios arquivos"$ColorR
          echo -e $Branco"com mais capacidade de configuracao"$ColorR
          echo -e $Branco"do que o comando split."$ColorR
          echo -e $Branco"* Saida e logs canalizados:"$ColorR
          echo -e $Branco"o dcfldd pode enviar todos os seus dados"$ColorR
          echo -e $Branco"de log e saida para comandos, bem"$ColorR
          echo -e $Branco"como arquivos nativamente."$ColorR
          echo -e $Branco"* Quando dd usa um tamanho de bloco padrao (bs, ibs, obs)"$ColorR
          echo -e $Branco"de 512 bytes, dcfldd usa 32768 bytes (32 KiB),"$ColorR
          echo -e $Branco"o que e ENORMEMENTE mais eficiente."$ColorR
          echo -e $Branco"* As seguintes opcoes estao presentes"$ColorR
          echo -e $Branco"em dcfldd, mas nao em dd: ALGORITHMlog:, errlog,"$ColorR
          echo -e $Branco"hash, hashconv, hashformat, hashlog, hashlog:,"$ColorR
          echo -e $Branco"hashwindow, limit, of:, pattern,"$ColorR
          echo -e $Branco"sizeprobe, split, splitformat,"$ColorR
          echo -e $Branco"statusinterval, textpattern, totalhashformat,"$ColorR
          echo -e $Branco"Verifylog, verifiquelog:, vf."$ColorR
          echo -e $Branco"$ dcfldd."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/resurrecting-open-source-projects/dcfldd"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dcfldd/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "25" ]; then
          echo -e $Color"Instalando Programa Edb-Debugger."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install edb-debugger
          apt-get -y install edb-debugger-plugins
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "25help" ]; then
          echo -e $BrancoBAD"Sobre Edb-Debugger:"$ColorR
          echo -e $Branco"edb e um depurador grafico multiplataforma x86/x86-64."$ColorR
          echo -e $Branco"Foi inspirado no Ollydbg, mas tem como objetivo"$ColorR
          echo -e $Branco"funcionar em x86 e x86-64, bem"$ColorR
          echo -e $Branco"como em varios sistemas operacionais."$ColorR
          echo -e $Branco"Linux e a unica plataforma oficialmente suportada"$ColorR
          echo -e $Branco"no momento, mas as portas FreeBSD,"$ColorR
          echo -e $Branco"OpenBSD, OSX e Windows estao"$ColorR
          echo -e $Branco"em andamento com varios graus"$ColorR
          echo -e $Branco"de funcionalidade."$ColorR
          echo -e $Branco"$ edb."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/eteran/edb-debugger"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/edb-debugger/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "26" ]; then
          echo -e $Color"Instalando Programa Ewf-Tools."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ewf-tools
          apt-get -y install libewf-dev
          apt-get -y install libewf2
          apt-get -y install python3-libewf
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "26help" ]; then
          echo -e $BrancoBAD"Sobre Ewf-Tools:"$ColorR
          echo -e $Branco"Libewf e uma biblioteca com suporte"$ColorR
          echo -e $Branco"para leitura e escrita do Expert"$ColorR
          echo -e $Branco"Witness Compression Format (EWF)."$ColorR
          echo -e $Branco"Essa biblioteca permite que voce"$ColorR
          echo -e $Branco"leia as informacoes de midia"$ColorR
          echo -e $Branco"de arquivos EWF no formato SMART"$ColorR
          echo -e $Branco"(EWF-S01) e no formato EnCase (EWF-E01)."$ColorR
          echo -e $Branco"Suporta arquivos criados"$ColorR
          echo -e $Branco"pelo EnCase 1 a 6, linho e FTK Imager."$ColorR
          echo -e $Branco"O libewf e util para investigacoes forenses."$ColorR
          echo -e $Branco"$ ewfacquire."$ColorR
          echo -e $Branco"$ ewfexport."$ColorR
          echo -e $Branco"$ ewfrecover."$ColorR
          echo -e $Branco"$ ewfacquirestream."$ColorR
          echo -e $Branco"$ ewfinfo."$ColorR
          echo -e $Branco"$ ewfverify."$ColorR
          echo -e $Branco"$ ewfdebug."$ColorR
          echo -e $Branco"$ ewfmount."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/libyal/libewf-legacy"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/libewf/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "27" ]; then
          echo -e $Color"Instalando Programa Exifprobe."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install exifprobe
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "27help" ]; then
          echo -e $BrancoBAD"Sobre Exifprobe:"$ColorR
          echo -e $Branco"O Exifprobe le arquivos de imagem produzidos"$ColorR
          echo -e $Branco"por cameras digitais"$ColorR
          echo -e $Branco"(incluindo varios formatos de arquivo chamados “brutos”)"$ColorR
          echo -e $Branco"e relata a estrutura dos arquivos"$ColorR
          echo -e $Branco"e os dados auxiliares"$ColorR
          echo -e $Branco"e metadados contidos neles."$ColorR
          echo -e $Branco"Alem de TIFF, JPEG e EXIF,"$ColorR
          echo -e $Branco"o programa compreende varios formatos"$ColorR
          echo -e $Branco"que podem conter dados"$ColorR
          echo -e $Branco"de camera “brutos”, incluindo MRW,"$ColorR
          echo -e $Branco"CIFF/CRW, JP2/JPEG2000, RAF e X3F,"$ColorR
          echo -e $Branco"bem como a maioria"$ColorR
          echo -e $Branco"dos formatos “brutos” derivados"$ColorR
          echo -e $Branco"de TIFF, incluindo DNG, ORF,"$ColorR
          echo -e $Branco"CR2, NEF, K25/KDC/DCR e PEF."$ColorR
          echo -e $Branco"Este programa e util em investigacoes forenses."$ColorR
          echo -e $Branco"$ exifgrep."$ColorR
          echo -e $Branco"$ exifprobe."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/hfiguiere/exifprobe"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/exifprobe/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "28" ]; then
          echo -e $Color"Instalando Programa Exiv2."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install exiv2
          apt-get -y install libexiv2-27
          apt-get -y install libexiv2-dev
          apt-get -y install libexiv2-doc
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "28help" ]; then
          echo -e $BrancoBAD"Sobre Exiv2:"$ColorR
          echo -e $Branco"Exiv2 e uma biblioteca C++"$ColorR
          echo -e $Branco"e um utilitario de linha de comando"$ColorR
          echo -e $Branco"para gerenciar metadados de imagem."$ColorR
          echo -e $Branco"Ele fornece acesso rapido e facil"$ColorR
          echo -e $Branco"de leitura e gravacao aos"$ColorR
          echo -e $Branco"metadados Exif, IPTC e XMP"$ColorR
          echo -e $Branco"de imagens em varios formatos"$ColorR
          echo -e $BrancoBAD"Utilitario de linha de comando Exiv2 para:"$ColorR
          echo -e $Branco"* imprimir metadados de imagem Exif,"$ColorR
          echo -e $Branco"IPTC e XMP em diferentes formatos:"$ColorR
          echo -e $Branco"* Informacoes de resumo Exif, valores interpretados"$ColorR
          echo -e $Branco"ou dados simples para cada tag"$ColorR
          echo -e $Branco"* definir, adicionar e excluir"$ColorR
          echo -e $Branco"metadados de imagem Exif, IPTC e XMP"$ColorR
          echo -e $Branco"de comandos de modificacao de linha"$ColorR
          echo -e $Branco"de comando ou scripts de comando"$ColorR
          echo -e $Branco"* ajuste o timestamp Exif (foi assim que tudo comecou…)"$ColorR
          echo -e $Branco"* renomear arquivos de imagem Exif"$ColorR
          echo -e $Branco"de acordo com o timestamp Exif"$ColorR
          echo -e $Branco"* extrair, inserir e excluir metadados"$ColorR
          echo -e $Branco"Exif, IPTC e XMP e comentarios JPEG"$ColorR
          echo -e $Branco"* extrair visualizacoes de imagens RAW"$ColorR
          echo -e $Branco"e miniaturas dos metadados Exif"$ColorR
          echo -e $Branco"* insira e exclua a imagem em miniatura"$ColorR
          echo -e $Branco"incorporada nos metadados Exif"$ColorR
          echo -e $Branco"* imprimir, definir e excluir"$ColorR
          echo -e $Branco"o comentario JPEG de imagens JPEG"$ColorR
          echo -e $Branco"* corrigir a configuracao Exif ISO"$ColorR
          echo -e $Branco"da foto tirada com cameras Canon e Nikon"$ColorR
          echo -e $Branco"$ exiv2."$ColorR
          echo -e $BrancoBAD"Exiv2 Homepage: https://www.exiv2.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/exiv2/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "29" ]; then
          echo -e $Color"Instalando Programa Ext3grep."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ext3grep
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "29help" ]; then
          echo -e $BrancoBAD"Sobre Ext3grep:"$ColorR
          echo -e $Branco"O ext3grep e uma ferramenta simples destinada"$ColorR
          echo -e $Branco"a ajudar qualquer pessoa"$ColorR
          echo -e $Branco"que acidentalmente exclua um arquivo"$ColorR
          echo -e $Branco"em um sistema de arquivos ext3, apenas"$ColorR
          echo -e $Branco"para descobrir que o queria"$ColorR
          echo -e $Branco"logo em seguida."$ColorR
          echo -e $Branco"Este pacote e util em investigacoes forenses."$ColorR
          echo -e $Branco"$ ext3grep."$ColorR
          echo -e $BrancoBAD"Ext3grep Homepage: https://code.google.com/archive/p/ext3grep/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ext3grep/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "30" ]; then
          echo -e $Color"Instalando Programa Ext4magic."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ext4magic
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "30help" ]; then
          echo -e $BrancoBAD"Sobre Ext4magic:"$ColorR
          echo -e $Branco"ext4magic e um escultor de arquivos"$ColorR
          echo -e $Branco"(ou escultura de arquivos)."$ColorR
          echo -e $Branco"Ele pode ser usado na recuperacao de"$ColorR
          echo -e $Branco"desastres ou em atividades forenses digitais."$ColorR
          echo -e $Branco"A exclusao de arquivos em sistemas de arquivos"$ColorR
          echo -e $Branco"ext3/4 nao pode ser facilmente revertida."$ColorR
          echo -e $Branco"Zero fora das referencias de bloco"$ColorR
          echo -e $Branco"nos inodes torna isso impossivel."$ColorR
          echo -e $Branco"Experiencias com outros programas"$ColorR
          echo -e $Branco"provaram que e possivel restaurar informacoes"$ColorR
          echo -e $Branco"suficientes para a recuperacao"$ColorR
          echo -e $Branco"de muitos arquivos de dados, diretamente"$ColorR
          echo -e $Branco"do diario do sistema de arquivos."$ColorR
          echo -e $Branco"O ext4magic pode extrair as informacoes"$ColorR
          echo -e $Branco"do diario e restaurar arquivos em uma arvore"$ColorR
          echo -e $Branco"de diretorios inteira, se as informacoes"$ColorR
          echo -e $Branco"no diario forem suficientes."$ColorR
          echo -e $Branco"Esta ferramenta pode recuperar a maioria"$ColorR
          echo -e $Branco"dos tipos de arquivos, com nome"$ColorR
          echo -e $Branco"de arquivo original, proprietario"$ColorR
          echo -e $Branco"e grupo, bits de modo de arquivo"$ColorR
          echo -e $Branco"e tambem os antigos carimbos atime/mtime."$ColorR
          echo -e $Branco"$ ext4magic."$ColorR
          echo -e $BrancoBAD"Ext4magic Homepage: http://ext4magic.sf.net/ext4magic_en.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ext4magic/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "31" ]; then
          echo -e $Color"Instalando Programa Fcrackzip."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install fcrackzip
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "31help" ]; then
          echo -e $BrancoBAD"Sobre Fcrackzip:"$ColorR
          echo -e $Branco"fcrackzip e um cracker de senha rapido"$ColorR
          echo -e $Branco"parcialmente escrito em assembler."$ColorR
          echo -e $Branco"Ele e capaz de quebrar arquivos zip protegidos"$ColorR
          echo -e $Branco"por senha com forca bruta ou ataques"$ColorR
          echo -e $Branco"baseados em dicionario, opcionalmente"$ColorR
          echo -e $Branco"testando com descompactar seus resultados."$ColorR
          echo -e $Branco"Ele tambem pode quebrar imagens com cpmask."$ColorR
          echo -e $Branco"Este pacote e util para pentesters, hackers eticos"$ColorR
          echo -e $Branco"e especialistas forenses."$ColorR
          echo -e $Branco"$ fcrackzip."$ColorR
          echo -e $Branco"$ fcrackzipinfo."$ColorR
          echo -e $BrancoBAD"Fcrackzip Homepage: http://oldhome.schmorp.de/marc/fcrackzip.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/fcrackzip/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "32" ]; then
          echo -e $Color"Instalando Programa Forensic-Artifacts."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install forensic-artifacts
          apt-get -y install python3-artifacts
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "32help" ]; then
          echo -e $BrancoBAD"Sobre Forensic-Artifacts:"$ColorR
          echo -e $Branco"Uma base de conhecimento"$ColorR
          echo -e $Branco"gratuita, de origem comunitaria"$ColorR
          echo -e $Branco"e legivel por maquina de artefatos forenses"$ColorR
          echo -e $Branco"que o mundo pode usar tanto"$ColorR
          echo -e $Branco"como fonte de informacoes"$ColorR
          echo -e $Branco"quanto em outras ferramentas."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/ForensicArtifacts/artifacts"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/forensic-artifacts/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "33" ]; then
          echo -e $Color"Instalando Programa Forensics-Colorize."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install forensics-colorize
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "33help" ]; then
          echo -e $BrancoBAD"Sobre Forensics-Colorize:"$ColorR
          echo -e $Branco"forense-colorize e um"$ColorR
          echo -e $Branco"conjunto de ferramentas"$ColorR
          echo -e $Branco"para comparar visualmente"$ColorR
          echo -e $Branco"arquivos grandes, como imagens"$ColorR
          echo -e $Branco"do sistema de arquivos, criando graficos deles."$ColorR
          echo -e $Branco"E intuitivo porque os graficos produzidos"$ColorR
          echo -e $Branco"fornecem uma nocao rapida e perfeita"$ColorR
          echo -e $Branco"sobre a porcentagem de alteracoes"$ColorR
          echo -e $Branco"entre dois arquivos."$ColorR
          echo -e $Branco"Comparar arquivos de texto grandes usando"$ColorR
          echo -e $Branco"um diff simples pode produzir"$ColorR
          echo -e $Branco"um resultado muito grande"$ColorR
          echo -e $Branco"em linhas, causando confusao."$ColorR
          echo -e $Branco"Por outro lado, diff e improprio"$ColorR
          echo -e $Branco"para comparar arquivos binarios."$ColorR
          echo -e $Branco"Este pacote fornece dois programas"$ColorR
          echo -e $Branco"de linha de comando: filecompare e colorize."$ColorR
          echo -e $Branco"O comando filecompare e usado"$ColorR
          echo -e $Branco"para criar um arquivo de entrada"$ColorR
          echo -e $Branco"especial e auxiliar para colorizar."$ColorR
          echo -e $Branco"O comando colorize gerara um grafico"$ColorR
          echo -e $Branco"intuitivo que facilitara a percepcao"$ColorR
          echo -e $Branco"do nivel de mudancas entre os arquivos."$ColorR
          echo -e $Branco"$ colorize."$ColorR
          echo -e $Branco"$ filecompare."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/jessek/colorize"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/forensics-colorize/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "34" ]; then
          echo -e $Color"Instalando Programa GDB."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install gdb
          apt-get -y install gdb-minimal
          apt-get -y install gdb-multiarch
          apt-get -y install gdb-source
          apt-get -y install gdbserver
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "34help" ]; then
          echo -e $BrancoBAD"Sobre GDB:"$ColorR
          echo -e $Branco"GDB e um depurador de nivel de fonte, capaz"$ColorR
          echo -e $Branco"de quebrar programas em qualquer"$ColorR
          echo -e $Branco"linha especifica, exibir valores de variaveis"$ColorR
          echo -e $Branco"e determinar onde ocorreram erros."$ColorR
          echo -e $Branco"Atualmente, o gdb suporta C, C++,"$ColorR
          echo -e $Branco"D, Objective-C, Fortran, Java,"$ColorR
          echo -e $Branco"OpenCL C, Pascal, assembly,"$ColorR
          echo -e $Branco"Modula-2, Go e Ada."$ColorR
          echo -e $Branco"Um must-have para qualquer"$ColorR
          echo -e $Branco"programador serio."$ColorR
          echo -e $Branco"$ gcore."$ColorR
          echo -e $Branco"$ gdb."$ColorR
          echo -e $Branco"$ gdb-add-index."$ColorR
          echo -e $Branco"$ gdbtui."$ColorR
          echo -e $Branco"$ gdb-multiarch."$ColorR
          echo -e $Branco"$ gdbserver."$ColorR
          echo -e $BrancoBAD"GDB Homepage: https://www.gnu.org/s/gdb/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/gdb/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "35" ]; then
          echo -e $Color"Instalando Programa Gpart."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install gpart
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "35help" ]; then
          echo -e $BrancoBAD"Sobre Gpart:"$ColorR
          echo -e $Branco"Gpart e uma ferramenta que tenta"$ColorR
          echo -e $Branco"adivinhar a tabela de particao primaria"$ColorR
          echo -e $Branco"de um disco tipo PC caso a tabela"$ColorR
          echo -e $Branco"de particao primaria no setor"$ColorR
          echo -e $Branco"0 esteja danificada, incorreta ou excluida."$ColorR
          echo -e $Branco"Tambem e bom para localizar e listar"$ColorR
          echo -e $Branco"os tipos, locais e tamanhos de particoes excluidas"$ColorR
          echo -e $Branco"inadvertidamente, tanto primarias quanto logicas."$ColorR
          echo -e $Branco"Ele fornece as informacoes necessarias"$ColorR
          echo -e $Branco"para recria-los manualmente"$ColorR
          echo -e $Branco"(usando fdisk, cfdisk, sfdisk, etc.)."$ColorR
          echo -e $Branco"A tabela adivinhada tambem pode ser gravada"$ColorR
          echo -e $Branco"em um arquivo ou (se voce acredita firmemente"$ColorR
          echo -e $Branco"que a tabela adivinhada esta totalmente correta)"$ColorR
          echo -e $Branco"diretamente em um dispositivo de disco."$ColorR
          echo -e $BrancoBAD"Tipos de sistema de arquivos"$ColorR
          echo -e $BrancoBAD"ou particao atualmente suportados (adivinhados):"$ColorR
          echo -e $Branco"* Tipo de sistema de arquivos BeOS."$ColorR
          echo -e $Branco"* Tipo de sistema de arquivos BtrFS."$ColorR
          echo -e $Branco"* Esquema de sub-particionamento de rotulo de"$ColorR
          echo -e $Branco"disco do FreeBSD/NetBSD/386BSD usado em plataformas Intel."$ColorR
          echo -e $Branco"* Linux segundo sistema de arquivos estendido (Ext2)."$ColorR
          echo -e $Branco"* MS-DOS FAT12, FAT16 e FAT32 “sistemas de arquivos”."$ColorR
          echo -e $Branco"* Sistema de arquivos de alto desempenho IBM OS/2."$ColorR
          echo -e $Branco"* Volumes fisicos Linux LVM e LVM2."$ColorR
          echo -e $Branco"* Particoes de swap do Linux (versoes 0 e 1)."$ColorR
          echo -e $Branco"* O tipo de sistema de arquivos do sistema operacional Minix."$ColorR
          echo -e $Branco"* Sistema de arquivos MS Windows NT/2000."$ColorR
          echo -e $Branco"* Sistema de arquivos QNX 4.x."$ColorR
          echo -e $Branco"* O sistema de arquivos Reiser (versao 3.5.X, X > 11)."$ColorR
          echo -e $Branco"* O Sun Solaris nas plataformas Intel"$ColorR
          echo -e $Branco"usa um esquema de subparticionamento"$ColorR
          echo -e $Branco"em discos rigidos de PC"$ColorR
          echo -e $Branco"semelhante aos rotulos de disco BSD."$ColorR
          echo -e $Branco"* Sistema de arquivos"$ColorR
          echo -e $Branco"com diario da Silicon Graphics para Linux."$ColorR
          echo -e $Branco"O Gpart e util em acoes de"$ColorR
          echo -e $Branco"recuperacao e investigacoes forenses."$ColorR
          echo -e $Branco"$ gpart."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/baruch/gpart"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/gpart/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "36" ]; then
          echo -e $Color"Instalando Programa GParted."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install gparted
          apt-get -y install gparted-common
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "36help" ]; then
          echo -e $BrancoBAD"Sobre GParted:"$ColorR
          echo -e $Branco"O GParted usa libparted"$ColorR
          echo -e $Branco"para detectar e manipular dispositivos"$ColorR
          echo -e $Branco"e tabelas de particao, enquanto varias ferramentas"$ColorR
          echo -e $Branco"de sistema de arquivos (opcionais)"$ColorR
          echo -e $Branco"fornecem suporte para sistemas"$ColorR
          echo -e $Branco"de arquivos nao incluidos no libparted."$ColorR
          echo -e $Branco"$ gparted."$ColorR
          echo -e $BrancoBAD"GParted Homepage: https://gparted.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/gparted/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "37" ]; then
          echo -e $Color"Instalando Programa GrokEVT."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install grokevt
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "37help" ]; then
          echo -e $BrancoBAD"Sobre GrokEVT:"$ColorR
          echo -e $Branco"GrokEVT e uma colecao de scripts"$ColorR
          echo -e $Branco"construidos para ler arquivos de log"$ColorR
          echo -e $Branco"de eventos do"$ColorR
          echo -e $Branco"Microsoft Windows NT/2000/XP/2003."$ColorR
          echo -e $Branco"Atualmente, os scripts trabalham juntos"$ColorR
          echo -e $Branco"em uma ou mais particoes montadas"$ColorR
          echo -e $Branco"do Microsoft Windows para extrair todas"$ColorR
          echo -e $Branco"as informacoes necessarias (entradas de registro,"$ColorR
          echo -e $Branco"modelos de mensagem e arquivos de log)"$ColorR
          echo -e $Branco" para converter os logs em um formato legivel."$ColorR
          echo -e $Branco"Este programa e util em investigacoes forenses."$ColorR
          echo -e $Branco"$ grokevt-addlog."$ColorR
          echo -e $Branco"$ grokevt-findlogs."$ColorR
          echo -e $Branco"$ grokevt-builddb."$ColorR
          echo -e $Branco"$ grokevt-parselog."$ColorR
          echo -e $Branco"$ grokevt-dumpmsgs."$ColorR
          echo -e $Branco"$ grokevt-ripdll."$ColorR
          echo -e $BrancoBAD"GrokEVT Homepage: http://projects.sentinelchicken.org/grokevt/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/grokevt/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "38" ]; then
          echo -e $Color"Instalando Programa Hashdeep."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hashdeep
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "38help" ]; then
          echo -e $BrancoBAD"Sobre Hashdeep:"$ColorR
          echo -e $Branco"hashdeep e um conjunto de ferramentas"$ColorR
          echo -e $Branco"para calcular hashsums MD5, SHA1,"$ColorR
          echo -e $Branco"SHA256, tigre e redemoinho de um"$ColorR
          echo -e $Branco"numero arbitrario de arquivos recursivamente."$ColorR
          echo -e $BrancoBAD"Os principais recursos do hashdeep sao:"$ColorR
          echo -e $Branco"* Ele pode comparar esses hashsums"$ColorR
          echo -e $Branco"com uma lista de hashes conhecidos;"$ColorR
          echo -e $Branco"* As ferramentas podem exibir as"$ColorR
          echo -e $Branco"que correspondem a lista ou as que nao correspondem;"$ColorR
          echo -e $Branco"* Ele pode exibir uma estimativa"$ColorR
          echo -e $Branco"de tempo ao processar arquivos grandes."$ColorR
          echo -e $Branco"Ele pode fazer hash por partes"$ColorR
          echo -e $Branco"(arquivos de entrada de hash em blocos de tamanho arbitrario)."$ColorR
          echo -e $Branco"Este pacote e util em investigacoes forenses"$ColorR
          echo -e $Branco"$ hashdeep."$ColorR
          echo -e $Branco"$ sha256deep."$ColorR
          echo -e $Branco"$ md5deep."$ColorR
          echo -e $Branco"$ tigerdeep."$ColorR
          echo -e $Branco"$ sha1deep."$ColorR
          echo -e $Branco"$ whirlpooldeep."$ColorR
          echo -e $BrancoBAD"Hashdeep Homepage: http://md5deep.sf.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hashdeep/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "39" ]; then
          echo -e $Color"Instalando Programa INetSim."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install inetsim
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "39help" ]; then
          echo -e $BrancoBAD"Sobre INetSim:"$ColorR
          echo -e $Branco"INetSim e um pacote de software"$ColorR
          echo -e $Branco"para simular servicos comuns"$ColorR
          echo -e $Branco"de internet em um ambiente"$ColorR
          echo -e $Branco"de laboratorio, por exemplo."$ColorR
          echo -e $Branco"para analisar o comportamento da rede"$ColorR
          echo -e $Branco"de amostras de malware desconhecidas."$ColorR
          echo -e $Branco"INetSim suporta simulacao dos"$ColorR
          echo -e $Branco"seguintes servicos: HTTP, SMTP, POP3,"$ColorR
          echo -e $Branco"DNS, FTP, NTP, TFTP, IRC, Ident,"$ColorR
          echo -e $Branco"Finger, Syslog, “Small servers”"$ColorR
          echo -e $Branco"(Daytime, Time, Echo, Chargen,"$ColorR
          echo -e $Branco"Discard, Quotd)"$ColorR
          echo -e $BrancoBAD"Caracteristicas adicionais:"$ColorR
          echo -e $Branco"* Faketime."$ColorR
          echo -e $Branco"* Redirecionamento de conexao."$ColorR
          echo -e $Branco"* Logs e relatorios detalhados."$ColorR
          echo -e $Branco"* Suporte TLS/SSL para varios servicos."$ColorR
          echo -e $Branco"$ inetsim."$ColorR
          echo -e $BrancoBAD"INetSim Homepage: https://www.inetsim.org/index.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/inetsim/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "40" ]; then
          echo -e $Color"Instalando Programa Jadx."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install jadx
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "40help" ]; then
          echo -e $BrancoBAD"Sobre Jadx:"$ColorR
          echo -e $Branco"Este pacote contem um descompilador"$ColorR
          echo -e $Branco"Dex para Java."$ColorR
          echo -e $Branco"Ele contem uma linha de comando"$ColorR
          echo -e $Branco"e ferramentas GUI para produzir"$ColorR
          echo -e $Branco"codigo-fonte Java a partir"$ColorR
          echo -e $Branco"de arquivos Android Dex e Apk."$ColorR
          echo -e $Branco"Principais caracteristicas: - descompilar"$ColorR
          echo -e $Branco"o bytecode Dalvik para classes"$ColorR
          echo -e $Branco"java de arquivos APK, dex, aar"$ColorR
          echo -e $Branco"e zip - decodificar AndroidManifest.xml"$ColorR
          echo -e $Branco"e outros recursos de resources.arsc - deobfuscator incluido"$ColorR
          echo -e $Branco"Recursos do jadx-gui: - visualizar"$ColorR
          echo -e $Branco"codigo descompilado com sintaxe"$ColorR
          echo -e $Branco"destacada - pular para declaracao - localizar"$ColorR
          echo -e $Branco"uso - pesquisa de texto completo"$ColorR
          echo -e $Branco"$ jadx."$ColorR
          echo -e $Branco"$ jadx-gui."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/skylot/jadx"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/jadx/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "41" ]; then
          echo -e $Color"Instalando Programa JavaSnoop."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install javasnoop
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "41help" ]; then
          echo -e $BrancoBAD"Sobre JavaSnoop:"$ColorR
          echo -e $Branco"Normalmente, sem acesso ao"$ColorR
          echo -e $Branco"codigo-fonte original, testar"$ColorR
          echo -e $Branco"a seguranca de um cliente Java e imprevisivel"$ColorR
          echo -e $Branco"na melhor das hipoteses e irreal na pior."$ColorR
          echo -e $Branco"Com acesso a fonte original, voce"$ColorR
          echo -e $Branco"pode executar um programa Java simples"$ColorR
          echo -e $Branco"e anexar um depurador a"$ColorR
          echo -e $Branco"ele remotamente, percorrendo"$ColorR
          echo -e $Branco"o codigo e alterando as variaveis"$ColorR
          echo -e $Branco"quando necessario."$ColorR
          echo -e $Branco"Fazer o mesmo com um applet"$ColorR
          echo -e $Branco"e um pouco mais dificil."$ColorR
          echo -e $Branco"O JavaSnoop tenta resolver esse"$ColorR
          echo -e $Branco"problema permitindo que voce"$ColorR
          echo -e $Branco"se conecte a um processo existente"$ColorR
          echo -e $Branco"(como um depurador) e comece"$ColorR
          echo -e $Branco"instantaneamente a adulterar chamadas"$ColorR
          echo -e $Branco"de metodo, execute codigo personalizado"$ColorR
          echo -e $Branco"ou apenas observe"$ColorR
          echo -e $Branco"o que esta acontecendo no sistema."$ColorR
          echo -e $Branco"$ javasnoop."$ColorR
          echo -e $BrancoBAD"JavaSnoop Homepage: https://code.google.com/p/javasnoop/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/javasnoop/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "42" ]; then
          echo -e $Color"Instalando Programa Mac-Robber."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install mac-robber
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "42help" ]; then
          echo -e $BrancoBAD"Sobre Mac-Robber:"$ColorR
          echo -e $Branco"mac-robber e uma ferramenta de"$ColorR
          echo -e $Branco"investigacao digital (digital forense)"$ColorR
          echo -e $Branco"que coleta metadados de arquivos alocados"$ColorR
          echo -e $Branco"em um sistema de arquivos montado."$ColorR
          echo -e $Branco"Isso e util durante a resposta a"$ColorR
          echo -e $Branco"incidentes ao analisar um sistema ativo"$ColorR
          echo -e $Branco"ou ao analisar um sistema"$ColorR
          echo -e $Branco"inativo em um laboratorio."$ColorR
          echo -e $Branco"Os dados podem ser usados pela ferramenta"$ColorR
          echo -e $Branco"mactime no The Sleuth Kit"$ColorR
          echo -e $Branco"(somente TSK ou SleuthKit)"$ColorR
          echo -e $Branco"para criar uma linha do tempo"$ColorR
          echo -e $Branco"da atividade do arquivo."$ColorR
          echo -e $Branco"A ferramenta mac-robber e baseada na"$ColorR
          echo -e $Branco"ferramenta grave-robber do TCT (The Coroners Toolkit)."$ColorR
          echo -e $Branco"O mac-robber requer que o sistema"$ColorR
          echo -e $Branco"de arquivos seja montado"$ColorR
          echo -e $Branco"pelo sistema operacional, ao contrario"$ColorR
          echo -e $Branco"das ferramentas do The Sleuth Kit que"$ColorR
          echo -e $Branco"processam o proprio sistema de arquivos."$ColorR
          echo -e $Branco"Portanto, o mac-robber nao coletara dados de"$ColorR
          echo -e $Branco"arquivos excluidos ou arquivos ocultos por rootkits."$ColorR
          echo -e $Branco"O mac-robber tambem modificara os tempos"$ColorR
          echo -e $Branco"de acesso em diretorios montados"$ColorR
          echo -e $Branco"com permissoes de gravacao."$ColorR
          echo -e $Branco"mac-robber e util ao lidar com um"$ColorR
          echo -e $Branco"sistema de arquivos que nao e suportado"$ColorR
          echo -e $Branco"pelo The Sleuth Kit ou outras ferramentas"$ColorR
          echo -e $Branco"de analise de sistema de arquivos."$ColorR
          echo -e $Branco"Voce pode executar o mac-robber"$ColorR
          echo -e $Branco"em um sistema de arquivos UNIX obscuro"$ColorR
          echo -e $Branco"e suspeito que foi montado como somente"$ColorR
          echo -e $Branco"leitura em um sistema confiavel."$ColorR
          echo -e $Branco"$ mac-robber."$ColorR
          echo -e $BrancoBAD"Mac-Robber Homepage: https://www.sleuthkit.org/mac-robber"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/mac-robber/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "43" ]; then
          echo -e $Color"Instalando Programa MagicRescue."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install magicrescue
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "43help" ]; then
          echo -e $BrancoBAD"Sobre MagicRescue:"$ColorR
          echo -e $Branco"O Magic Rescue verifica um dispositivo"$ColorR
          echo -e $Branco"de bloco em busca de tipos de arquivos"$ColorR
          echo -e $Branco"que ele sabe como recuperar e chama"$ColorR
          echo -e $Branco"um programa externo para extrai-los."$ColorR
          echo -e $Branco"Ele analisa “bytes magicos”"$ColorR
          echo -e $Branco"(padroes de arquivo) no conteudo"$ColorR
          echo -e $Branco"do arquivo, para que possa ser usado"$ColorR
          echo -e $Branco"como um utilitario de recuperacao de exclusao e"$ColorR
          echo -e $Branco"para recuperar uma unidade"$ColorR
          echo -e $Branco"ou particao corrompida."$ColorR
          echo -e $Branco"Enquanto os dados do arquivo"$ColorR
          echo -e $Branco"estiverem la, ele os encontrara."$ColorR
          echo -e $Branco"Magic Rescue usa arquivos chamados “receitas”."$ColorR
          echo -e $Branco"Esses arquivos possuem strings e"$ColorR
          echo -e $Branco"comandos para identificar e extrair"$ColorR
          echo -e $Branco"dados de dispositivos ou imagens forenses."$ColorR
          echo -e $Branco"Assim, voce pode escrever suas proprias receitas."$ColorR
          echo -e $Branco"Atualmente, existem as seguintes receitas:"$ColorR
          echo -e $Branco"avi, canon-cr2, elf, flac, gpl, gzip,"$ColorR
          echo -e $Branco"jpeg-exif, jpeg-jfif, mbox, mbox-mozilla-inbox,"$ColorR
          echo -e $Branco"mbox-mozilla-sent, mp3-id3v1, mp3-id3v2,"$ColorR
          echo -e $Branco"msoffice, nikon-raw, perl, png, ppm, sqlite e zip."$ColorR
          echo -e $Branco"Este pacote fornece os comandos"$ColorR
          echo -e $Branco"magicrescue, dupemap e magicsort."$ColorR
          echo -e $Branco"magicrescue e um escultor"$ColorR
          echo -e $Branco"e, e util em investigacoes forenses."$ColorR
          echo -e $Branco"$ dupemap."$ColorR
          echo -e $Branco"$ magicrescue."$ColorR
          echo -e $Branco"$ magicsort."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/jbj/magicrescue"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/magicrescue/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "44" ]; then
          echo -e $Color"Instalando Programa Mdbtools."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install libmdb3
          apt-get -y install libmdbsql3
          apt-get -y install mdbtools
          apt-get -y install mdbtools-dev
          apt-get -y install mdbtools-doc
          apt-get -y install odbc-mdbtools
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "44help" ]; then
          echo -e $BrancoBAD"Sobre Mdbtools:"$ColorR
          echo -e $Branco"Estas sao varias ferramentas para manipular"$ColorR
          echo -e $Branco"arquivos de banco de dados JET / MS Access (MDB):"$ColorR
          echo -e $Branco"utils - fornece utilitarios de linha de comando"$ColorR
          echo -e $Branco"para listar tabelas, exportar esquema e dados,"$ColorR
          echo -e $Branco"mostrar versoes de arquivos e outras coisas uteis."$ColorR
          echo -e $Branco"mdb-sql - uma ferramenta SQL de linha"$ColorR
          echo -e $Branco"de comando que permite"$ColorR
          echo -e $Branco"digitar consultas SQL e obter resultados."$ColorR
          echo -e $Branco"$ mdb-array."$ColorR
          echo -e $Branco"$ mdb-header."$ColorR
          echo -e $Branco"$ mdb-parsecsv."$ColorR
          echo -e $Branco"$ mdb-schema."$ColorR
          echo -e $Branco"$ mdb-ver."$ColorR
          echo -e $Branco"$ mdb-count."$ColorR
          echo -e $Branco"$ mdb-hexdump."$ColorR
          echo -e $Branco"$ mdb-prop."$ColorR
          echo -e $Branco"$ mdb-sql."$ColorR
          echo -e $Branco"$ mdb-export."$ColorR
          echo -e $Branco"$ mdb-json."$ColorR
          echo -e $Branco"$ mdb-queries."$ColorR
          echo -e $Branco"$ mdb-tables."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/mdbtools/mdbtools"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/mdbtools/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "45" ]; then
          echo -e $Color"Instalando Programa Memdump."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install memdump
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "45help" ]; then
          echo -e $BrancoBAD"Sobre Memdump:"$ColorR
          echo -e $Branco"Programa que despeja a memoria do sistema"$ColorR
          echo -e $Branco"para o fluxo de saida padrao, pulando"$ColorR
          echo -e $Branco"os buracos nos mapas de memoria."$ColorR
          echo -e $Branco"Por padrao, o programa despeja"$ColorR
          echo -e $Branco"o conteudo da memoria fisica."$ColorR
          echo -e $Branco"Este programa nao funcionara"$ColorR
          echo -e $Branco"se CONFIG_STRICT_DEVMEM"$ColorR
          echo -e $Branco"estiver habilitado no kernel."$ColorR
          echo -e $Branco"Desde a versao 2.6, varios kernels"$ColorR
          echo -e $Branco"estao habilitando esta opcao por padrao."$ColorR
          echo -e $Branco"memdump e util em testes de seguranca"$ColorR
          echo -e $Branco"e investigacoes forenses."$ColorR
          echo -e $Branco"$ memdump."$ColorR
          echo -e $BrancoBAD"Memdump Homepage: http://www.porcupine.org/forensics/tct.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/memdump/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "46" ]; then
          echo -e $Color"Instalando Programa MetaCam."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install metacam
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "46help" ]; then
          echo -e $BrancoBAD"Sobre MetaCam:"$ColorR
          echo -e $Branco"EXIF (Exchangeable Image File Format)"$ColorR
          echo -e $Branco"e um padrao para armazenar informacoes"$ColorR
          echo -e $Branco"de intercambio em arquivos"$ColorR
          echo -e $Branco"de imagem, especialmente"$ColorR
          echo -e $Branco"aqueles que usam compactacao JPEG."$ColorR
          echo -e $Branco"A maioria das cameras digitais, incluindo"$ColorR
          echo -e $Branco"telefones celulares, agora usa o formato EXIF."$ColorR
          echo -e $Branco"O formato faz parte do padrao DCF"$ColorR
          echo -e $Branco"criado pela JEIDA para incentivar a"$ColorR
          echo -e $Branco"interoperabilidade"$ColorR
          echo -e $Branco"entre dispositivos de imagem."$ColorR
          echo -e $Branco"Alem dos campos EXIF padrao, o MetaCam"$ColorR
          echo -e $Branco"tambem suporta extensoes especificas"$ColorR
          echo -e $Branco"de fornecedores da Nikon, Olympus, Canon e Casio."$ColorR
          echo -e $Branco"Este programa e util"$ColorR
          echo -e $Branco"em investigacoes forenses."$ColorR
          echo -e $Branco"$ metacam."$ColorR
          echo -e $BrancoBAD"MetaCam Homepage: http://www.cheeseplant.org/~daniel/pages/metacam.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/metacam/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "47" ]; then
          echo -e $Color"Instalando Programa Missidentify."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install missidentify
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "47help" ]; then
          echo -e $BrancoBAD"Sobre Missidentify:"$ColorR
          echo -e $Branco"Miss Identify (missidentify) e um programa"$ColorR
          echo -e $Branco"para encontrar aplicativos"$ColorR
          echo -e $Branco"win32 do tipo MS Windows."$ColorR
          echo -e $Branco"Por padrao, ele exibe o nome do arquivo"$ColorR
          echo -e $Branco"de qualquer executavel que nao tenha extensao,"$ColorR
          echo -e $Branco"como exe, dll, com, sys, cpl, hxs, hxi, olb, rll ou tlb."$ColorR
          echo -e $Branco"Ele tambem pode exibir todos"$ColorR
          echo -e $Branco"os executaveis, independentemente da extensao."$ColorR
          echo -e $Branco"Miss Identificar e util em investigacoes forenses."$ColorR
          echo -e $Branco"$ missidentify."$ColorR
          echo -e $BrancoBAD"Missidentify Homepage: http://missidentify.sf.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/missidentify/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "48" ]; then
          echo -e $Color"Instalando Programa Myrescue."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install myrescue
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "48help" ]; then
          echo -e $BrancoBAD"Sobre Myrescue:"$ColorR
          echo -e $Branco"myrescue e um programa para resgatar"$ColorR
          echo -e $Branco"os dados ainda legiveis de um disco"$ColorR
          echo -e $Branco"rigido danificado, CD-ROM, DVD, pen drives, etc."$ColorR
          echo -e $Branco"E semelhante em proposito ao dd_rescue"$ColorR
          echo -e $Branco"(ou ddrescue), mas tenta sair rapidamente"$ColorR
          echo -e $Branco"das areas danificadas"$ColorR
          echo -e $Branco"para primeiro manuseie a parte ainda"$ColorR
          echo -e $Branco"nao danificada do disco e retorne mais tarde."$ColorR
          echo -e $Branco"Este pacote e util para recuperar dados"$ColorR
          echo -e $Branco"de qualquer midia e para investigacoes forenses."$ColorR
          echo -e $Branco"$ myrescue."$ColorR
          echo -e $Branco"$ myrescue-bitmap2ppm."$ColorR
          echo -e $Branco"$ myrescue-stat."$ColorR
          echo -e $BrancoBAD"Myrescue Homepage: http://myrescue.sf.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/myrescue/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "49" ]; then
          echo -e $Color"Instalando Programa NASM."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install nasm
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "49help" ]; then
          echo -e $BrancoBAD"Sobre NASM:"$ColorR
          echo -e $Branco"Montador de rede."$ColorR
          echo -e $Branco"O NASM atualmente produzira arquivos"$ColorR
          echo -e $Branco"binarios de formato simples, arquivos"$ColorR
          echo -e $Branco"de objeto Unix a.out, COFF e ELF"$ColorR
          echo -e $Branco"e arquivos de objeto Microsoft DOS e Win32 de 16 bits."$ColorR
          echo -e $Branco"Tambem esta incluido o NDISASM, um prototipo"$ColorR
          echo -e $Branco"de desmontagem de arquivos binarios x86"$ColorR
          echo -e $Branco"que usa a mesma tabela de instrucoes do NASM."$ColorR
          echo -e $Branco"O NASM e lancado sob a Licenca"$ColorR
          echo -e $Branco"Publica Geral Menor GNU (LGPL)."$ColorR
          echo -e $Branco"$ nasm."$ColorR
          echo -e $Branco"$ rdf2ihx."$ColorR
          echo -e $Branco"$ ldrdf."$ColorR
          echo -e $Branco"$ rdf2bin."$ColorR
          echo -e $Branco"$ rdf2ith."$ColorR
          echo -e $Branco"$ ndisasm."$ColorR
          echo -e $Branco"$ rdflib."$ColorR
          echo -e $Branco"$ rdf2com."$ColorR
          echo -e $Branco"$ rdf2srec."$ColorR
          echo -e $Branco"$ rdfdump."$ColorR
          echo -e $Branco"$ rdx."$ColorR
          echo -e $BrancoBAD"NASM Homepage: http://www.nasm.us/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/nasm/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "50" ]; then
          echo -e $Color"Instalando Programa Nasty."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install nasty
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "50help" ]; then
          echo -e $BrancoBAD"Sobre Nasty:"$ColorR
          echo -e $Branco"Nasty e um programa que ajuda voce"$ColorR
          echo -e $Branco"a recuperar a senha de sua chave PGP"$ColorR
          echo -e $Branco"ou GPG caso voce a esqueca ou a perca."$ColorR
          echo -e $BrancoBAD"Os seguintes recursos tornarao as coisas mais faceis:"$ColorR
          echo -e $Branco"* definir o comprimento minimo/maximo da senha."$ColorR
          echo -e $Branco"* modo incremental, modo aleatorio"$ColorR
          echo -e $Branco"ou le um arquivo para adivinhar."$ColorR
          echo -e $Branco"* filtro de conjunto de caracteres."$ColorR
          echo -e $Branco"Este pacote e util em investigacoes forenses."$ColorR
          echo -e $Branco"$ nasty."$ColorR
          echo -e $BrancoBAD"Nasty Homepage: http://www.vanheusden.com/nasty/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/nasty/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "51" ]; then
          echo -e $Color"Instalando Programa OllyDbg."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ollydbg
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "51help" ]; then
          echo -e $BrancoBAD"Sobre OllyDbg:"$ColorR
          echo -e $Branco"OllyDbg e um depurador de analise de nivel"$ColorR
          echo -e $Branco"de montador de 32 bits"$ColorR
          echo -e $Branco"para Microsoft Windows."$ColorR
          echo -e $Branco"A enfase na analise de codigo binario"$ColorR
          echo -e $Branco"o torna particularmente util nos"$ColorR
          echo -e $Branco"casos em que a fonte nao esta disponivel."$ColorR
          echo -e $Branco"$ ollydbg."$ColorR
          echo -e $BrancoBAD"OllyDbg Homepage: http://www.ollydbg.de/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ollydbg/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "52" ]; then
          echo -e $Color"Instalando Programa P7zip-Full."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install p7zip-full
          apt-get -y install p7zip
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "52help" ]; then
          echo -e $BrancoBAD"Sobre P7zip-Full:"$ColorR
          echo -e $Branco"p7zip e a porta de linha de comando do"$ColorR
          echo -e $Branco"Unix do 7-Zip, um arquivador de arquivos"$ColorR
          echo -e $Branco"que lida com o formato 7z que"$ColorR
          echo -e $Branco"apresenta taxas de compactacao muito altas."$ColorR
          echo -e $Branco"O p7zip-full fornece utilitarios"$ColorR
          echo -e $Branco"para compactar e descompactar arquivos"$ColorR
          echo -e $Branco"7z dentro de um shell ou usando uma GUI"$ColorR
          echo -e $Branco"(como Ark, File Roller ou Nautilus)."$ColorR
          echo -e $Branco"A instalacao do p7zip-full"$ColorR
          echo -e $Branco"permite que o File Roller use o formato"$ColorR
          echo -e $Branco"de compactacao 7z muito eficiente"$ColorR
          echo -e $Branco"para compactar e descompactar arquivos e diretorios."$ColorR
          echo -e $Branco"Alem disso, fornece os comandos 7z e 7za."$ColorR
          echo -e $BrancoBAD"Lista de formatos suportados:"$ColorR
          echo -e $Branco"* Embalagem/desembalagem: 7z, ZIP,"$ColorR
          echo -e $Branco"GZIP, BZIP2, XZ e TAR."$ColorR
          echo -e $Branco"* Descompactar apenas: APM, ARJ, CAB,"$ColorR
          echo -e $Branco"CHM, CPIO, CramFS, DEB, DMG, FAT, HFS,"$ColorR
          echo -e $Branco"ISO, LZH, LZMA, LZMA2, MBR, MSI,"$ColorR
          echo -e $Branco"MSLZ, NSIS, NTFS, RAR"$ColorR
          echo -e $Branco"(somente se nao for p7zip-rar esta instalado),"$ColorR
          echo -e $Branco"RPM, SquashFS, UDF, VHD, WIM, XAR e Z."$ColorR
          echo -e $Branco"O pacote dependente, p7zip,"$ColorR
          echo -e $Branco"fornece 7zr, uma versao leve do 7za,"$ColorR
          echo -e $Branco"e p7zip, um wrapper semelhante"$ColorR
          echo -e $Branco"ao gzip em torno do 7zr."$ColorR
          echo -e $Branco"$ 7zr."$ColorR
          echo -e $Branco"$ 7z."$ColorR
          echo -e $Branco"$ p7zip."$ColorR
          echo -e $Branco"$ 7za."$ColorR
          echo -e $BrancoBAD"P7Zip-Full Homepage: http://p7zip.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/p7zip/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "53" ]; then
          echo -e $Color"Instalando Programa GNU-Parted."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install libparted-dev
          apt-get -y install libparted-fs-resize0
          apt-get -y install libparted-i18n
          apt-get -y install libparted2
          apt-get -y install parted
          apt-get -y install parted-doc
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "53help" ]; then
          echo -e $BrancoBAD"Sobre GNU-Parted:"$ColorR
          echo -e $Branco"GNU Parted e um programa que permite"$ColorR
          echo -e $Branco"criar, destruir, redimensionar, mover"$ColorR
          echo -e $Branco"e copiar particoes de disco."$ColorR
          echo -e $Branco"Isso e util para criar espaco"$ColorR
          echo -e $Branco"para novos sistemas"$ColorR
          echo -e $Branco"operacionais, reorganizar"$ColorR
          echo -e $Branco"o uso do disco e copiar dados"$ColorR
          echo -e $Branco"para novos discos rigidos."$ColorR
          echo -e $Branco"Este pacote contem a"$ColorR
          echo -e $Branco"pagina binaria e de manual."$ColorR
          echo -e $Branco"Documentacao adicional"$ColorR
          echo -e $Branco"esta disponivel em parted-doc."$ColorR
          echo -e $Branco"Parted atualmente suporta os formatos"$ColorR
          echo -e $Branco"de particionamento DOS, Mac, Sun, BSD, GPT, MIPS e PC98,"$ColorR
          echo -e $Branco"bem como um tipo de “loop”"$ColorR
          echo -e $Branco"(disco bruto) que permite o uso em RAID/LVM."$ColorR
          echo -e $Branco"Ele pode detectar e remover"$ColorR
          echo -e $Branco"sistemas de arquivos ASFS/AFFS/APFS,"$ColorR
          echo -e $Branco"Btrfs, ext2/3/4, FAT16/32, HFS, JFS,"$ColorR
          echo -e $Branco"linux-swap, UFS, XFS e ZFS."$ColorR
          echo -e $Branco"O Parted tambem tem a capacidade de criar"$ColorR
          echo -e $Branco"e modificar sistemas de arquivos de alguns desses"$ColorR
          echo -e $Branco"tipos, mas usa-lo para executar"$ColorR
          echo -e $Branco"operacoes do sistema de arquivos agora esta obsoleto."$ColorR
          echo -e $Branco"A natureza deste software significa"$ColorR
          echo -e $Branco"que quaisquer bugs podem"$ColorR
          echo -e $Branco"causar perda macica de dados."$ColorR
          echo -e $Branco"Embora nao existam tais bugs conhecidos"$ColorR
          echo -e $Branco"no momento, eles podem existir, entao faca"$ColorR
          echo -e $Branco"backup de todos os arquivos importantes"$ColorR
          echo -e $Branco"antes de executa-lo, e faca isso por sua conta e risco."$ColorR
          echo -e $Branco"$ parted."$ColorR
          echo -e $Branco"$ partprobe."$ColorR
          echo -e $BrancoBAD"Parted Homepage: https://www.gnu.org/software/parted"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/parted/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "54" ]; then
          echo -e $Color"Instalando Programa Pasco."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install pasco
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "54help" ]; then
          echo -e $BrancoBAD"Sobre Pasco:"$ColorR
          echo -e $Branco"Pasco e uma ferramenta forense"$ColorR
          echo -e $Branco"que examina o conteudo dos arquivos"$ColorR
          echo -e $Branco"de cache (index.dat) produzidos"$ColorR
          echo -e $Branco"pelo Microsoft Internet Explorer."$ColorR
          echo -e $Branco"Ele analisa o arquivo e gera um campo"$ColorR
          echo -e $Branco"separado que pode ser carregado em uma planilha."$ColorR
          echo -e $Branco"Este pacote e util em investigacoes forenses."$ColorR
          echo -e $Branco"$ pasco."$ColorR
          echo -e $BrancoBAD"Pasco Homepage: https://sf.net/projects/odessa"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/pasco/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "55" ]; then
          echo -e $Color"Instalando Programa Pev."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install pev
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "55help" ]; then
          echo -e $BrancoBAD"Sobre Pev:"$ColorR
          echo -e $Branco"pev e uma ferramenta"$ColorR
          echo -e $Branco"para obter informacoes de executaveis"$ColorR
          echo -e $Branco"PE32/PE32+ (EXE, DLL, OCX etc)"$ColorR
          echo -e $Branco"como cabecalhos, secoes, recursos"$ColorR
          echo -e $Branco"e muito mais."$ColorR
          echo -e $Branco"$ ofs2rva."$ColorR
          echo -e $Branco"$ peldd."$ColorR
          echo -e $Branco"$ pescan."$ColorR
          echo -e $Branco"$ readpe."$ColorR
          echo -e $Branco"$ pedis."$ColorR
          echo -e $Branco"$ pepack."$ColorR
          echo -e $Branco"$ pesec."$ColorR
          echo -e $Branco"$ rva2ofs."$ColorR
          echo -e $Branco"$ pehash."$ColorR
          echo -e $Branco"$ peres."$ColorR
          echo -e $Branco"$ pestr."$ColorR
          echo -e $BrancoBAD"Pev Homepage: http://pev.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/pev/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "56" ]; then
          echo -e $Color"Instalando Programa Plaso."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install plaso
          apt-get -y install python3-plaso
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "56help" ]; then
          echo -e $BrancoBAD"Sobre Plaso:"$ColorR
          echo -e $Branco"Plaso (plaso langar að safna öllu)"$ColorR
          echo -e $Branco"e o mecanismo de back-end baseado"$ColorR
          echo -e $Branco"em Python usado por ferramentas como"$ColorR
          echo -e $Branco"log2timeline para"$ColorR
          echo -e $Branco"criacao automatica de super timelines."$ColorR
          echo -e $Branco"O objetivo do log2timeline"$ColorR
          echo -e $Branco"(e, portanto, do plaso) e fornecer uma unica"$ColorR
          echo -e $Branco"ferramenta que possa analisar varios arquivos"$ColorR
          echo -e $Branco"de log e artefatos forenses de computadores"$ColorR
          echo -e $Branco"e sistemas relacionados, como equipamentos"$ColorR
          echo -e $Branco"de rede para produzir uma unica linha do tempo correlacionada."$ColorR
          echo -e $Branco"Essa linha do tempo pode ser facilmente"$ColorR
          echo -e $Branco"analisada por investigadores/analistas forenses,"$ColorR
          echo -e $Branco"acelerando as investigacoes correlacionando"$ColorR
          echo -e $Branco"a grande quantidade de informacoes"$ColorR
          echo -e $Branco"encontradas em um sistema de computador comum."$ColorR
          echo -e $Branco"$ image_export.py ."$ColorR
          echo -e $Branco"$ psort.py ."$ColorR
          echo -e $Branco"$ log2timeline.py ."$ColorR
          echo -e $Branco"$ psteal.py ."$ColorR
          echo -e $Branco"$ pinfo.py ."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/log2timeline/plaso"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/plaso/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "57" ]; then
          echo -e $Color"Instalando Programa Radare2."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install libradare2-5.0.0
          apt-get -y install libradare2-common
          apt-get -y install libradare2-dev
          apt-get -y install radare2
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "57help" ]; then
          echo -e $BrancoBAD"Sobre Radare2:"$ColorR
          echo -e $Branco"O projeto visa criar uma cadeia"$ColorR
          echo -e $Branco"de ferramentas completa, portatil,"$ColorR
          echo -e $Branco"multi-arquitetura, tipo unix para engenharia reversa."$ColorR
          echo -e $Branco"E composto por um editor hexadecimal"$ColorR
          echo -e $Branco"(radare) com uma camada IO"$ColorR
          echo -e $Branco"encapsulada suportando varios backends"$ColorR
          echo -e $Branco"para arquivos locais/remotos,"$ColorR
          echo -e $Branco"depurador (OS X, BSD, Linux, W32),"$ColorR
          echo -e $Branco"analisador de fluxo, montador/desmontador"$ColorR
          echo -e $Branco"(rasm) para x86, ARM,  PPC, m68k,"$ColorR
          echo -e $Branco"Java, MSIL, SPARC, modulos de analise"$ColorR
          echo -e $Branco"de codigo e facilidades de script."$ColorR
          echo -e $Branco"Um bindiffer chamado radiff, conversor"$ColorR
          echo -e $Branco"de base (rax), auxiliar de desenvolvimento"$ColorR
          echo -e $Branco"de shellcode (rasc), um extrator"$ColorR
          echo -e $Branco"de informacoes binarias que suporta"$ColorR
          echo -e $Branco"PE, mach0, ELF, classe, etc."$ColorR
          echo -e $Branco"chamado rabin, e um utilitario"$ColorR
          echo -e $Branco"de hash baseado em bloco chamado rahash."$ColorR
          echo -e $Branco"$ r2."$ColorR
          echo -e $Branco"$ r2r."$ColorR
          echo -e $Branco"$ radiff2."$ColorR
          echo -e $Branco"$ rahash2."$ColorR
          echo -e $Branco"$ rasm2."$ColorR
          echo -e $Branco"$ r2agent."$ColorR
          echo -e $Branco"$ rabin2."$ColorR
          echo -e $Branco"$ rafind2."$ColorR
          echo -e $Branco"$ rarun2."$ColorR
          echo -e $Branco"$ ravc2."$ColorR
          echo -e $Branco"$ r2pm."$ColorR
          echo -e $Branco"$ radare2."$ColorR
          echo -e $Branco"$ ragg2."$ColorR
          echo -e $Branco"$ rasign2."$ColorR
          echo -e $Branco"$ rax2."$ColorR
          echo -e $BrancoBAD"Radare2 Homepage: https://www.radare.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/radare2/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "58" ]; then
          echo -e $Color"Instalando Programa Radare2-Cutter."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install radare2-cutter
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "58help" ]; then
          echo -e $BrancoBAD"Sobre Radare2-Cutter:"$ColorR
          echo -e $Branco"Cutter e uma GUI baseada em Qt"$ColorR
          echo -e $Branco"para binarios de engenharia reversa,"$ColorR
          echo -e $Branco"que faz uso da estrutura radare2."$ColorR
          echo -e $Branco"Espera-se que os usuarios avancados"$ColorR
          echo -e $Branco"usem as ferramentas CLI radare2, que"$ColorR
          echo -e $Branco"sao muito mais poderosas."$ColorR
          echo -e $Branco"$ Cutter."$ColorR
          echo -e $BrancoBAD"Radare2-Cutter Homepage: https://cutter.re/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/radare2-cutter/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "59" ]; then
          echo -e $Color"Instalando Programa Recoverdm."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install recoverdm
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "59help" ]; then
          echo -e $BrancoBAD"Sobre Recoverdm:"$ColorR
          echo -e $Branco"recoverdm recupera discos"$ColorR
          echo -e $Branco"com setores defeituosos."$ColorR
          echo -e $Branco"Voce pode recuperar arquivos bem"$ColorR
          echo -e $Branco"como dispositivos completos."$ColorR
          echo -e $Branco"Caso encontre setores que simplesmente"$ColorR
          echo -e $Branco"nao podem ser recuperados, ele grava"$ColorR
          echo -e $Branco"um setor vazio no arquivo de saida e continua."$ColorR
          echo -e $Branco"Ao recuperar um CD ou DVD e"$ColorR
          echo -e $Branco"o programa nao conseguir ler o setor"$ColorR
          echo -e $Branco"no “modo normal”, o programa tentara"$ColorR
          echo -e $Branco"ler o setor no “modo RAW”"$ColorR
          echo -e $Branco"(sem verificacao de erros, etc.)."$ColorR
          echo -e $Branco"Este kit de ferramentas tambem"$ColorR
          echo -e $Branco"possui um utilitario chamado “mergebad”"$ColorR
          echo -e $Branco"que mescla varias imagens em uma."$ColorR
          echo -e $Branco"Este pacote e util em investigacpes forenses."$ColorR
          echo -e $Branco"$ mergebad."$ColorR
          echo -e $Branco"$ recoverdm."$ColorR
          echo -e $BrancoBAD"Recoverdm Homepage: https://www.vanheusden.com/recoverdm"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/recoverdm/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "60" ]; then
          echo -e $Color"Instalando Programa Recoverjpeg."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install recoverjpeg
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "60help" ]; then
          echo -e $BrancoBAD"Sobre Recoverjpeg:"$ColorR
          echo -e $Branco"O recoverjpeg tenta recuperar"$ColorR
          echo -e $Branco"imagens JFIF (JPEG) e filmes MOV"$ColorR
          echo -e $Branco"de um periferico."$ColorR
          echo -e $Branco"Isso pode ser util se voce substituir"$ColorR
          echo -e $Branco"uma particao por engano ou se um dispositivo"$ColorR
          echo -e $Branco"como um cartao de memoria"$ColorR
          echo -e $Branco"de camera digital for falso."$ColorR
          echo -e $Branco"Este pacote fornece estes executaveis:"$ColorR
          echo -e $Branco"recoverjpeg, recovermov,"$ColorR
          echo -e $Branco"remove-duplicates e sort-pictures."$ColorR
          echo -e $Branco"O remove-duplicates e util"$ColorR
          echo -e $Branco"para remover arquivos duplicados encontrados."$ColorR
          echo -e $Branco"sort-pictures pode ser usado"$ColorR
          echo -e $Branco"para classificar as imagens de acordo"$ColorR
          echo -e $Branco"com a data exif."$ColorR
          echo -e $Branco"Este pacote atua como um carver"$ColorR
          echo -e $Branco"(carving de dados) e, e util em investigacoes forenses."$ColorR
          echo -e $Branco"$ recoverjpeg."$ColorR
          echo -e $Branco"$ sort-pictures."$ColorR
          echo -e $Branco"$ recovermov."$ColorR
          echo -e $Branco"$ remove-duplicates."$ColorR
          echo -e $BrancoBAD"Recoverjpeg Homepage: https://www.rfc1149.net/devel/recoverjpeg"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/recoverjpeg/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "61" ]; then
          echo -e $Color"Instalando Programa RegLookup."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install libregfi-dev
          apt-get -y install libregfi1
          apt-get -y install python3-pyregfi
          apt-get -y install reglookup
          apt-get -y install reglookup-doc
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "61help" ]; then
          echo -e $BrancoBAD"Sobre RegLookupm:"$ColorR
          echo -e "RegLookup e um sistema para analise direta"$ColorR
          echo -e $Branco"de arquivos de registro baseados"$ColorR
          echo -e $Branco"no Windows NT, fornecendo ferramentas"$ColorR
          echo -e $Branco"de linha de comando, uma API C"$ColorR
          echo -e $Branco"e um modulo Python"$ColorR
          echo -e $Branco"para acessar estruturas de dados de registro."$ColorR
          echo -e $Branco"O projeto se concentra em fornecer ferramentas"$ColorR
          echo -e $Branco"para investigacoes forenses digitais"$ColorR
          echo -e $Branco"(embora seja util para muitos propositos)"$ColorR
          echo -e $Branco"e inclui algoritmos"$ColorR
          echo -e $Branco"para recuperar estruturas de"$ColorR
          echo -e $Branco"dados excluidas de colmeias de registro."$ColorR
          echo -e $Branco"Atualmente, o programa permite ler"$ColorR
          echo -e $Branco"um registro inteiro e produzi-lo"$ColorR
          echo -e $Branco"em um formato cotado"$ColorR
          echo -e $Branco"(principalmente) padronizado."$ColorR
          echo -e $Branco"Ele tambem fornece recursos"$ColorR
          echo -e $Branco"para filtragem de resultados"$ColorR
          echo -e $Branco"com base no caminho do registro"$ColorR
          echo -e $Branco"e no tipo de dados."$ColorR
          echo -e $Branco"O pacote fornece os seguintes"$ColorR
          echo -e $Branco"comandos: reglookup, reglookup-recover"$ColorR
          echo -e $Branco"e reglookup-timeline."$ColorR
          echo -e $Branco"$ reglookup."$ColorR
          echo -e $Branco"$ reglookup-recover."$ColorR
          echo -e $Branco"$ reglookup-timeline."$ColorR
          echo -e $BrancoBAD"RegLookup Homepage: http://projects.sentinelchicken.org/reglookup/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/reglookup/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "62" ]; then
          echo -e $Color"Instalando Programa RegRipper."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install regripper
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "62help" ]; then
          echo -e $BrancoBAD"Sobre RegRipper:"$ColorR
          echo -e $Branco"RegRipper e uma ferramenta"$ColorR
          echo -e $Branco"de codigo aberto, escrita em Perl,"$ColorR
          echo -e $Branco"para extrair/analisar informacoes"$ColorR
          echo -e $Branco"(chaves, valores, dados)"$ColorR
          echo -e $Branco"do Registro e apresenta-las para analise."$ColorR
          echo -e $Branco"O RegRipper consiste em duas"$ColorR
          echo -e $Branco"ferramentas basicas, ambas"$ColorR
          echo -e $Branco"com recursos semelhantes."$ColorR
          echo -e $Branco"A GUI do RegRipper permite que"$ColorR
          echo -e $Branco"o analista selecione um hive"$ColorR
          echo -e $Branco"para analisar, um arquivo de saida"$ColorR
          echo -e $Branco"para os resultados e um perfil"$ColorR
          echo -e $Branco"(lista de plugins) para executar no hive."$ColorR
          echo -e $Branco"Quando o analista inicia a ferramenta"$ColorR
          echo -e $Branco"no hive, os resultados vao"$ColorR
          echo -e $Branco"para o arquivo que o analista designou."$ColorR
          echo -e $Branco"Se o analista optar por analisar"$ColorR
          echo -e $Branco"a secao System, ele tambem podera"$ColorR
          echo -e $Branco"optar por enviar os resultados"$ColorR
          echo -e $Branco"para system.txt."$ColorR
          echo -e $Branco"A ferramenta GUI tambem criara"$ColorR
          echo -e $Branco"um log de sua atividade no mesmo"$ColorR
          echo -e $Branco"diretorio que o arquivo de saida, usando"$ColorR
          echo -e $Branco"o mesmo nome de arquivo, mas usando"$ColorR
          echo -e $Branco"a extensao .log (ou seja, se a saida for gravada"$ColorR
          echo -e $Branco"em system.txt, o log"$ColorR
          echo -e $Branco"sera gravado em  registro do sistema)."$ColorR
          echo -e $Branco"$ regripper."$ColorR
          echo -e $BrancoBAD"RegRipper Homepage: https://code.google.com/p/regripper/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/regripper/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "63" ]; then
          echo -e $Color"Instalando Programa Rephrase."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rephrase
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "63help" ]; then
          echo -e $BrancoBAD"Sobre Rephrase:"$ColorR
          echo -e $Branco"Se voce quase consegue se lembrar"$ColorR
          echo -e $Branco"da sua senha do GnuPG - mas nao"$ColorR
          echo -e $Branco"exatamente -, o Rephrase pode ajudar."$ColorR
          echo -e $Branco"Diga a Refrasear as partes da senha"$ColorR
          echo -e $Branco"que voce conhece e qualquer numero"$ColorR
          echo -e $Branco"de alternativas para as partes sobre"$ColorR
          echo -e $Branco"as quais voce nao tem certeza;"$ColorR
          echo -e $Branco"e o Rephrase tentara todas as"$ColorR
          echo -e $Branco"alternativas, em todas as combinacoes possiveis, e"$ColorR
          echo -e $Branco"informara qual combinacao"$ColorR
          echo -e $Branco"(se houver) fornece a senha correta."$ColorR
          echo -e $Branco"$ rephrase."$ColorR
          echo -e $BrancoBAD"Rephrase Homepage: https://www.roguedaemon.net/rephrase/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rephrase/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "64" ]; then
          echo -e $Color"Instalando Programa Rifiuti."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rifiuti
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "64help" ]; then
          echo -e $BrancoBAD"Sobre Rifiuti:"$ColorR
          echo -e $Branco"Rifiuti e uma ferramenta"$ColorR
          echo -e $Branco"para examinar os arquivos INFO2."$ColorR
          echo -e $Branco"O arquivo INFO2 fornece informacoes"$ColorR
          echo -e $Branco"meta sobre os arquivos encontrados"$ColorR
          echo -e $Branco"na lixeira do MS Windows."$ColorR
          echo -e $Branco"Este pacote e util em investigacoes forenses."$ColorR
          echo -e $Branco"$ rifiuti."$ColorR
          echo -e $BrancoBAD"Rifiuti Homepage: https://sf.net/projects/odessa"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rifiuti/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "65" ]; then
          echo -e $Color"Instalando Programa Rifiuti2."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rifiuti2
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "65help" ]; then
          echo -e $BrancoBAD"Sobre Rifiuti2:"$ColorR
          echo -e $Branco"Rifiuti2 analisa arquivos"$ColorR
          echo -e $Branco"da lixeira do Windows."$ColorR
          echo -e $Branco"A analise da lixeira do Windows geralmente"$ColorR
          echo -e $Branco"e realizada durante a analise"$ColorR
          echo -e $Branco"forense do computador Windows."$ColorR
          echo -e $Branco"O Rifiuti2 pode extrair"$ColorR
          echo -e $Branco"o tempo de exclusao do arquivo, o caminho"$ColorR
          echo -e $Branco"original e o tamanho dos arquivos"$ColorR
          echo -e $Branco"excluidos e se os arquivos excluidos"$ColorR
          echo -e $Branco"foram removidos da lixeira, uma"$ColorR
          echo -e $Branco"vez que foram jogados na lixeira."$ColorR
          echo -e $Branco"Rifiuti2 e uma reescrita de rifiuti, que"$ColorR
          echo -e $Branco"foi originalmente escrito"$ColorR
          echo -e $Branco"para propositos identicos."$ColorR
          echo -e $Branco"Em seguida, foi estendido"$ColorR
          echo -e $Branco"para abranger mais funcionalidades, como:"$ColorR
          echo -e $Branco"* Manipula a lixeira ate o Windows 10;"$ColorR
          echo -e $Branco"* Lida com Windows antigo como 95, NT4 e ME;"$ColorR
          echo -e $Branco"* Suporta todas as versoes localizadas do"$ColorR
          echo -e $Branco"Windows - tanto as baseadas em Unicode"$ColorR
          echo -e $Branco"quanto as legadas (usando a pagina de codigo ANSI);"$ColorR
          echo -e $Branco"* Suporta saida em formato XML, bem"$ColorR
          echo -e $Branco"como texto delimitado por tabulacao original."$ColorR
          echo -e $Branco"Rifiuti2 foi projetado para ser portatil"$ColorR
          echo -e $Branco"e roda em ambiente de linha de comando."$ColorR
          echo -e $Branco"Dois programas rifiuti e rifiuti-vista"$ColorR
          echo -e $Branco"sso escolhidos dependendo do formato"$ColorR
          echo -e $Branco"relevante da lixeira do Windows."$ColorR
          echo -e $Branco"$ rifiuti-vista."$ColorR
          echo -e $Branco"$ rifiuti2."$ColorR
          echo -e $BrancoBAD"Rifiuti2 Homepage: https://abelcheung.github.io/rifiuti2"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rifiuti2/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "66" ]; then
          echo -e $Color"Instalando Programa Rkhunter."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rkhunter
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "66help" ]; then
          echo -e $BrancoBAD"Sobre Rkhunter:"$ColorR
          echo -e $Branco"O Rootkit Hunter verifica os sistemas"$ColorR
          echo -e $Branco"em busca de rootkits, backdoors, sniffers"$ColorR
          echo -e $Branco"e exploits conhecidos e desconhecidos."$ColorR
          echo -e $BrancoBAD"Ele verifica:"$ColorR
          echo -e $Branco"* Alteracoes de hash SHA256;"$ColorR
          echo -e $Branco"* arquivos comumente criados por rootkits;"$ColorR
          echo -e $Branco"* executaveis com permissoes de arquivo anomalas;"$ColorR
          echo -e $Branco"* strings suspeitas em modulos do kernel;"$ColorR
          echo -e $Branco"* arquivos ocultos em diretorios do sistema;"$ColorR
          echo -e $Branco"e pode, opcionalmente, digitalizar dentro dos arquivos."$ColorR
          echo -e $Branco"Usar o rkhunter sozinho nao garante que"$ColorR
          echo -e $Branco"um sistema nao seja comprometido."$ColorR
          echo -e $Branco"A execucao de testes adicionais,"$ColorR
          echo -e $Branco"como chkrootkit, e recomendada."$ColorR
          echo -e $Branco"$ rkhunter."$ColorR
          echo -e $BrancoBAD"Rkhunter Homepage: http://rkhunter.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rkhunter/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "67" ]; then
          echo -e $Color"Instalando Programa Rsakeyfind."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rsakeyfind
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "67help" ]; then
          echo -e $BrancoBAD"Sobre Rsakeyfind:"$ColorR
          echo -e $Branco"rsakeyfind e uma ferramenta que localiza"$ColorR
          echo -e $Branco"chaves privadas RSA codificadas por BER"$ColorR
          echo -e $Branco"em MEMORY-IMAGE."$ColorR
          echo -e $Branco"Se um MODULUS-FILE for especificado, ele localizara chaves"$ColorR
          echo -e $Branco"privadas e publicas correspondentes"$ColorR
          echo -e $Branco"ao modulo codificado em hexadecimal lido desse arquivo."$ColorR
          echo -e $Branco"Este pacote e util para diversas"$ColorR
          echo -e $Branco"atividades, como investigacoes forenses."$ColorR
          echo -e $Branco"$ rsakeyfind."$ColorR
          echo -e $BrancoBAD"Rsakeyfind Homepage:"\
                            "https://citp.princeton.edu/our-work/memory/code/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rsakeyfind/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "68" ]; then
          echo -e $Color"Instalando Programa Safecopy."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install safecopy
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "68help" ]; then
          echo -e $BrancoBAD"Sobre Safecopy:"$ColorR
          echo -e $Branco"Safecopy tenta obter o maximo de dados"$ColorR
          echo -e $Branco"possivel de SOURCE, mesmo recorrendo"$ColorR
          echo -e $Branco"a operacoes de baixo nivel especificas"$ColorR
          echo -e $Branco"do dispositivo, se aplicavel."$ColorR
          echo -e $Branco"Isso e alcancado identificando areas"$ColorR
          echo -e $Branco"problematicas ou danificadas, pulando-as"$ColorR
          echo -e $Branco"e continuando a leitura depois."$ColorR
          echo -e $Branco"A area correspondente no arquivo de"$ColorR
          echo -e $Branco"destino e ignorada (na criacao inicial,"$ColorR
          echo -e $Branco"o que significa preenchido com zeros)"$ColorR
          echo -e $Branco"ou deliberadamente preenchida"$ColorR
          echo -e $Branco"com um padrao reconhecivel"$ColorR
          echo -e $Branco"para localizar posteriormente os arquivos"$ColorR
          echo -e $Branco"afetados em um dispositivo corrompido."$ColorR
          echo -e $Branco"O trabalho e semelhante"$ColorR
          echo -e $Branco"ao ddrescue, gerando uma imagem da midia original."$ColorR
          echo -e $Branco"Essa midia pode ser disquetes, particoes"$ColorR
          echo -e $Branco"de disco rigido, CDs, DVDs, dispositivos de fita, onde"$ColorR
          echo -e $Branco"outras ferramentas como"$ColorR
          echo -e $Branco"dd falhariam devido a erros de E/S."$ColorR
          echo -e $Branco"Safecopy usa um algoritmo incremental"$ColorR
          echo -e $Branco"para identificar o inicio e o fim exatos"$ColorR
          echo -e $Branco"das areas defeituosas, permitindo que o usuario"$ColorR
          echo -e $Branco"troque acessos minimos a areas defeituosas"$ColorR
          echo -e $Branco"para uma recuperacao completa dos dados."$ColorR
          echo -e $Branco"Sao possiveis varias passagens"$ColorR
          echo -e $Branco"pelo mesmo arquivo, primeiro"$ColorR
          echo -e $Branco"para recuperar o maximo de dados"$ColorR
          echo -e $Branco"possivel de um dispositivo com o minimo"$ColorR
          echo -e $Branco"de dano e, em seguida, tentar recuperar"$ColorR
          echo -e $Branco"alguns dos dados restantes"$ColorR
          echo -e $Branco"com tentativas de leitura cada vez mais agressivas."$ColorR
          echo -e $Branco"Safecopy inclui uma camada de E/S"$ColorR
          echo -e $Branco"de baixo nivel para ler discos de CDROM"$ColorR
          echo -e $Branco"no modo bruto e emitir reinicializacoes"$ColorR
          echo -e $Branco"de dispositivos e outras operacoes uteis"$ColorR
          echo -e $Branco"de baixo nivel em varias outras classes de dispositivos."$ColorR
          echo -e $Branco"Safecopy e util em investigacoes forenses"$ColorR
          echo -e $Branco"e recuperacao de desastres."$ColorR
          echo -e $Branco"$ safecopy."$ColorR
          echo -e $BrancoBAD"Safecopy Homepage: http://safecopy.sf.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/safecopy/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09

     elif [ "$I" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$I" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$I" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$I" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$I" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$I" = "P13" ]; then
          Programas13

     elif [ "$I" = "P12" ]; then
          Programas12

     elif [ "$I" = "P11" ]; then
          Programas11

     elif [ "$I" = "P10" ]; then
          Programas10

     elif [ "$I" = "P09" ]; then
          Programas09

     elif [ "$I" = "P08" ]; then
          Programas08

     elif [ "$I" = "P07" ]; then
          Programas07

     elif [ "$I" = "P06" ]; then
          Programas06

     elif [ "$I" = "P05" ]; then
          Programas05

     elif [ "$I" = "P04" ]; then
          Programas04

     elif [ "$I" = "P03" ]; then
          Programas03

     elif [ "$I" = "P02" ]; then
          Programas02

     elif [ "$I" = "P01" ]; then
          Programas01

     elif [ "$I" = "Programas01" ]; then
          Programas01

     elif [ "$I" = "Programas02" ]; then
          Programas02

     elif [ "$I" = "Programas03" ]; then
          Programas03

     elif [ "$I" = "Programas04" ]; then
          Programas04

     elif [ "$I" = "Programas05" ]; then
          Programas05

     elif [ "$I" = "Programas06" ]; then
          Programas06

     elif [ "$I" = "Programas07" ]; then
          Programas07

     elif [ "$I" = "Programas08" ]; then
          Programas08

     elif [ "$I" = "Programas09" ]; then
          Programas09

     elif [ "$I" = "Programas10" ]; then
          Programas10

     elif [ "$I" = "Programas11" ]; then
          Programas11

     elif [ "$I" = "Programas12" ]; then
          Programas12

     elif [ "$I" = "Programas13" ]; then
          Programas13

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Programas09
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Programas09
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Programas09
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Programas09
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Programas09
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Programas09
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas09
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas09
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas09
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas09
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas09
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas09
fi
}
Programas09i(){
Programas09Bi
PrompTProgramas09i
if [ "$I" = "01" ]; then
   I="1"
fi
if [ "$I" = "02" ]; then
   I="2"
fi
if [ "$I" = "03" ]; then
   I="3"
fi
if [ "$I" = "04" ]; then
   I="4"
fi
if [ "$I" = "05" ]; then
   I="5"
fi
if [ "$I" = "06" ]; then
   I="6"
fi
if [ "$I" = "07" ]; then
   I="7"
fi
if [ "$I" = "08" ]; then
   I="8"
fi
if [ "$I" = "09" ]; then
   I="9"
fi
while [ "$I" ];
do
  if [ "$I" ]; then
     if [ "$I" = "1" ]; then
        echo -e $Color"Instalando Programa Samdump2."$Color
        apt-get -y update 1> /dev/null 2> /dev/null
        apt-get -y install samdump2
        sleep 1
        echo -e $Color"Processo Finalizado."$ColorR
        sleep 1
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        PrompTProgramas09i

     elif [ "$I" = "1help" ]; then
          echo -e $BrancoBAD"Sobre Samdump2:"$ColorR
          echo -e $Branco"Essa ferramenta foi projetada"$ColorR
          echo -e $Branco"para despejar hashes de senha"$ColorR
          echo -e $Branco"do Windows 2k/NT/XP"$ColorR
          echo -e $Branco"de um arquivo SAM, usando"$ColorR
          echo -e $Branco"a tecla de inicializacao"$ColorR
          echo -e $Branco"syskey do hive do sistema."$ColorR
          echo -e $Branco"Este pacote tambem fornece a"$ColorR
          echo -e $Branco"funcionalidade do bkhive, que"$ColorR
          echo -e $Branco"recupera a chave de"$ColorR
          echo -e $Branco"inicializacao syskey"$ColorR
          echo -e $Branco"de um hive do sistema Windows NT/2K/XP."$ColorR
          echo -e $Branco"Syskey e um recurso do Windows"$ColorR
          echo -e $Branco"que adiciona uma camada de"$ColorR
          echo -e $Branco"criptografia adicional aos"$ColorR
          echo -e $Branco"hashes de senha armazenados"$ColorR
          echo -e $Branco"no banco de dados SAM."$ColorR
          echo -e $Branco"$ samdump2."$ColorR
          echo -e $BrancoBAD"Samdump2 Homepage: http://ophcrack.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/samdump2/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_09i
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                       "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_09i
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "2" ]; then
          echo -e $Color"Instalando Programa Scalpel."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install scalpel
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "2help" ]; then
          echo -e $BrancoBAD"Sobre Scalpel:"$ColorR
          echo -e $Branco"scalpel e um entalhador de arquivos"$ColorR
          echo -e $Branco"rapido que le um banco de dados"$ColorR
          echo -e $Branco"de definicoes de cabecalho e rodape"$ColorR
          echo -e $Branco"e extrai arquivos correspondentes"$ColorR
          echo -e $Branco"de um conjunto de arquivos de"$ColorR
          echo -e $Branco"imagem ou arquivos brutos de dispositivo."$ColorR
          echo -e $Branco"scalpel e independente do"$ColorR
          echo -e $Branco"sistema de arquivos e esculpe"$ColorR
          echo -e $Branco"arquivos de FAT16, FAT32,"$ColorR
          echo -e $Branco"exFAT, NTFS, Ext2, Ext3,"$ColorR
          echo -e $Branco"Ext4, JFS, XFS, ReiserFS, particoes brutas, etc."$ColorR
          echo -e $Branco"scalpel e uma reescrita"$ColorR
          echo -e $Branco"completa do gravador de arquivos"$ColorR
          echo -e $Branco"Foremost 0.69 e, e util"$ColorR
          echo -e $Branco"para investigacoes forenses"$ColorR
          echo -e $Branco"digitais e recuperacao de arquivos."$ColorR
          echo -e $Branco"$ scalpel."$ColorR
          echo -e $BrancoBAD"Scalpel Homepage: http://www.digitalforensicssolutions.com/Scalpel"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/scalpel/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "3" ]; then
          echo -e $Color"Instalando Programa Scrounge-Ntfs."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install scrounge-ntfs
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "3help" ]; then
          echo -e $BrancoBAD"Sobre Scrounge-Ntfs:"$ColorR
          echo -e $Branco"Scrounge NTFS e um programa"$ColorR
          echo -e $Branco"de recuperacao de dados"$ColorR
          echo -e $Branco"para sistemas de arquivos NTFS."$ColorR
          echo -e $Branco"Ele le cada bloco do disco rigido e tenta"$ColorR
          echo -e $Branco"reconstruir a arvore original"$ColorR
          echo -e $Branco"do sistema de arquivos em um diretorio."$ColorR
          echo -e $Branco"Este pacote e util em investigacoes forenses."$ColorR
          echo -e $Branco"$ scrounge-ntfs."$ColorR
          echo -e $BrancoBAD"Scrounge-Ntfs Homepage: http://thewalter.net/stef/software/scrounge/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/scrounge-ntfs/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "4" ]; then
          echo -e $Color"Instalando Programa SleuthKit."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install libtsk-dev
          apt-get -y install libtsk19
          apt-get -y install sleuthkit
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "4help" ]; then
          echo -e $BrancoBAD"Sobre SleuthKit:"$ColorR
          echo -e $Branco"O Sleuth Kit, tambem conhecido"$ColorR
          echo -e $Branco"como TSK, e uma colecao de"$ColorR
          echo -e $Branco"arquivos de linha de comando"$ColorR
          echo -e $Branco"baseados em UNIX e ferramentas"$ColorR
          echo -e $Branco"de analise forense"$ColorR
          echo -e $Branco"de sistema de volume."$ColorR
          echo -e $Branco"As ferramentas do sistema de"$ColorR
          echo -e $Branco"arquivos permitem que voce"$ColorR
          echo -e $Branco"examine os sistemas de arquivos"$ColorR
          echo -e $Branco"de um computador suspeito de"$ColorR
          echo -e $Branco"maneira nao intrusiva."$ColorR
          echo -e $Branco"Como as ferramentas nao dependem"$ColorR
          echo -e $Branco"do sistema operacional para processar"$ColorR
          echo -e $Branco"os sistemas de arquivos, o"$ColorR
          echo -e $Branco"conteudo excluido e oculto e exibido."$ColorR
          echo -e $Branco"As ferramentas do sistema de"$ColorR
          echo -e $Branco"volume (gerenciamento de midia)"$ColorR
          echo -e $Branco"permitem examinar o layout de discos e outras midias."$ColorR
          echo -e $Branco"Voce tambem pode recuperar"$ColorR
          echo -e $Branco"arquivos deletados, obter"$ColorR
          echo -e $Branco"informacoes armazenadas em espacos slack, examinar"$ColorR
          echo -e $Branco"o diario do sistema de arquivos, ver o layout"$ColorR
          echo -e $Branco"das particoes em discos ou imagens etc."$ColorR
          echo -e $Branco"Mas e muito importante esclarecer que o TSK"$ColorR
          echo -e $Branco"atua apenas sobre o sistema de arquivos atual."$ColorR
          echo -e $Branco"O Sleuth Kit suporta particoes DOS, particoes"$ColorR
          echo -e $Branco"BSD (rotulos de disco), particoes Mac, Sun slices"$ColorR
          echo -e $Branco"(Volume Table of Contents) e discos GPT."$ColorR
          echo -e $Branco"Com essas ferramentas, voce"$ColorR
          echo -e $Branco"pode identificar onde as particoes estao"$ColorR
          echo -e $Branco"localizadas e extrai-las"$ColorR
          echo -e $Branco"para que possam ser analisadas"$ColorR
          echo -e $Branco"com ferramentas de analise de sistema de arquivos."$ColorR
          echo -e $Branco"Atualmente, o TSK suporta varios"$ColorR
          echo -e $Branco"sistemas de arquivos, como"$ColorR
          echo -e $Branco"NTFS, FAT, exFAT, HFS+, Ext3, Ext4, UFS e YAFFS2."$ColorR
          echo -e $Branco"Este pacote contem o conjunto"$ColorR
          echo -e $Branco"de ferramentas de linha de comando do The Sleuth Kit."$ColorR
          echo -e $Branco"$ blkcalc."$ColorR
          echo -e $Branco"$ blkstat."$ColorR
          echo -e $Branco"$ fiwalk."$ColorR
          echo -e $Branco"$ hfind."$ColorR
          echo -e $Branco"$ ils."$ColorR
          echo -e $Branco"$ istat."$ColorR
          echo -e $Branco"$ jpeg_extract."$ColorR
          echo -e $Branco"$ mmls."$ColorR
          echo -e $Branco"$ sigfind."$ColorR
          echo -e $Branco"$ tsk_comparedir."$ColorR
          echo -e $Branco"$ tsk_loaddb."$ColorR
          echo -e $Branco"$ blkcat."$ColorR
          echo -e $Branco"$ fcat."$ColorR
          echo -e $Branco"$ fls."$ColorR
          echo -e $Branco"$ icat."$ColorR
          echo -e $Branco"$ img_cat."$ColorR
          echo -e $Branco"$ jcat."$ColorR
          echo -e $Branco"$ mactime."$ColorR
          echo -e $Branco"$ mmstat."$ColorR
          echo -e $Branco"$ sorter."$ColorR
          echo -e $Branco"$ tsk_gettimes."$ColorR
          echo -e $Branco"$ tsk_recover."$ColorR
          echo -e $Branco"$ blkls."$ColorR
          echo -e $Branco"$ ffind."$ColorR
          echo -e $Branco"$ fsstat."$ColorR
          echo -e $Branco"$ ifind."$ColorR
          echo -e $Branco"$ img_stat."$ColorR
          echo -e $Branco"$ jls."$ColorR
          echo -e $Branco"$ mmcat."$ColorR
          echo -e $Branco"$ pstat."$ColorR
          echo -e $Branco"$ srch_strings."$ColorR
          echo -e $Branco"$ tsk_imageinfo."$ColorR
          echo -e $Branco"$ usnjls."$ColorR
          echo -e $BrancoBAD"SleuthKit Homepage: http://www.sleuthkit.org/sleuthkit"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sleuthkit/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "5" ]; then
          echo -e $Color"Instalando Programa Smali."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install smali
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "5help" ]; then
          echo -e $BrancoBAD"Sobre Smali:"$ColorR
          echo -e $Branco"smali/baksmali e um"$ColorR
          echo -e $Branco"montador/desmontador"$ColorR
          echo -e $Branco"para o formato dex usado"$ColorR
          echo -e $Branco"por dalvik, a implementacao"$ColorR
          echo -e $Branco"de Java VM do Android."$ColorR
          echo -e $Branco"A sintaxe e vagamente baseada"$ColorR
          echo -e $Branco"na sintaxe de Jasmin/dedexer"$ColorR
          echo -e $Branco"e suporta a funcionalidade"$ColorR
          echo -e $Branco"completa do formato"$ColorR
          echo -e $Branco"dex (anotacoes, informacoes"$ColorR
          echo -e $Branco"de depuracao, informacoes de linha, etc.)"$ColorR
          echo -e $Branco"$ baksmali."$ColorR
          echo -e $Branco"$ smali."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/JesusFreke/smali"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/smali/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "6" ]; then
          echo -e $Color"Instalando Programa SQLiteBrowser."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sqlitebrowser
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "6help" ]; then
          echo -e $BrancoBAD"Sobre SQLiteBrowser:"$ColorR
          echo -e $Branco"SQLite Database Browser"$ColorR
          echo -e $Branco"e uma ferramenta visual usada"$ColorR
          echo -e $Branco"para criar, projetar e editar"$ColorR
          echo -e $Branco"arquivos de banco de dados"$ColorR
          echo -e $Branco"compativeis com SQLite."$ColorR
          echo -e $Branco"Sua interface e baseada em QT"$ColorR
          echo -e $Branco"e destina-se a usuarios e"$ColorR
          echo -e $Branco"desenvolvedores que desejam"$ColorR
          echo -e $Branco"criar bancos de dados, editar"$ColorR
          echo -e $Branco"e pesquisar dados usando uma"$ColorR
          echo -e $Branco"interface familiar semelhante"$ColorR
          echo -e $Branco"a uma planilha, sem a necessidade"$ColorR
          echo -e $Branco"de aprender comandos SQL complicados."$ColorR
          echo -e $BrancoBAD"Controles e assistentes"$ColorR
          echo -e $BrancoBAD"estao disponiveis para os usuarios:"$ColorR
          echo -e $Branco"* Criar e compactar arquivos de banco de dados."$ColorR
          echo -e $Branco"* Criar, definir, modificar e excluir tabelas."$ColorR
          echo -e $Branco"* Criar, definir e excluir indices."$ColorR
          echo -e $Branco"* Navegue, edite, adicione e exclua registros."$ColorR
          echo -e $Branco"* Pesquisar registros."$ColorR
          echo -e $Branco"* Importar e exportar registros como texto."$ColorR
          echo -e $Branco"* Importar e exportar tabelas de/para arquivos CSV."$ColorR
          echo -e $Branco"* Importar e exportar bancos"$ColorR
          echo -e $Branco"de dados de/para arquivos dump SQL."$ColorR
          echo -e $Branco"* Emita consultas SQL e inspecione os resultados."$ColorR
          echo -e $Branco"* Examine um log de todos os comandos"$ColorR
          echo -e $Branco"SQL emitidos pelo aplicativo."$ColorR
          echo -e $Branco"O SQLite Database Browser nao e"$ColorR
          echo -e $Branco"um shell visual para a"$ColorR
          echo -e $Branco"ferramenta de linha de comando sqlite."$ColorR
          echo -e $Branco"Nao requer familiaridade com comandos SQL."$ColorR
          echo -e $Branco"$ sqlitebrowser."$ColorR
          echo -e $BrancoBAD"SQLiteBrowser Homepage: https://sqlitebrowser.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sqlitebrowser/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "7" ]; then
          echo -e $Color"Instalando Programa SSdeep."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ssdeep
          apt-get -y install libfuzzy2
          apt-get -y install libfuzzy-dev
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "7help" ]; then
          echo -e $BrancoBAD"Sobre SSdeep:"$ColorR
          echo -e $Branco"ssdeep e uma ferramenta"$ColorR
          echo -e $Branco"para computacao recursiva e"$ColorR
          echo -e $Branco"correspondencia de Context Triggered Piecewise"$ColorR
          echo -e $Branco"Hashing (tambem conhecido como Fuzzy Hashing)."$ColorR
          echo -e $Branco"O hash difuso e um metodo"$ColorR
          echo -e $Branco"para comparar arquivos"$ColorR
          echo -e $Branco"semelhantes, mas nao identicos."$ColorR
          echo -e $Branco"Esta ferramenta pode ser usada"$ColorR
          echo -e $Branco"para comparar arquivos como"$ColorR
          echo -e $Branco"o hashing regular (como md5sum"$ColorR
          echo -e $Branco"ou sha1sum), mas encontrara"$ColorR
          echo -e $Branco"arquivos semelhantes com pequenas diferencas."$ColorR
          echo -e $Branco"Por exemplo, ele pode ser usado"$ColorR
          echo -e $Branco"para identificar versoes"$ColorR
          echo -e $Branco"modificadas de arquivos"$ColorR
          echo -e $Branco"conhecidos, mesmo que os dados"$ColorR
          echo -e $Branco"tenham sido inseridos, modificados"$ColorR
          echo -e $Branco"ou excluidos nos novos arquivos."$ColorR
          echo -e $Branco"Este pacote e util em investigacoes forenses."$ColorR
          echo -e $Branco"$ ssdeep."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/ssdeep-project/ssdeep"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ssdeep/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "8" ]; then
          echo -e $Color"Instalando Programa Tcpdump."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install tcpdump
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "8help" ]; then
          echo -e $BrancoBAD"Sobre Tcpdump:"$ColorR
          echo -e $Branco"Este programa permite que"$ColorR
          echo -e $Branco"voce despeje o trafego em uma rede."$ColorR
          echo -e $Branco"O tcpdump e capaz de examinar"$ColorR
          echo -e $Branco"IPv4, ICMPv4, IPv6, ICMPv6,"$ColorR
          echo -e $Branco"UDP, TCP, SNMP, AFS BGP,"$ColorR
          echo -e $Branco"RIP, PIM, DVMRP, IGMP, SMB,"$ColorR
          echo -e $Branco"OSPF, NFS e muitos outros tipos de pacotes."$ColorR
          echo -e $Branco"Ele pode ser usado"$ColorR
          echo -e $Branco"para imprimir os cabecalhos"$ColorR
          echo -e $Branco"dos pacotes em uma interface"$ColorR
          echo -e $Branco"de rede, filtrar os pacotes"$ColorR
          echo -e $Branco"que correspondem a uma determinada expressao."$ColorR
          echo -e $Branco"Voce pode usar essa ferramenta"$ColorR
          echo -e $Branco"para rastrear problemas"$ColorR
          echo -e $Branco"de rede, detectar ataques"$ColorR
          echo -e $Branco"ou monitorar atividades de rede."$ColorR
          echo -e $Branco"$ tcpdump."$ColorR
          echo -e $BrancoBAD"Tcpdump Homepage: https://www.tcpdump.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/tcpdump/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "9" ]; then
          echo -e $Color"Instalando Programa Tcpflow."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install tcpflow
          apt-get -y install tcpflow-nox
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "9help" ]; then
          echo -e $BrancoBAD"Sobre Tcpflow:"$ColorR
          echo -e $Branco"tcpflow e um programa que captura"$ColorR
          echo -e $Branco"dados transmitidos"$ColorR
          echo -e $Branco"como parte de conexoes TCP (fluxos)"$ColorR
          echo -e $Branco"e armazena os dados"$ColorR
          echo -e $Branco"de uma maneira conveniente"$ColorR
          echo -e $Branco"para analise ou depuracao de protocolo."$ColorR
          echo -e $Branco"Um programa como o “tcpdump” mostra"$ColorR
          echo -e $Branco"um resumo dos pacotes vistos"$ColorR
          echo -e $Branco"no fio, mas geralmente nao armazena"$ColorR
          echo -e $Branco"os dados que estao sendo transmitidos."$ColorR
          echo -e $Branco"Em contraste, o tcpflow reconstroi"$ColorR
          echo -e $Branco"os fluxos de dados reais e armazena"$ColorR
          echo -e $Branco"cada fluxo em um arquivo separado"$ColorR
          echo -e $Branco"para analise posterior."$ColorR
          echo -e $Branco"O tcpflow entende os numeros de"$ColorR
          echo -e $Branco"sequencia e reconstruira corretamente"$ColorR
          echo -e $Branco"os fluxos de dados, independentemente"$ColorR
          echo -e $Branco"de retransmissoes"$ColorR
          echo -e $Branco"ou entregas fora de ordem."$ColorR
          echo -e $Branco"No entanto, atualmente nao entende fragmentos de IP;"$ColorR
          echo -e $Branco"fluxos contendo fragmentos de IP nao"$ColorR
          echo -e $Branco"serao registrados corretamente."$ColorR
          echo -e $Branco"O tcpflow e baseado na LBL Packet"$ColorR
          echo -e $Branco"Capture Library e, portanto, suporta as"$ColorR
          echo -e $Branco"mesmas expressoes de filtragem ricas que"$ColorR
          echo -e $Branco"programas como 'tcpdump' suportam."$ColorR
          echo -e $Branco"O tcpflow tambem pode reconstruir fluxos de dados"$ColorR
          echo -e $Branco"capturados com “tcpdump -w”."$ColorR
          echo -e $Branco"$ tcpflow."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/simsong/tcpflow"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/tcpflow/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "10" ]; then
          echo -e $Color"Instalando Programa Polenum."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install polenum
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "10help" ]; then
          echo -e $BrancoBAD"Sobre Polenum:"$ColorR
          echo -e $Branco"polenum e um script Python que usa a Biblioteca"$ColorR
          echo -e $Branco"Impacket da CORE Security Technologies"$ColorR
          echo -e $Branco"para extrair as informacoes de politica"$ColorR
          echo -e $Branco"de senha de uma maquina Windows."$ColorR
          echo -e $Branco"Isso permite que um usuario nao Windows"$ColorR
          echo -e $Branco"(Linux, Mac OSX, BSD etc.)"$ColorR
          echo -e $Branco"consulte a politica de senha de uma caixa Windows"$ColorR
          echo -e $Branco"remota sem a necessidade de"$ColorR
          echo -e $Branco"ter acesso a uma maquina Windows."$ColorR
          echo -e $Branco"$ polenum."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/Wh1t3Fox/polenum/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/polenum/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "11" ]; then
          echo -e $Color"Instalando Programa Tcpick."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install tcpick
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "11help" ]; then
          echo -e $BrancoBAD"Sobre Tcpick:"$ColorR
          echo -e $BrancoBAD"Este sniffer de modo de texto"$ColorR
          echo -e $BrancoBAD"baseado em libpcap pode:"$ColorR
          echo -e $Branco"* rastrear, remontar e reordenar fluxos TCP."$ColorR
          echo -e $Branco"* salve os fluxos capturados em arquivos"$ColorR
          echo -e $Branco"diferentes ou exiba-os no terminal."$ColorR
          echo -e $Branco"* exibir todo o fluxo no"$ColorR
          echo -e $Branco"terminal com diferentes modos"$ColorR
          echo -e $Branco"de exibicao como hexdump,"$ColorR
          echo -e $Branco"hexdump + ascii, apenas"$ColorR
          echo -e $Branco"caracteres imprimiveis,"$ColorR
          echo -e $Branco"modo bruto, modo colorido…"$ColorR
          echo -e $Branco"* lidar com varios tipos"$ColorR
          echo -e $Branco"de interface de rede,"$ColorR
          echo -e $Branco"incluindo placas ethernet e interfaces PPP"$ColorR
          echo -e $Branco"$ tcpick."$ColorR
          echo -e $BrancoBAD"Tcpick Homepage: http://tcpick.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/tcpick/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "12" ]; then
          echo -e $Color"Instalando Programa Tcpreplay."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install tcpreplay
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "12help" ]; then
          echo -e $BrancoBAD"Sobre Tcpreplay:"$ColorR
          echo -e $Branco"O Tcpreplay tem como objetivo testar o desempenho"$ColorR
          echo -e $Branco"de um NIDS reproduzindo o trafego de rede em segundo"$ColorR
          echo -e $Branco"plano real para ocultar os ataques."$ColorR
          echo -e $Branco"Tcpreplay permite controlar a velocidade"$ColorR
          echo -e $Branco"na qual o trafego e reproduzido e pode reproduzir"$ColorR
          echo -e $Branco"rastreamentos tcpdump arbitrarios."$ColorR
          echo -e $Branco"Ao contrario do trafego artificial"$ColorR
          echo -e $Branco"gerado programaticamente"$ColorR
          echo -e $Branco"que nao exerce a inspecao de aplicativo/protocolo"$ColorR
          echo -e $Branco"que um NIDS executa e nao reproduz as anomalias"$ColorR
          echo -e $Branco"do mundo real que aparecem"$ColorR
          echo -e $Branco"nas redes de producao"$ColorR
          echo -e $Branco"(rotas assimetricas, rajadas/interrupcoes de trafego,"$ColorR
          echo -e $Branco"fragmentacao, retransmissoes, etc.), o tcpreplay permite"$ColorR
          echo -e $Branco"a replicacao exata do trafego real visto em redes reais."$ColorR
          echo -e $Branco"Ele incluiu os seguintes executaveis ​​tcpprep,"$ColorR
          echo -e $Branco"tcprewrite, tcpreplay-edit, tcpbridge e capturas baseadas"$ColorR
          echo -e $Branco"em pcap sao possiveis."$ColorR
          echo -e $Branco"$ tcpreplay."$ColorR
          echo -e $Branco"$ tcpbridge."$ColorR
          echo -e $Branco"$ tcpcapinfo."$ColorR
          echo -e $Branco"$ tcpliveplay."$ColorR
          echo -e $Branco"$ tcpprep."$ColorR
          echo -e $Branco"$ tcpreplay-edit."$ColorR
          echo -e $Branco"$ tcprewrite."$ColorR
          echo -e $BrancoBAD"Tcpreplay Homepage: http://tcpreplay.appneta.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/tcpreplay/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "13" ]; then
          echo -e $Color"Instalando Programa TrueCrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install truecrack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "13help" ]; then
          echo -e $BrancoBAD"Sobre TrueCrack:"$ColorR
          echo -e $Branco"TrueCrack e um cracker de senha"$ColorR
          echo -e $Branco"bruteforce para volume TrueCrypt (Copyright)."$ColorR
          echo -e $Branco"E otimizado com a tecnologia Nvidia Cuda."$ColorR
          echo -e $Branco"Funciona com PBKDF2 (definido em PKCS5 v2.0)"$ColorR
          echo -e $Branco"baseado na funcao de derivacao"$ColorR
          echo -e $Branco"de chave RIPEMD160 e modo"$ColorR
          echo -e $Branco"de operacao de cifra de bloco XTS"$ColorR
          echo -e $Branco"usado para criptografia"$ColorR
          echo -e $Branco"de disco rigido baseada em AES."$ColorR
          echo -e $Branco"$ truecrack."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/lvaccaro/truecrack"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/truecrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "14" ]; then
          echo -e $Color"Instalando Programa UnDBX."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install undbx
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "14help" ]; then
          echo -e $BrancoBAD"Sobre UnDBX:"$ColorR
          echo -e $Branco"UnDBX e uma ferramenta"$ColorR
          echo -e $Branco"para extrair, recuperar"$ColorR
          echo -e $Branco"e recuperar mensagens"$ColorR
          echo -e $Branco"de e-mail de arquivos .dbx"$ColorR
          echo -e $Branco"do MS Outlook Express"$ColorR
          echo -e $Branco"(ou programas de e-mail"$ColorR
          echo -e $Branco"semelhantes no MS Windows)."$ColorR
          echo -e $Branco"Arquivos .dbx corrompidos"$ColorR
          echo -e $Branco"podem ser analisados"$ColorR
          echo -e $Branco"para tentar recuperar mensagens dele."$ColorR
          echo -e $Branco"Ele tambem pode tentar"$ColorR
          echo -e $Branco"recuperar mensagens, nao"$ColorR
          echo -e $Branco"apenas de itens excluidos,"$ColorR
          echo -e $Branco"mas tambem de fragmentos"$ColorR
          echo -e $Branco"de mensagens excluidas"$ColorR
          echo -e $Branco"que nao foram substituidas."$ColorR
          echo -e $Branco"UnDBX e util em investigacoes forenses."$ColorR
          echo -e $Branco"$ undbx."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/ZungBang/undbx"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/undbx/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "15" ]; then
          echo -e $Color"Instalando Programa Unhide."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install unhide
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "15help" ]; then
          echo -e $BrancoBAD"Sobre Unhide:"$ColorR
          echo -e $Branco"Unhide e uma ferramenta forense"$ColorR
          echo -e $Branco"para encontrar processos e portas TCP/UDP"$ColorR
          echo -e $Branco"ocultas por rootkits, modulos"$ColorR
          echo -e $Branco"do kernel Linux ou por outras tecnicas."$ColorR
          echo -e $Branco"Inclui dois utilitarios: unhide e unhide-tcp."$ColorR
          echo -e $BrancoBAD"unhide detecta processos"$ColorR
          echo -e $BrancoBAD"ocultos usando as seis tecnicas a seguir:"$ColorR
          echo -e $Branco"* Comparar a saida /proc vs /bin/ps."$ColorR
          echo -e $Branco"* Compare as informacoes coletadas"$ColorR
          echo -e $Branco"de /bin/ps com as informacoes"$ColorR
          echo -e $Branco"coletadas percorrendo os procfs."$ColorR
          echo -e $Branco"* Compare as informacoes coletadas de /bin/ps"$ColorR
          echo -e $Branco"com as informacoes coletadas"$ColorR
          echo -e $Branco"de syscalls (varredura de syscall)."$ColorR
          echo -e $Branco"* Ocupacao total do espaco de"$ColorR
          echo -e $Branco"PIDs (bruteforceing de PIDs)."$ColorR
          echo -e $Branco"* Pesquisa reversa, verifique"$ColorR
          echo -e $Branco"se todos os threads vistos"$ColorR
          echo -e $Branco"por ps tambem sao vistos"$ColorR
          echo -e $Branco"pelo kernel (/bin/ps output"$ColorR
          echo -e $Branco"vs /proc, procfs walking e syscall)."$ColorR
          echo -e $Branco"* Comparacao rapida /proc, procfs"$ColorR
          echo -e $Branco"walking e syscall vs saida /bin/ps."$ColorR
          echo -e $Branco"unhide-tcp identifica as portas TCP/UDP"$ColorR
          echo -e $Branco"que estao escutando, mas"$ColorR
          echo -e $Branco"nao estao listadas em /bin/netstat"$ColorR
          echo -e $Branco"por meio de forca bruta"$ColorR
          echo -e $Branco"de todas as portas TCP/UDP disponiveis."$ColorR
          echo -e $Branco"Este pacote pode ser usado"$ColorR
          echo -e $Branco"pelo rkhunter em suas verificacoes diarias."$ColorR
          echo -e $Branco"Este pacote e util para verificacoes"$ColorR
          echo -e $Branco"de seguranca de rede, alem de investigacoes forenses."$ColorR
          echo -e $Branco"$ unhide."$ColorR
          echo -e $Branco"$ unhide-tcp."$ColorR
          echo -e $Branco"$ unhide-linux."$ColorR
          echo -e $Branco"$ unhide_rb."$ColorR
          echo -e $Branco"$ unhide-posix."$ColorR
          echo -e $BrancoBAD"Unhide Homepage: http://www.unhide-forensics.info/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/unhide/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "16" ]; then
          echo -e $Color"Instalando Programa Unrar-Nonfree."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install libunrar-dev
          apt-get -y install libunrar-headers
          apt-get -y install libunrar5
          apt-get -y install unrar
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "16help" ]; then
          echo -e $BrancoBAD"Sobre Unrar-Nonfree:"$ColorR
          echo -e $Branco"Unrar pode extrair arquivos"$ColorR
          echo -e $Branco"de arquivos .rar."$ColorR
          echo -e $Branco"Se voce deseja criar"$ColorR
          echo -e $Branco"arquivos .rar, instale o pacote rar."$ColorR
          echo -e $Branco"$ unrar-nonfree."$ColorR
          echo -e $BrancoBAD"Unrar-Nonfree Homepage: https://www.rarlab.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/unrar-nonfree/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "17" ]; then
          echo -e $Color"Instalando Programa Unar."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install unar
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "17help" ]; then
          echo -e $BrancoBAD"Sobre Unar:"$ColorR
          echo -e $Branco"O Unarchiver e um programa"$ColorR
          echo -e $Branco"de descompactador de arquivos"$ColorR
          echo -e $Branco"com suporte para os populares"$ColorR
          echo -e $Branco"formatos de arquivo zip, RAR,"$ColorR
          echo -e $Branco"7z, tar, gzip, bzip2, LZMA,"$ColorR
          echo -e $Branco"XZ, CAB, MSI, NSIS, EXE,"$ColorR
          echo -e $Branco"ISO, BIN e split, bem como"$ColorR
          echo -e $Branco"os antigos Stuffit, Stuffit X, DiskDouble,"$ColorR
          echo -e $Branco"Compact Pro, Packit, cpio,"$ColorR
          echo -e $Branco"compress (.Z), ARJ, ARC, PAK,"$ColorR
          echo -e $Branco"ACE, ZOO, LZH, ADF, DMS,"$ColorR
          echo -e $Branco"LZX, PowerPacker, LBR,"$ColorR
          echo -e $Branco"Squeeze, Crunch e outros formatos antigos."$ColorR
          echo -e $Branco"$ unar."$ColorR
          echo -e $BrancoBAD"Unar Homepage: https://theunarchiver.com/command-line"$ColorR
          echo -e $BrancoBAD"Kali: http://pkg.kali.org/pkg/unar"$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "18" ]; then
          echo -e $Color"Instalando Programa Upx-Ucl."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install upx-ucl
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "18help" ]; then
          echo -e $BrancoBAD"Sobre Upx-Ucl:"$ColorR
          echo -e $Branco"UPX e um compressor de"$ColorR
          echo -e $Branco"arquivo executavel avancado."$ColorR
          echo -e $Branco"O UPX normalmente reduz"$ColorR
          echo -e $Branco"o tamanho do arquivo de"$ColorR
          echo -e $Branco"programas e DLLs em cerca"$ColorR
          echo -e $Branco"de 50%-70%, reduzindo assim"$ColorR
          echo -e $Branco"o espaco em disco, tempos de"$ColorR
          echo -e $Branco"carregamento de rede, tempos de download, etc."$ColorR
          echo -e $Branco"A versao atual pode compactar executaveis"$ColorR
          echo -e $Branco"para DOS, Linux/ELF (i386, amd64, ppc32)"$ColorR
          echo -e $Branco"e alguns outros arquivos"$ColorR
          echo -e $Branco"para sistemas operacionais diferentes."$ColorR
          echo -e $Branco"NOTA: Este pacote e baseado"$ColorR
          echo -e $Branco"na biblioteca UCL, que e licenciada sob GPL."$ColorR
          echo -e $Branco"$ upx-ucl."$ColorR
          echo -e $BrancoBAD"Upx-Ucl Homepage: https://upx.github.io/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/upx-ucl/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "19" ]; then
          echo -e $Color"Instalando Programa Vinetto."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install vinetto
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "19help" ]; then
          echo -e $BrancoBAD"Sobre Vinetto:"$ColorR
          echo -e $Branco"vinetto e um programa de console"$ColorR
          echo -e $Branco"para extrair imagens em"$ColorR
          echo -e $Branco"miniatura e seus metadados"$ColorR
          echo -e $Branco"de arquivos Thumbs.db, que"$ColorR
          echo -e $Branco"sao gerados no Microsoft Windows."$ColorR
          echo -e $BrancoBAD"O vinetto pode ajudar os"$ColorR
          echo -e $BrancoBAD"investigadores forenses baseados em *nix a:"$ColorR
          echo -e $Branco"* visualizar facilmente"$ColorR
          echo -e $Branco"miniaturas de imagens excluidas"$ColorR
          echo -e $Branco"em sistemas Windows;"$ColorR
          echo -e $Branco"* obter informacoes (datas, caminho, …)"$ColorR
          echo -e $Branco"sobre fotos excluidas."$ColorR
          echo -e $Branco"$ vinetto."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/AtesComp/Vinetto"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/vinetto/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "20" ]; then
          echo -e $Color"Instalando Programa WCE."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install wce
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "20help" ]; then
          echo -e $BrancoBAD"Sobre WCE:"$ColorR
          echo -e $Branco"O Editor de Credenciais do"$ColorR
          echo -e $Branco"Windows (WCE) v1.3beta permite:"$ColorR
          echo -e $BrancoBAD"Autenticacao NTLM:"$ColorR
          echo -e $Branco"* Listar sessoes de logon e"$ColorR
          echo -e $Branco"adicionar, alterar, listar e"$ColorR
          echo -e $Branco"excluir credenciais associadas"$ColorR
          echo -e $Branco"(por exemplo: hashes LM/NT)."$ColorR
          echo -e $Branco"* Execute o pass-the-hash no Windows nativamente."$ColorR
          echo -e $Branco"* Obtenha hashes NT/LM"$ColorR
          echo -e $Branco"da memoria (de logons interativos,"$ColorR
          echo -e $Branco"servicos, conexoes de area"$ColorR
          echo -e $Branco"de trabalho remota, etc.)"$ColorR
          echo -e $Branco"que podem ser usados"$ColorR
          echo -e $Branco"para autenticacao"$ColorR
          echo -e $Branco"em outros sistemas."$ColorR
          echo -e $Branco"O WCE pode realizar essa tarefa"$ColorR
          echo -e $Branco"sem injetar codigo, apenas lendo"$ColorR
          echo -e $Branco"e descriptografando as informacoes"$ColorR
          echo -e $Branco"armazenadas nas estruturas de"$ColorR
          echo -e $Branco"memoria interna do Windows."$ColorR
          echo -e $Branco"Ele tambem tem a capacidade"$ColorR
          echo -e $Branco"de alternar automaticamente"$ColorR
          echo -e $Branco"para injecao de codigo quando"$ColorR
          echo -e $Branco"o metodo mencionado acima"$ColorR
          echo -e $Branco"nao pode ser executado."$ColorR
          echo -e $Branco"$ wce."$ColorR
          echo -e $BrancoBAD"WCE Homepage: http://www.ampliasecurity.com/research.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/wce/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "21" ]; then
          echo -e $Color"Instalando Programa Winregfs."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install winregfs
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "21help" ]; then
          echo -e $BrancoBAD"Sobre Winregfs:"$ColorR
          echo -e $Branco"Winregfs e um driver de sistema"$ColorR
          echo -e $Branco"de arquivos baseado em FUSE"$ColorR
          echo -e $Branco"que permite o acesso a arquivos"$ColorR
          echo -e $Branco"hive de registro do Windows"$ColorR
          echo -e $Branco"como sistemas de arquivos comuns."$ColorR
          echo -e $Branco"A edicao do arquivo Hive"$ColorR
          echo -e $Branco"do Registro pode ser realizada"$ColorR
          echo -e $Branco"com scripts de shell comuns"$ColorR
          echo -e $Branco"e ferramentas de linha de"$ColorR
          echo -e $Branco"comando, uma vez montadas."$ColorR
          echo -e $Branco"O fsck.winregfs verifica um"$ColorR
          echo -e $Branco"arquivo hive do registro do"$ColorR
          echo -e $Branco"Windows em busca de problemas"$ColorR
          echo -e $Branco"que indicam que o hive foi"$ColorR
          echo -e $Branco"danificado por problemas"$ColorR
          echo -e $Branco"de hardware ou software, lendo"$ColorR
          echo -e $Branco"recursivamente as estruturas"$ColorR
          echo -e $Branco"de dados de chave e valor no hive do registro."$ColorR
          echo -e $Branco"Este pacote fornece os comandos"$ColorR
          echo -e $Branco"mount.winregfs e fsck.winregfs."$ColorR
          echo -e $Branco"Winregfs e util para pentesters,"$ColorR
          echo -e $Branco"hackers eticos e especialistas forenses."$ColorR
          echo -e $Branco"$ fsck.winregfs."$ColorR
          echo -e $Branco"$ mount.winregfs."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/jbruchon/winregfs"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/winregfs/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "22" ]; then
          echo -e $Color"Instalando Programa Wireshark."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install libwireshark-data
          apt-get -y install libwireshark-dev
          apt-get -y install libwireshark15
          apt-get -y install libwiretap-dev
          apt-get -y install libwiretap12
          apt-get -y install libwsutil-dev
          apt-get -y install libwsutil13
          apt-get -y install tshark
          apt-get -y install wireshark
          apt-get -y install wireshark-common
          apt-get -y install wireshark-dev
          apt-get -y install wireshark-doc
          apt-get -y install wireshark-gtk
          apt-get -y install wireshark-qt
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "22help" ]; then
          echo -e $BrancoBAD"Sobre Wireshark:"$ColorR
          echo -e $Branco"Wireshark e um “sniffer” de rede - uma ferramenta"$ColorR
          echo -e $Branco"que captura e analisa pacotes fora do fio."$ColorR
          echo -e $Branco"O Wireshark pode decodificar muitos protocolos"$ColorR
          echo -e $Branco"$ tshark."$ColorR
          echo -e $Branco"$ capinfos."$ColorR
          echo -e $Branco"$ editcap."$ColorR
          echo -e $Branco"$ randpkt."$ColorR
          echo -e $Branco"$ sharkd."$ColorR
          echo -e $Branco"$ captype."$ColorR
          echo -e $Branco"$ mergecap."$ColorR
          echo -e $Branco"$ rawshark."$ColorR
          echo -e $Branco"$ text2pcap."$ColorR
          echo -e $Branco"$ dumpcap."$ColorR
          echo -e $Branco"$ mmdbresolve."$ColorR
          echo -e $Branco"$ reordercap."$ColorR
          echo -e $Branco"$ asn2deb."$ColorR
          echo -e $Branco"$ idl2deb."$ColorR
          echo -e $Branco"$ idl2wrs."$ColorR
          echo -e $Branco"$ wireshark."$ColorR
          echo -e $Branco"para listar aqui."$ColorR
          echo -e $BrancoBAD"Wireshark Homepage: https://www.wireshark.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/wireshark"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "23" ]; then
          echo -e $Color"Instalando Programa Xmount."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install xmount
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "23help" ]; then
          echo -e $BrancoBAD"Sobre Xmount:"$ColorR
          echo -e $Branco"xmount pode ser usado"$ColorR
          echo -e $Branco"para inicializar imagens"$ColorR
          echo -e $Branco"de disco forenses com QEMU,"$ColorR
          echo -e $Branco"KVM, VirtualBox, VMware ou"$ColorR
          echo -e $Branco"similares, pois suporta acesso"$ColorR
          echo -e $Branco"de gravacao virtual com"$ColorR
          echo -e $Branco"redirecionamento para um arquivo de cache."$ColorR
          echo -e $Branco"xmount converte entre varios"$ColorR
          echo -e $Branco"tipos de imagem de disco"$ColorR
          echo -e $Branco"de entrada e saida em tempo"$ColorR
          echo -e $Branco"real, usando FUSE (Filesystem in Userspace)"$ColorR
          echo -e $Branco"para criar um sistema de"$ColorR
          echo -e $Branco"arquivos virtual que representa"$ColorR
          echo -e $Branco"a imagem de entrada."$ColorR
          echo -e $Branco"A representacao virtual"$ColorR
          echo -e $Branco"pode estar em formato"$ColorR
          echo -e $Branco"raw DD, DMG, VirtualBox VDI,"$ColorR
          echo -e $Branco"formato Microsoft VHD"$ColorR
          echo -e $Branco"ou formato VMware VMDK;"$ColorR
          echo -e $Branco"as imagens de entrada podem"$ColorR
          echo -e $Branco"ser arquivos raw DD, EWF"$ColorR
          echo -e $Branco"(Expert Witness Compression Format)"$ColorR
          echo -e $Branco"ou AFF (Advanced Forensic Format)."$ColorR
          echo -e $Branco"$ xmount."$ColorR
          echo -e $BrancoBAD"Xmount Homepage: https://www.pinguin.lu/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/xmount/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "24" ]; then
          echo -e $Color"Instalando Programa Xplico."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install xplico
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "24help" ]; then
          echo -e $BrancoBAD"Sobre Xplico:"$ColorR
          echo -e $Branco"O objetivo do Xplico e extrair de uma captura de"$ColorR
          echo -e $Branco"trafego de internet os dados"$ColorR
          echo -e $Branco"dos aplicativos contidos."$ColorR
          echo -e $Branco"Por exemplo, de um arquivo pcap, o Xplico extrai"$ColorR
          echo -e $Branco"cada e-mail (protocolos POP, IMAP e SMTP), todo o"$ColorR
          echo -e $Branco"conteudo HTTP, cada chamada VoIP (SIP, MGCP, H323), FTP, TFTP"$ColorR
          echo -e $Branco"e assim por diante."$ColorR
          echo -e $Branco"Xplico nao e um analisador de protocolo de rede."$ColorR
          echo -e $Branco"$ mfbc."$ColorR
          echo -e $Branco"$ mwmail."$ColorR
          echo -e $Branco"$ xplico-webui."$ColorR
          echo -e $Branco"$ mfile."$ColorR
          echo -e $Branco"$ trigcap."$ColorR
          echo -e $Branco"$ xplico-webui-stop."$ColorR
          echo -e $Branco"$ mpaltalk."$ColorR
          echo -e $Branco"$ xplico."$ColorR
          echo -e $BrancoBAD"Xplico Homepage: http://www.xplico.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/xplico/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "25" ]; then
          echo -e $Color"Instalando Programa YARA."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install yara-doc
          apt-get -y install yara
          apt-get -y install libyara9
          apt-get -y install libyara-dev
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "25help" ]; then
          echo -e $BrancoBAD"Sobre YARA:"$ColorR
          echo -e $Branco"YARA e uma ferramenta destinada"$ColorR
          echo -e $Branco"a ajudar os pesquisadores de"$ColorR
          echo -e $Branco"malware a identificar e"$ColorR
          echo -e $Branco"classificar amostras de malware."$ColorR
          echo -e $Branco"Com o YARA, e possivel criar"$ColorR
          echo -e $Branco"descricoes de familias de malware"$ColorR
          echo -e $Branco"com base em padroes textuais"$ColorR
          echo -e $Branco"ou binarios contidos"$ColorR
          echo -e $Branco"em amostras dessas familias."$ColorR
          echo -e $Branco"Cada descricao consiste"$ColorR
          echo -e $Branco"em um conjunto de strings e uma"$ColorR
          echo -e $Branco"expressao booleana que determina sua logica."$ColorR
          echo -e $Branco"Regras complexas e poderosas"$ColorR
          echo -e $Branco"podem ser criadas usando"$ColorR
          echo -e $Branco"strings binarias"$ColorR
          echo -e $Branco"com curingas, strings de texto"$ColorR
          echo -e $Branco"que nao diferenciam"$ColorR
          echo -e $Branco"maiusculas de minusculas,"$ColorR
          echo -e $Branco"operadores especiais, expressoes"$ColorR
          echo -e $Branco"regulares e muitos outros recursos."$ColorR
          echo -e $Branco"$ yara."$ColorR
          echo -e $Branco"$ yarac."$ColorR
          echo -e $BrancoBAD"YARA Homepage: https://virustotal.github.io/yara/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/yara/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "26" ]; then
          echo -e $Color"Instalando Programa LVM2."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dmeventd
          apt-get -y install dmsetup
          apt-get -y install libdevmapper-dev
          apt-get -y install libdevmapper-event1.02.1
          apt-get -y install libdevmapper1.02.1
          apt-get -y install liblvm2-dev
          apt-get -y install liblvm2cmd2.03
          apt-get -y install lvm2
          apt-get -y install lvm2-dbusd
          apt-get -y install lvm2-lockd
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "26help" ]; then
          echo -e $BrancoBAD"Sobre LVM2:"$ColorR
          echo -e $Branco"Este e o LVM2, a reescrita"$ColorR
          echo -e $Branco"do Linux Logical Volume Manager."$ColorR
          echo -e $Branco"O LVM oferece suporte ao"$ColorR
          echo -e $Branco"gerenciamento de volume de nivel"$ColorR
          echo -e $Branco"empresarial de disco e subsistemas"$ColorR
          echo -e $Branco"de disco, agrupando discos"$ColorR
          echo -e $Branco"arbitrarios em grupos de volumes."$ColorR
          echo -e $Branco"A capacidade total dos grupos de"$ColorR
          echo -e $Branco"volumes pode ser alocada"$ColorR
          echo -e $Branco"para volumes logicos, que sao"$ColorR
          echo -e $Branco"acessados como dispositivos de bloco regulares."$ColorR
          echo -e $Branco"$ dmeventd."$ColorR
          echo -e $Branco"$ blkdeactivate."$ColorR
          echo -e $Branco"$ dmsetup."$ColorR
          echo -e $Branco"$ dmstats."$ColorR
          echo -e $Branco"$ fsadm."$ColorR
          echo -e $Branco"$ lvcreate."$ColorR
          echo -e $Branco"$ lvm."$ColorR
          echo -e $Branco"$ lvmdump."$ColorR
          echo -e $Branco"$ lvmsar."$ColorR
          echo -e $Branco"$ lvrename."$ColorR
          echo -e $Branco"$ lvscan."$ColorR
          echo -e $Branco"$ pvcreate."$ColorR
          echo -e $Branco"$ pvremove."$ColorR
          echo -e $Branco"$ pvscan."$ColorR
          echo -e $Branco"$ vgchange."$ColorR
          echo -e $Branco"$ vgcreate."$ColorR
          echo -e $Branco"$ vgextend."$ColorR
          echo -e $Branco"$ vgmerge."$ColorR
          echo -e $Branco"$ vgremove."$ColorR
          echo -e $Branco"$ vgscan."$ColorR
          echo -e $Branco"$ lvchange."$ColorR
          echo -e $Branco"$ lvdisplay."$ColorR
          echo -e $Branco"$ lvmconfig."$ColorR
          echo -e $Branco"$ lvmpolld."$ColorR
          echo -e $Branco"$ lvreduce."$ColorR
          echo -e $Branco"$ lvresize."$ColorR
          echo -e $Branco"$ pvchange."$ColorR
          echo -e $Branco"$ pvdisplay."$ColorR
          echo -e $Branco"$ pvresize."$ColorR
          echo -e $Branco"$ vgcfgbackup."$ColorR
          echo -e $Branco"$ vgck."$ColorR
          echo -e $Branco"$ vgdisplay."$ColorR
          echo -e $Branco"$ vgimport."$ColorR
          echo -e $Branco"$ vgmknodes."$ColorR
          echo -e $Branco"$ vgrename."$ColorR
          echo -e $Branco"$ vgsplit."$ColorR
          echo -e $Branco"$ lvconvert."$ColorR
          echo -e $Branco"$ lvextend."$ColorR
          echo -e $Branco"$ lvmdiskscan."$ColorR
          echo -e $Branco"$ lvmsadc."$ColorR
          echo -e $Branco"$ lvremove."$ColorR
          echo -e $Branco"$ lvs."$ColorR
          echo -e $Branco"$ pvck."$ColorR
          echo -e $Branco"$ pvmove."$ColorR
          echo -e $Branco"$ pvs."$ColorR
          echo -e $Branco"$ vgcfgrestore."$ColorR
          echo -e $Branco"$ vgconvert."$ColorR
          echo -e $Branco"$ vgexport."$ColorR
          echo -e $Branco"$ vgimportclone."$ColorR
          echo -e $Branco"$ vgreduce."$ColorR
          echo -e $Branco"$ vgs."$ColorR
          echo -e $Branco"$ lvmdbusd."$ColorR
          echo -e $Branco"$ lvmlockctl."$ColorR
          echo -e $Branco"$ lvmlockd."$ColorR
          echo -e $BrancoBAD"LVM2 Homepage: https://sourceware.org/lvm2/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/lvm2/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "27" ]; then
          echo -e $Color"Instalando Programa Lynis."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install lynis
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "27help" ]; then
          echo -e $BrancoBAD"Sobre Lynis:"$ColorR
          echo -e $Branco"Lynis e uma ferramenta de auditoria"$ColorR
          echo -e $Branco"de seguranca confiavel"$ColorR
          echo -e $Branco"e de codigo aberto projetada para Linux, macOS"$ColorR
          echo -e $Branco"e derivados do UNIX, como FreeBSD e OpenBSD."$ColorR
          echo -e $Branco"Ele e usado para varias"$ColorR
          echo -e $Branco"finalidades, incluindo auditoria"$ColorR
          echo -e $Branco"de seguranca, deteccao de vulnerabilidade"$ColorR
          echo -e $Branco"e teste de conformidade."$ColorR
          echo -e $Branco"O objetivo de aproveitar"$ColorR
          echo -e $Branco"uma ferramenta de auditoria"$ColorR
          echo -e $Branco"como o Lynis e investigar e resolver"$ColorR
          echo -e $Branco"quaisquer vulnerabilidades"$ColorR
          echo -e $Branco"de seguranca subjacentes e"$ColorR
          echo -e $Branco"erros de configuracao, como senhas"$ColorR
          echo -e $Branco"de contas de usuario fracas"$ColorR
          echo -e $Branco"ou permissoes de arquivo inadequadas"$ColorR
          echo -e $Branco"que possam comprometer"$ColorR
          echo -e $Branco"o sistema em caso de ataque."$ColorR
          echo -e $Branco"$ lynis."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/CISOfy/lynis"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/lynis/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "28" ]; then
          echo -e $Color"Instalando Programa Pst-Utils."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install libpst-dev
          apt-get -y install libpst4
          apt-get -y install pst-utils
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "28help" ]; then
          echo -e $BrancoBAD"Sobre Pst-Utils:"$ColorR
          echo -e $Branco"Este pacote contem ferramentas"$ColorR
          echo -e $Branco"baseadas em libpst para ler"$ColorR
          echo -e $Branco"dados de arquivos PST do Microsoft Outlook."$ColorR
          echo -e $Branco"* readpst - exporta dados de"$ColorR
          echo -e $Branco"arquivos PST para varios"$ColorR
          echo -e $Branco"formatos, incluindo mbox, MH e KMail."$ColorR
          echo -e $Branco"Outros pacotes como mb2md estao"$ColorR
          echo -e $Branco"disponiveis para conversoes"$ColorR
          echo -e $Branco"subsequentes para Maildir e outros formatos."$ColorR
          echo -e $Branco"* lspst - lista dados em arquivos PST."$ColorR
          echo -e $Branco"* pst2ldif - extrai contatos de"$ColorR
          echo -e $Branco"um arquivo PST e os prepara"$ColorR
          echo -e $Branco"para entrada no LDAP."$ColorR
          echo -e $Branco"* pst2dii - exporta dados de"$ColorR
          echo -e $Branco"arquivos PST para o formato de"$ColorR
          echo -e $Branco"arquivo Summation dii load."$ColorR
          echo -e $Branco"$ lspst."$ColorR
          echo -e $Branco"$ pst2ldif."$ColorR
          echo -e $Branco"$ nick2ldif."$ColorR
          echo -e $Branco"$ readpst."$ColorR
          echo -e $Branco"$ pst2dii."$ColorR
          echo -e $BrancoBAD"Pst-Utils Homepage: https://www.five-ten-sg.com/libpst/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/libpst/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "29" ]; then
          echo -e $Color"Instalando Programa CeWL."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cewl
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "29help" ]; then
          echo -e $BrancoBAD"Sobre CeWL:"$ColorR
          echo -e $Branco"CeWL (Custom Word List generator)"$ColorR
          echo -e $Branco"e um aplicativo ruby que rastreia"$ColorR
          echo -e $Branco"um determinado URL, ate uma"$ColorR
          echo -e $Branco"profundidade especificada, e retorna"$ColorR
          echo -e $Branco"uma lista de palavras que podem ser"$ColorR
          echo -e $Branco"usadas para crackers de senha, como John the Ripper."$ColorR
          echo -e $Branco"Opcionalmente, o CeWL pode seguir links externos."$ColorR
          echo -e $Branco"CeWL tambem pode criar uma lista de"$ColorR
          echo -e $Branco"enderecos de e-mail encontrados"$ColorR
          echo -e $Branco"em links mailto."$ColorR
          echo -e $Branco"Esses enderecos de e-mail podem"$ColorR
          echo -e $Branco"ser usados como nomes de usuario"$ColorR
          echo -e $Branco"em acoes de forca bruta."$ColorR
          echo -e $Branco"Outra ferramenta disponibilizada"$ColorR
          echo -e $Branco"pelo projeto CeWL e o FAB (Files Ja Bagged)."$ColorR
          echo -e $Branco"A FAB extrai o conteudo dos campos"$ColorR
          echo -e $Branco"autor/criador, dos metadados de alguns"$ColorR
          echo -e $Branco"arquivos, para criar listas de"$ColorR
          echo -e $Branco"possiveis nomes de usuario."$ColorR
          echo -e $Branco"Esses nomes de usuario podem ser usados"$ColorR
          echo -e $Branco"em associacao com a lista"$ColorR
          echo -e $Branco"de senhas gerada pelo CeWL."$ColorR
          echo -e $Branco"A FAB usa as mesmas tecnicas"$ColorR
          echo -e $Branco"de extracao de metadados que a CeWL."$ColorR
          echo -e $Branco"Atualmente, a FAB processa"$ColorR
          echo -e $Branco"os formatos Office pré 2007,"$ColorR
          echo -e $Branco"Office 2007 e PDF."$ColorR
          echo -e $Branco"CeWL e util em testes de seguranca"$ColorR
          echo -e $Branco"e investigacoes forenses."$ColorR
          echo -e $Branco"CeWL e pronunciado “cool”."$ColorR
          echo -e $Branco"$ cewl."$ColorR
          echo -e $Branco"$ fab-cewl."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/digininja/CeWL"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cewl/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "30" ]; then
          echo -e $Color"Instalando Programa PDFCrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install pdfcrack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "30help" ]; then
          echo -e $BrancoBAD"Sobre PDFCrack:"$ColorR
          echo -e $Branco"PDFCrack e uma ferramenta"$ColorR
          echo -e $Branco"simples para recuperar"$ColorR
          echo -e $Branco"senhas de documentos pdf."$ColorR
          echo -e $Branco"Ele deve ser capaz de lidar"$ColorR
          echo -e $Branco"com todos os pdfs que usam"$ColorR
          echo -e $Branco"o manipulador de seguranca"$ColorR
          echo -e $Branco"padrao, mas as rotinas de"$ColorR
          echo -e $Branco"analise de pdf sao um pouco"$ColorR
          echo -e $Branco"rapidas, entao voce pode"$ColorR
          echo -e $Branco"tropecar em alguns pdfs"$ColorR
          echo -e $Branco"em que o analisador precisa"$ColorR
          echo -e $Branco"ser corrigido para lidar."$ColorR
          echo -e $BrancoBAD"As principais funcionalidades"$ColorR
          echo -e $BrancoBAD"do PDFCrack sao:"$ColorR
          echo -e $Branco"* Suporta o manipulador de"$ColorR
          echo -e $Branco"seguranca padrao"$ColorR
          echo -e $Branco"(revisao 2, 3 e 4) em todas"$ColorR
          echo -e $Branco"as versoes de PDF conhecidas."$ColorR
          echo -e $Branco"* Suporta quebra de senhas"$ColorR
          echo -e $Branco"de proprietario e usuario."$ColorR
          echo -e $Branco"* Ambas as listas de palavras"$ColorR
          echo -e $Branco"e forca bruta da senha"$ColorR
          echo -e $Branco"sao suportadas."$ColorR
          echo -e $Branco"* Permutacoes simples"$ColorR
          echo -e $Branco"(atualmente apenas tentando"$ColorR
          echo -e $Branco"o primeiro caractere"$ColorR
          echo -e $Branco"como Maiusculas)."$ColorR
          echo -e $Branco"* Salve e carregue um"$ColorR
          echo -e $Branco"trabalho em execucao."$ColorR
          echo -e $Branco"Benchmarking simples."$ColorR
          echo -e $Branco"* Pesquisa otimizada por senha"$ColorR
          echo -e $Branco"do proprietario quando a"$ColorR
          echo -e $Branco"senha do usuario e conhecida."$ColorR
          echo -e $Branco"* Este programa pode ser usado"$ColorR
          echo -e $Branco"em investigacoes forenses ou"$ColorR
          echo -e $Branco"atividades similares,"$ColorR
          echo -e $Branco"para quebra legal de senhas."$ColorR
          echo -e $Branco"$ pdfcrack."$ColorR
          echo -e $BrancoBAD"PDFCrack Homepage: http://pdfcrack.sf.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/pdfcrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas09i

     elif [ "$I" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias2P1
             Programas09
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias2P1
             Programas09
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias2P1
             Programas09
          fi

     elif [ "$I" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias2P1
             Programas09
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias2P1
             Programas09
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias2P1
             Programas09
          fi

     elif [ "$I" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$I" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$I" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$I" = "P13" ]; then
          Programas13

     elif [ "$I" = "P12" ]; then
          Programas12

     elif [ "$I" = "P11" ]; then
          Programas11

     elif [ "$I" = "P10" ]; then
          Programas10

     elif [ "$I" = "P09" ]; then
          Programas09

     elif [ "$I" = "P08" ]; then
          Programas08

     elif [ "$I" = "P07" ]; then
          Programas07

     elif [ "$I" = "P06" ]; then
          Programas06

     elif [ "$I" = "P05" ]; then
          Programas05

     elif [ "$I" = "P04" ]; then
          Programas04

     elif [ "$I" = "P03" ]; then
          Programas03

     elif [ "$I" = "P02" ]; then
          Programas02

     elif [ "$I" = "P01" ]; then
          Programas01

     elif [ "$I" = "Programas01" ]; then
          Programas01

     elif [ "$I" = "Programas02" ]; then
          Programas02

     elif [ "$I" = "Programas03" ]; then
          Programas03

     elif [ "$I" = "Programas04" ]; then
          Programas04

     elif [ "$I" = "Programas05" ]; then
          Programas05

     elif [ "$I" = "Programas06" ]; then
          Programas06

     elif [ "$I" = "Programas07" ]; then
          Programas07

     elif [ "$I" = "Programas08" ]; then
          Programas08

     elif [ "$I" = "Programas09" ]; then
          Programas09

     elif [ "$I" = "Programas10" ]; then
          Programas10

     elif [ "$I" = "Programas11" ]; then
          Programas11

     elif [ "$I" = "Programas12" ]; then
          Programas12

     elif [ "$I" = "Programas13" ]; then
          Programas13

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Programas09B
           FPromptP9
           Programas09i
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Programas09B
           FPromptP9
           Programas09i
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Programas09B
           FPromptP9
           Programas09i
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Programas09B
        FPromptP9
        Programas09i
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Programas09B
        FPromptP9
        Programas09i
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Programas09B
        FPromptP9
        Programas09i
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas09B
   FPromptP9
   Programas09i
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas09B
   FPromptP9
   Programas09i
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas09B
   FPromptP9
  Programas09i
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas09B
   FPromptP9
   Programas09i
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas09B
   FPromptP9
   Programas09i
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas09B
   FPromptP9
   Programas09i
fi
}
Programas08B(){
echo -e $Color"\n\nFerramentas de Exploracao"$ColorR
echo -e $Color"
01) Armitage
1help Sobre Armitage
02) Backdoor-Factory
2help Sobre Backdoor-Factory
03) Beef-Xss
3help Sobre Beef-Xss
04) Cisco-Auditing-Tool
4help Sobre Cisco-Auditing-Tool
05) Cisco-Global-Exploiter
5help Sobre Cisco-Global-Exploiter
06) Cisco-Ocs
6help Sobre Cisco-Ocs
07) Cisco-Torch
7help Sobre Cisco-Torch
08) Commix
8help Sobre Commix
09) Crackle
9help Sobre Crackle
10) Jboss-Autopwn
10help Sobre Jboss-Autopwn
11) Linux-Exploit-Suggester
11help Sobre Linux-Exploit-Suggester
12) Maltego-Teeth
12help Sobre Maltego-Teeth
13) SET
13help Sobre SET
14) Shellnoob
14help Sobre Shellnoob
15) Sqlmap
15help Sobre Sqlmap
16) THC-IPV6
16help Sobre THC-IPV6
17) Yersinia
17help Sobre Yersinia
18) Exploitdb
18help Sobre Exploitdb
19) Metasploit-Framework
19help Sobre Metasploit-Framework
20) Msfpc
20help Sobre Msfpc
21) Termineter
21help Sobre Termineter
"$ColorR

echo -e "\n"
echo -e $Verde"Install all Exploitation tools"$ColorR
echo -e $Verde"(x) (Instalar Todas as ferramentas.)"$ColorR
echo -e "\n\n"
}
PrompTProgramas08(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" H
}
All_Tools_08(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install armitage
apt-get -y install beef-xss
apt-get -y install exploitdb
apt-get -y install termineter
apt-get -y install msfpc
apt-get -y install jboss-autopwn
apt-get -y install thc-ipv6
apt-get -y install metasploit-framework
apt-get -y install linux-exploit-suggester
apt-get -y install cisco-auditing-tool
apt-get -y install cisco-global-exploiter
apt-get -y install shellnoob
apt-get -y install crackle
apt-get -y install sqlmap
apt-get -y install backdoor-factory
apt-get -y install set
apt-get -y install commix
apt-get -y install cisco-torch
apt-get -y install cisco-ocs
apt-get -y install maltego-teeth
apt-get -y install yersinia
}
Programas08(){
Programas08B
PrompTProgramas08
if [ "$H" = "01" ]; then
   H="1"
fi
if [ "$H" = "02" ]; then
   H="2"
fi
if [ "$H" = "03" ]; then
   H="3"
fi
if [ "$H" = "04" ]; then
   H="4"
fi
if [ "$H" = "05" ]; then
   H="5"
fi
if [ "$H" = "06" ]; then
   H="6"
fi
if [ "$H" = "07" ]; then
   H="7"
fi
if [ "$H" = "08" ]; then
   H="8"
fi
if [ "$H" = "09" ]; then
   H="9"
fi
while [ "$H" ];
do
  if [ "$H" ]; then
     if [ "$H" = "1" ]; then
        echo -e $Color"Instalando Programa Armitage."$Color
        apt-get -y update 1> /dev/null 2> /dev/null
        apt-get -y install armitage
        sleep 1
        echo -e $Color"Processo Finalizado."$ColorR
        sleep 1
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        PrompTProgramas08

     elif [ "$H" = "1help" ]; then
          echo -e $BrancoBAD"Sobre Armitage:"$ColorR
          echo -e $Branco"Armitage e uma ferramenta de colaboracao de"$ColorR
          echo -e $Branco"equipe vermelha programavel para Metasploit"$ColorR
          echo -e $Branco"que visualiza alvos, recomenda exploracoes e"$ColorR
          echo -e $Branco"expoe os recursos avancados de pos-exploracao na estrutura."$ColorR
          echo -e $Branco"$ armitage."$ColorR
          echo -e $Branco"$ teamserver."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/r00t0v3rr1d3/armitage"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/armitage/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_08
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_08
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "2" ]; then
          echo -e $Color"Instalando Programa Backdoor-Factory."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install backdoor-factory
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "2help" ]; then
          echo -e $BrancoBAD"Sobre Backdoor-Factory:"$ColorR
          echo -e $Branco"Injeta shellcode em arquivos win32/64 PE, binarios ELF"$ColorR
          echo -e $Branco"de 32/64 bits, para continuar"$ColorR
          echo -e $Branco"a execucao normal do arquivo"$ColorR
          echo -e $Branco"(se o shellcode suportar), corrigindo o exe/dll diretamente."$ColorR
          echo -e $Branco"Alguns executaveis tem"$ColorR
          echo -e $Branco"protecoes incorporadas, portanto, isso"$ColorR
          echo -e $Branco"nao funcionara em todos os arquivos ELF/PE."$ColorR
          echo -e $Branco"E aconselhavel testar os arquivos ELF/PE de destino"$ColorR
          echo -e $Branco"antes de implanta-los em clientes ou usa-los em exercicios"$ColorR
          echo -e $Branco"$ backdoor-factory."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/secretsquirrel/the-backdoor-factory"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/backdoor-factory/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "3" ]; then
          echo -e $Color"Instalando Programa Beef-Xss."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install beef-xss
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "3help" ]; then
          echo -e $BrancoBAD"Sobre Beef-Xss:"$ColorR
          echo -e $Branco"BeEF e a abreviacao de"$ColorR
          echo -e $Branco"The Browser Exploitation Framework."$ColorR
          echo -e $Branco"E uma ferramenta de teste"$ColorR
          echo -e $Branco"de penetracao que se concentr"$ColorR
          echo -e $Branco"no navegador da web."$ColorR
          echo -e $Branco"Em meio a preocupacoes crescentes sobre ataques"$ColorR
          echo -e $Branco"na Web contra clientes, incluindo clientes"$ColorR
          echo -e $Branco"moveis, o BeEF permite que o testador de penetracao"$ColorR
          echo -e $Branco"profissional avalie a postura de seguranca real"$ColorR
          echo -e $Branco"de um ambiente de destino usando vetores"$ColorR
          echo -e $Branco"de ataque do lado do cliente."$ColorR
          echo -e $Branco"Ao contrario de outras estruturas"$ColorR
          echo -e $Branco"de seguranca, o BeEF olha alem do perimetro"$ColorR
          echo -e $Branco"de rede reforcado e do sistema cliente e examina"$ColorR
          echo -e $Branco"a possibilidade de exploracao dentro do contexto"$ColorR
          echo -e $Branco"de uma porta aberta: o navegador da web."$ColorR
          echo -e $Branco"O BeEF conectara um ou mais navegadores da Web"$ColorR
          echo -e $Branco"e os usara como cabecas de ponte para lancar modulos"$ColorR
          echo -e $Branco"de comando direcionados e outros ataques"$ColorR
          echo -e $Branco"contra o sistema de dentro"$ColorR
          echo -e $Branco"do contexto do navegador."$ColorR
          echo -e $Branco"$ beef-xss."$ColorR
          echo -e $Branco"$ beef-xss-stop."$ColorR
          echo -e $BrancoBAD"Beef-Xss Homepage: https://beefproject.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/beef-xss/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "4" ]; then
          echo -e $Color"Instalando Programa Cisco-Auditing-Tool."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cisco-auditing-tool
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "4help" ]; then
          echo -e $BrancoBAD"Sobre Cisco-Auditing-Tool:"$ColorR
          echo -e $Branco"Script Perl que verifica os roteadores Cisco"$ColorR
          echo -e $Branco"em busca de vulnerabilidades comuns."$ColorR
          echo -e $Branco"$ CAT."$ColorR
          echo -e $BrancoBAD"Cisco-Auditing-Tool Homepage: http://www.scrypt.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cisco-auditing-tool/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "5" ]; then
          echo -e $Color"Instalando Programa Cisco-Global-Exploiter."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cisco-global-exploiter
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "5help" ]; then
          echo -e $BrancoBAD"Sobre Cisco-Global-Exploiter:"$ColorR
          echo -e $Branco"Cisco Global Exploiter (CGE), e uma ferramenta de teste"$ColorR
          echo -e $Branco"de seguranca avancada, simples e rapida."$ColorR
          echo -e $Branco"$ cge.pl ."$ColorR
          echo -e $BrancoBAD"Cisco-Global-Exploiter Homepage: http://www.blackangels.it/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cisco-global-exploiter/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "6" ]; then
          echo -e $Color"Instalando Programa Cisco-Ocs."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cisco-ocs
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "6help" ]; then
          echo -e $BrancoBAD"Sobre Cisco-ocs:"$ColorR
          echo -e $Branco"Uma ferramenta de varredura em massa da Cisco."$ColorR
          echo -e $Branco"$ cisco-ocs."$ColorR
          echo -e $BrancoBAD"Cisco-Ocs Homepage: http://hacklab.altervista.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cisco-ocs/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "7" ]; then
          echo -e $Color"Instalando Programa Cisco-Torch."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cisco-torch
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "7help" ]; then
          echo -e $BrancoBAD"Sobre Cisco-Torch:"$ColorR
          echo -e $Branco"O principal recurso que diferencia o"$ColorR
          echo -e $Branco"Cisco-Torch de ferramentas"$ColorR
          echo -e $Branco"semelhantes e o uso extensivo de bifurcacao"$ColorR
          echo -e $Branco"para iniciar varios processos"$ColorR
          echo -e $Branco"de varredura em segundo plano para maxima"$ColorR
          echo -e $Branco"eficiencia de varredura."$ColorR
          echo -e $Branco"Alem disso, ele usa varios metodos"$ColorR
          echo -e $Branco"de impressao digital da camada"$ColorR
          echo -e $Branco"de aplicativo simultaneamente, se necessario."$ColorR
          echo -e $Branco"Queriamos algo rapido para descobrir hosts remotos da Cisco"$ColorR
          echo -e $Branco"executando servicos Telnet, SSH, Web, NTP, TFTP"$ColorR
          echo -e $Branco"e SNMP e lancar ataques"$ColorR
          echo -e $Branco"de dicionario contra os servicos descobertos, incluindo ataque"$ColorR
          echo -e $Branco"de comunidade SNMP (voce gostaria da lista community.txt :-)"$ColorR
          echo -e $Branco"e servidores TFTP"$ColorR
          echo -e $Branco"(nome do arquivo de configuracao bruteforcing"$ColorR
          echo -e $Branco"com a seguinte drenagem de configuracao)."$ColorR
          echo -e $Branco"A ferramenta tambem pode obter arquivos"$ColorR
          echo -e $Branco"de configuracao do dispositivo automaticamente"$ColorR
          echo -e $Branco"se a comunidade SNMP RW for encontrada."$ColorR
          echo -e $Branco"$ cisco-torch."$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cisco-torch/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "8" ]; then
          echo -e $Color"Instalando Programa Commix."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install commix
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "8help" ]; then
          echo -e $BrancoBAD"Sobre Commix:"$ColorR
          echo -e $Branco"Este pacote contem o"$ColorR
          echo -e $Branco"Commix (abreviacao de [comm]"$ColorR
          echo -e $Branco"e [i]njection e[x]ploiter)."$ColorR
          echo -e $Branco"Possui um ambiente simples e pode"$ColorR
          echo -e $Branco"ser utilizado, desde desenvolvedores web, testadores"$ColorR
          echo -e $Branco"de penetracao ou ate mesmo pesquisadores"$ColorR
          echo -e $Branco"de seguranca para testar"$ColorR
          echo -e $Branco"aplicacoes web com o objetivo"$ColorR
          echo -e $Branco"de encontrar bugs, erros"$ColorR
          echo -e $Branco"ou vulnerabilidades relacionados"$ColorR
          echo -e $Branco"a ataques de injecao de comandos."$ColorR
          echo -e $Branco"Ao usar esta ferramenta, e muito facil encontrar"$ColorR
          echo -e $Branco"e explorar uma vulnerabilidade de injecao de comando"$ColorR
          echo -e $Branco"em um determinado parametro ou string vulneravel."$ColorR
          echo -e $Branco"Commix e escrito em"$ColorR
          echo -e $Branco"linguagem de programacao Python."$ColorR
          echo -e $Branco"$ commix."$ColorR
          echo -e $BrancoBAD"Commix Homepage: https://commixproject.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/commix/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "9" ]; then
          echo -e $Color"Instalando Programa Crackle."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install crackle
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "9help" ]; then
          echo -e $BrancoBAD"Sobre Crackle:"$ColorR
          echo -e $Branco"O crackle explora uma falha"$ColorR
          echo -e $Branco"no processo de emparelhamento"$ColorR
          echo -e $Branco"do BLE que permite que um invasor adivinhe"$ColorR
          echo -e $Branco"ou force rapidamente o TK (Chave Temporaria)."$ColorR
          echo -e $Branco"Com o TK e outros dados coletados do processo"$ColorR
          echo -e $Branco"de pareamento, o STK (Short Term Key) e posteriormente"$ColorR
          echo -e $Branco"o LTK (Long Term Key) podem ser coletados."$ColorR
          echo -e $Branco"Com o STK e o LTK, todas as comunicacoes entre"$ColorR
          echo -e $Branco"o mestre e o escravo podem ser descriptografadas"$ColorR
          echo -e $Branco"$ crackle."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/mikeryan/crackle"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/crackle/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "10" ]; then
          echo -e $Color"Instalando Programa Jboss-Autopwn."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install jboss-autopwn
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "10help" ]; then
          echo -e $BrancoBAD"Sobre Jboss-Autopwn:"$ColorR
          echo -e $Branco"Este script JBoss implanta um shell JSP"$ColorR
          echo -e $Branco"no servidor JBoss AS de destino."$ColorR
          echo -e $Branco"Uma vez implantado, o script usa seu recurso"$ColorR
          echo -e $Branco"de carregamento e execucao"$ColorR
          echo -e $Branco"de comando para fornecer"$ColorR
          echo -e $Branco"uma sessao interativa."$ColorR
          echo -e $BrancoBAD"Os recursos incluem:"$ColorR
          echo -e $Branco"* Suporte multiplataforma."$ColorR
          echo -e $Branco"* testado em destinos Windows, Linux e Mac."$ColorR
          echo -e $Branco"* Suporte para shells de ligacao e ligacao reversa."$ColorR
          echo -e $Branco"* Shells de medidor e suporte VNC"$ColorR
          echo -e $Branco"para destinos Windows."$ColorR
          echo -e $Branco"$ jboss-linux."$ColorR
          echo -e $Branco"$ jboss-win."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/SpiderLabs/jboss-autopwn"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/jboss-autopwn/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

    elif [ "$H" = "11" ]; then
          echo -e $Color"Instalando Programa Linux-Exploit-Suggester."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install linux-exploit-suggester
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "11help" ]; then
          echo -e $BrancoBAD"Sobre Linux-Exploit-Suggester:"$ColorR
          echo -e $Branco"Este pacote contem"$ColorR
          echo -e $Branco"uma ferramenta de auditoria"$ColorR
          echo -e $Branco"de escalonamento de privilegios do Linux."$ColorR
          echo -e $Branco"Ele foi projetado para auxiliar na deteccao"$ColorR
          echo -e $Branco"de deficiencias de seguranca para determinada"$ColorR
          echo -e $Branco"maquina baseada em kernel Linux/Linux."$ColorR
          echo -e $BrancoBAD"Ele fornece a seguinte funcionalidade:"$ColorR
          echo -e $Branco"* Avaliando a exposicao do kernel"$ColorR
          echo -e $Branco"em exploracoes conhecidas publicamente"$ColorR
          echo -e $Branco"A ferramenta avalia"$ColorR
          echo -e $Branco"(usando metodos heuristicos"$ColorR
          echo -e $Branco"discutidos em detalhes aqui)"$ColorR
          echo -e $Branco"a exposicao do kernel fornecido em cada exploracao"$ColorR
          echo -e $Branco"de kernel Linux conhecida publicamente."$ColorR
          echo -e $Branco"Para cada exploracao, a exposicao e calculada."$ColorR
          echo -e $Branco"* Verificando o estado das medidas"$ColorR
          echo -e $Branco"de seguranca de protecao do kernel"$ColorR
          echo -e $Branco"O LES pode verificar a maioria das"$ColorR
          echo -e $Branco"configuracoes de seguranca disponiveis"$ColorR
          echo -e $Branco"pelo seu kernel Linux."$ColorR
          echo -e $Branco"Ele verifica nao apenas as"$ColorR
          echo -e $Branco"configuracoes de tempo de compilacao"$ColorR
          echo -e $Branco"do kernel (CONFIGs), mas tambem as configuracoes"$ColorR
          echo -e $Branco"de tempo de execucao (sysctl), fornecendo uma visao"$ColorR
          echo -e $Branco"mais completa da postura"$ColorR
          echo -e $Branco"de seguranca para executar o kernel."$ColorR
          echo -e $Branco"Essa funcionalidade e a continuacao moderna"$ColorR
          echo -e $Branco"da opcao –kernel switch"$ColorR
          echo -e $Branco"da ferramenta checksec.sh de Tobias Klein."$ColorR
          echo -e $Branco"$ linux-exploit-suggester."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/mzet-/linux-exploit-suggester"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/linux-exploit-suggester/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

    elif [ "$H" = "12" ]; then
          echo -e $Color"Instalando Programa Maltego-Teeth."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install maltego-teeth
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "12help" ]; then
          echo -e $BrancoBAD"Sobre Maltego-Teeth:"$ColorR
          echo -e $Branco"Um conjunto de transformacoes para o Maltego"$ColorR
          echo -e $Branco"executar nmap, sqlmap e muito mais"$ColorR
          echo -e $Branco"em entidades no Maltego."$ColorR
          echo -e $BrancoBAD"Maltego-Teeth Homepage: https://www.maltego.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/maltego-teeth/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

    elif [ "$H" = "13" ]; then
          echo -e $Color"Instalando Programa SET."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install set
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "13help" ]; then
          echo -e $BrancoBAD"Sobre SET:"$ColorR
          echo -e $Branco"O Social-Engineer Toolkit (SET) e uma ferramenta"$ColorR
          echo -e $Branco"de codigo aberto orientada a Python destinada a testes"$ColorR
          echo -e $Branco"de penetracao em Social-Engineering."$ColorR
          echo -e $Branco"$ se-toolkit."$ColorR
          echo -e $Branco"$ setoolkit."$ColorR
          echo -e $BrancoBAD"Set Homepage:"\
                  "https://www.trustedsec.com/downloads/social-engineer-toolkit/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/set/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

    elif [ "$H" = "14" ]; then
          echo -e $Color"Instalando Programa Shellnoob."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install shellnoob
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "14help" ]; then
          echo -e $BrancoBAD"Sobre Shellnoob:"$ColorR
          echo -e $BrancoBAD"Caracteristicas:"$ColorR
          echo -e $Branco"* converter shellcode"$ColorR
          echo -e $Branco"entre diferentes formatos e fontes."$ColorR
          echo -e $BrancoBAD"Formatos atualmente suportados:"$ColorR
          echo -e $Branco"asm, bin, hex, obj, exe, C, Python, ruby,"$ColorR
          echo -e $Branco"pretty, safeasm, completec, shellstorm."$ColorR
          echo -e $Branco"(Todos os detalhes na secao “Descricao dos formatos”.)"$ColorR
          echo -e $Branco"* modo interativo de conversao"$ColorR
          echo -e $Branco"asm-para-opcode (e vice-versa)."$ColorR
          echo -e $Branco"Isso e util quando voce nao pode usar bytes"$ColorR
          echo -e $Branco"especificos no shellcode e deseja descobrir"$ColorR
          echo -e $Branco"se uma instrucao de montagem"$ColorR
          echo -e $Branco"especifica causara problemas."$ColorR
          echo -e $Branco"* suporte para sintaxe ATT e Intel.  Verifique a chave –intel."$ColorR
          echo -e $Branco"* suporte para 32 e 64 bits (ao jogar na maquina x86_64)."$ColorR
          echo -e $Branco"Verifique a chave -64."$ColorR
          echo -e $Branco"* resolver numeros de syscall, constantes e numeros de erro."$ColorR
          echo -e $Branco"* portatil e facilmente implementavel"$ColorR
          echo -e $Branco"(depende apenas de gcc/as/objdump e Python)"$ColorR
          echo -e $Branco"E e apenas um script Python independente!"$ColorR
          echo -e $Branco"* desenvolvimento in-loco: voce executa"$ColorR
          echo -e $Branco"o ShellNoob diretamente na arquitetura de destino."$ColorR
          echo -e $Branco"* suporte integrado para Linux/x86, Linux/x86_64,"$ColorR
          echo -e $Branco"Linux/ARM, FreeBSD/x86, FreeBSD/x86_64."$ColorR
          echo -e $Branco"* opcao “prepend breakpoint”."$ColorR
          echo -e $Branco"Verifique a opcao -c."$ColorR
          echo -e $Branco"* leia do suporte stdin / write"$ColorR
          echo -e $Branco"para stdout (use “-” como nome do arquivo)."$ColorR
          echo -e $Branco"* depuracao super barata:"$ColorR
          echo -e $Branco"verifique a opcao –to-strace e –to-gdb!"$ColorR
          echo -e $Branco"* Use ShellNoob como um"$ColorR
          echo -e $Branco"modulo Python em seus scripts!"$ColorR
          echo -e $Branco"Verifique a secao “ShellNoob como uma biblioteca”."$ColorR
          echo -e $Branco"* O modo detalhado mostra as etapas de baixo nivel"$ColorR
          echo -e $Branco"da conversao: util para depurar / entender / aprender."$ColorR
          echo -e $Branco"* Plugins extras: correcao binaria facilitada"$ColorR
          echo -e $Branco"com as opcoes –file-patch, –vm-patch, –fork-nopper"$ColorR
          echo -e $Branco"$ shellnoob."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/reyammer/shellnoob"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/shellnoob/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

    elif [ "$H" = "15" ]; then
          echo -e $Color"Instalando Programa Sqlmap."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sqlmap
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "15help" ]; then
          echo -e $BrancoBAD"Sobre Sqlmap:"$ColorR
          echo -e $Branco"O objetivo do sqlmap"$ColorR
         echo -e $Branco"e detectar e aproveitar"$ColorR
          echo -e $Branco"as vulnerabilidades de injecao"$ColorR
          echo -e $Branco"de SQL em aplicativos da web."$ColorR
          echo -e $Branco"Uma vez que detecta"$ColorR
          echo -e $Branco"uma ou mais injecoes"$ColorR
          echo -e $Branco"de SQL no host de destino, o usuario"$ColorR
          echo -e $Branco"pode escolher entre uma variedade de opcoes"$ColorR
          echo -e $Branco"para executar uma extensa impressao digital"$ColorR
          echo -e $Branco"do sistema de gerenciamento de banco"$ColorR
          echo -e $Branco"de dados de back-end, recuperar o usuario e"$ColorR
          echo -e $Branco"o banco de dados da sessao DBMS, enumerar"$ColorR
          echo -e $Branco"usuarios, hashes de senha, privilegios, bancos"$ColorR
          echo -e $Branco"de dados, despejar tabelas/colunas DBMS"$ColorR
          echo -e $Branco"inteiras ou especificas do usuario, executar"$ColorR
          echo -e $Branco"sua propria instrucao SQL, ler arquivos"$ColorR
          echo -e $Branco"especificos no sistema"$ColorR
          echo -e $Branco"de arquivos e muito mais."$ColorR
          echo -e $Branco"$ sqlmap."$ColorR
          echo -e $Branco"$ sqlmapapi."$ColorR
          echo -e $BrancoBAD"Sqlmap Homepage: http://pkg.kali.org/sqlmap"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sqlmap/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

    elif [ "$H" = "16" ]; then
          echo -e $Color"Instalando Programa THC-IPV6."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install thc-ipv6
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "16help" ]; then
          echo -e $BrancoBAD"Sobre THC-IPV6:"$ColorR
          echo -e $Branco"Kit de ferramentas de ataque para testar as"$ColorR
          echo -e $Branco"fraquezas dos protocolos IPv6 e ICMPv6."$ColorR
          echo -e $Branco"Algumas das ferramentas incluidas:"$ColorR
          echo -e $Branco"$ alive6: uma varredura viva eficaz."$ColorR
          echo -e $Branco"$ denial6: tente uma colecao de testes de"$ColorR
          echo -e $Branco"negacao de servico contra um alvo."$ColorR
          echo -e $Branco"$ detect-new-ip6: detecta novos dispositivos"$ColorR
          echo -e $Branco"ip6 que ingressam na rede."$ColorR
          echo -e $Branco"$ dnsdict6: bruteforcer de dicionario dns"$ColorR
          echo -e $Branco"ipv6 paralelizado."$ColorR
          echo -e $Branco"$ dos-new-ip6: detecta novos dispositivos"$ColorR
          echo -e $Branco"ip6 e informa que o IP escolhido colide"$ColorR
          echo -e $Branco"na rede (DOS)."$ColorR
          echo -e $Branco"$ exploit6: teste vulnerabilidades IPv6"$ColorR
          echo -e $Branco"conhecidas em um alvo."$ColorR
          echo -e $Branco"$ fake_mld6: anuncie-se em um grupo multicast"$ColorR
          echo -e $Branco"de sua escolha na rede."$ColorR
          echo -e $Branco"$ fake_router6: anuncie-se como um"$ColorR
          echo -e $Branco"roteador na rede."$ColorR
          echo -e $Branco"$ flood_advertise6: inunda um alvo com"$ColorR
          echo -e $Branco"anuncios aleatorios de vizinhos."$ColorR
          echo -e $Branco"$ flood_router6: inunda um alvo com anuncios"$ColorR
          echo -e $Branco"aleatorios de roteador."$ColorR
          echo -e $Branco"$ implementation6: executa varias verificacoes"$ColorR
          echo -e $Branco"de implementacao no IPv6."$ColorR
          echo -e $Branco"$ parasite6: spoofer de solicitacao/anuncio"$ColorR
          echo -e $Branco"de vizinho icmp."$ColorR
          echo -e $Branco"$ redir6: redireciona o trafego para voce de"$ColorR
          echo -e $Branco"forma inteligente (man-in-the-middle)"$ColorR
          echo -e $Branco"com um spoofer de redirecionamento"$ColorR
          echo -e $Branco"icmp6 inteligente."$ColorR
          echo -e $Branco"$ rsmurf6: smurfer remoto (conhecido por"$ColorR
          echo -e $Branco"funcionar apenas contra Linux no momento)."$ColorR
          echo -e $Branco"$ thcping6: envia um pacote ping6 feito a mao."$ColorR
          echo -e $Branco"$ toobig6: Mtu decrescente com a mesma inteligencia que redir6.."$ColorR
          echo -e $Branco"$ atk6-address6."$ColorR
          echo -e $Branco"$ atk6-connsplit6."$ColorR
          echo -e $Branco"$ atk6-denial6."$ColorR
          echo -e $Branco"$ atk6-dnsdict6."$ColorR
          echo -e $Branco"$ atk6-dos-new-ip6."$ColorR
          echo -e $Branco"$ atk6-exploit6."$ColorR
          echo -e $Branco"$ atk6-fake_advertise6."$ColorR
          echo -e $Branco"$ atk6-fake_dnsupdate6."$ColorR
          echo -e $Branco"$ atk6-fake_mld6."$ColorR
          echo -e $Branco"$ atk6-fake_router26."$ColorR
          echo -e $Branco"$ atk6-flood_mld26."$ColorR
          echo -e $Branco"$ atk6-flood_redir6."$ColorR
          echo -e $Branco"$ atk6-flood_rs6."$ColorR
          echo -e $Branco"$ atk6-four2six."$ColorR
          echo -e $Branco"$ atk6-fuzz_dhcpc6."$ColorR
          echo -e $Branco"$ atk6-implementation6."$ColorR
          echo -e $Branco"$ atk6-inverse_lookup6."$ColorR
          echo -e $Branco"$ atk6-ndpexhaust6."$ColorR
          echo -e $Branco"$ atk6-passive_discovery6."$ColorR
          echo -e $Branco"$ atk6-redirsniff6."$ColorR
          echo -e $Branco"$ atk6-sendpeesmp6."$ColorR
          echo -e $Branco"$ atk6-thcsyn6."$ColorR
          echo -e $Branco"$ atk6-trace6."$ColorR
          echo -e $Branco"$ atk6-alive6."$ColorR
          echo -e $Branco"$ atk6-covert_send6."$ColorR
          echo -e $Branco"$ atk6-detect-new-ip6."$ColorR
          echo -e $Branco"$ atk6-dnsrevenum6."$ColorR
          echo -e $Branco"$ atk6-dump_dhcp6."$ColorR
          echo -e $Branco"$ atk6-extract_hosts6."$ColorR
          echo -e $Branco"$ atk6-fake_dhcps6."$ColorR
          echo -e $Branco"$ atk6-fake_mipv6."$ColorR
          echo -e $Branco"$ atk6-fake_mldrouter6."$ColorR
          echo -e $Branco"$ atk6-fake_router6."$ColorR
          echo -e $Branco"$ atk6-flood_advertise6."$ColorR
          echo -e $Branco"$ atk6-flood_mld6."$ColorR
          echo -e $Branco"$ atk6-flood_router26."$ColorR
          echo -e $Branco"$ atk6-flood_solicitate6."$ColorR
          echo -e $Branco"$ atk6-fragmentation6."$ColorR
          echo -e $Branco"$ atk6-fuzz_dhcps6."$ColorR
          echo -e $Branco"$ atk6-implementation6d."$ColorR
          echo -e $Branco"$ atk6-kill_router6."$ColorR
          echo -e $Branco"$ atk6-node_query6."$ColorR
          echo -e $Branco"$ atk6-randicmp6."$ColorR
          echo -e $Branco"$ atk6-rsmurf6."$ColorR
          echo -e $Branco"$ atk6-smurf6."$ColorR
          echo -e $Branco"$ atk6-toobig6."$ColorR
          echo -e $Branco"$ atk6-connect6."$ColorR
          echo -e $Branco"$ atk6-covert_send6d."$ColorR
          echo -e $Branco"$ atk6-detect_sniffer6."$ColorR
          echo -e $Branco"$ atk6-dnssecwalk."$ColorR
          echo -e $Branco"$ atk6-dump_router6."$ColorR
          echo -e $Branco"$ atk6-extract_networks6."$ColorR
          echo -e $Branco"$ atk6-fake_dns6d."$ColorR
          echo -e $Branco"$ atk6-fake_mld26."$ColorR
          echo -e $Branco"$ atk6-fake_pim6."$ColorR
          echo -e $Branco"$ atk6-fake_solicitate6."$ColorR
          echo -e $Branco"$ atk6-flood_dhcpc6."$ColorR
          echo -e $Branco"$ atk6-flood_mldrouter6."$ColorR
          echo -e $Branco"$ atk6-flood_router6."$ColorR
          echo -e $Branco"$ atk6-flood_unreach6."$ColorR
          echo -e $Branco"$ atk6-fragrouter6."$ColorR
          echo -e $Branco"$ atk6-fuzz_ip6."$ColorR
          echo -e $Branco"$ atk6-inject_alive6."$ColorR
          echo -e $Branco"$ atk6-ndpexhaust26."$ColorR
          echo -e $Branco"$ atk6-parasite6."$ColorR
          echo -e $Branco"$ atk6-redir6."$ColorR
          echo -e $Branco"$ atk6-sendpees6."$ColorR
          echo -e $Branco"$ atk6-thcping6."$ColorR
          echo -e $Branco"$ atk6-toobigsniff6."$ColorR
          echo -e $BrancoBAD"Thc-Ipv6 Homepage: http://www.thc.org/thc-ipv6/"$ColorR
          echo -e $BrancoBAD"Github:"\
                                    "https://github.com/vanhauser-thc/thc-ipv6"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/thc-ipv6/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "17" ]; then
          echo -e $Color"Instalando Programa Yersinia."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install yersinia
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "17help" ]; then
          echo -e $BrancoBAD"Sobre Yersinia:"$ColorR
          echo -e $Branco"Yersinia e uma estrutura"$ColorR
          echo -e $Branco"para realizar ataques de camada 2."$ColorR
          echo -e $Branco"Ele foi projetado para tirar"$ColorR
          echo -e $Branco"proveito de algumas fraquezas"$ColorR
          echo -e $Branco"em diferentes protocolos de rede."$ColorR
          echo -e $Branco"Ele pretende ser uma estrutura solida para analisar"$ColorR
          echo -e $Branco"e testar as redes e sistemas implantados."$ColorR
          echo -e $Branco"Ataques para os seguintes protocolos de rede"$ColorR
          echo -e $Branco"sao implementados nesta versao especifica:"$ColorR
          echo -e $Branco"* Spanning Tree Protocol (STP)."$ColorR
          echo -e $Branco"* Protocolo de descoberta da Cisco (CDP)."$ColorR
          echo -e $Branco"* Protocolo de entroncamento dinamico (DTP)."$ColorR
          echo -e $Branco"* Protocolo de configuracao dinamica de host (DHCP)."$ColorR
          echo -e $Branco"* Hot Standby Router Protocol (HSRP)."$ColorR
          echo -e $Branco"* 802.1q."$ColorR
          echo -e $Branco"* 802.1x."$ColorR
          echo -e $Branco"* Inter-Switch Link Protocol (ISL)."$ColorR
          echo -e $Branco"* Protocolo de entroncamento de VLAN (VTP)."$ColorR
          echo -e $Branco"$ yersinia."$ColorR
          echo -e $BrancoBAD"Yersinia Homepage: http://www.yersinia.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/yersinia/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "18" ]; then
          echo -e $Color"Instalando Programa Exploitdb."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install exploitdb
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "18help" ]; then
          echo -e $BrancoBAD"Sobre Exploitdb:"$ColorR
          echo -e $Branco"O Exploit Database e um arquivo de exploits"$ColorR
          echo -e $Branco"publicos e software"$ColorR
          echo -e $Branco"vulneravel correspondente, desenvolvido para"$ColorR
          echo -e $Branco"uso por testadores de penetracao"$ColorR
          echo -e $Branco"e pesquisadores de vulnerabilidade."$ColorR
          echo -e $Branco"Seu objetivo e servir como a colecao"$ColorR
          echo -e $Branco"mais abrangente"$ColorR
          echo -e $Branco"de exploits, shellcode e documentos reunidos por"$ColorR
          echo -e $Branco"meio de"$ColorR
          echo -e $Branco"envios diretos, listas de discussao e"$ColorR
          echo -e $Branco"outras fontes publicas, e apresenta-los"$ColorR
          echo -e $Branco"em um banco de dados disponivel gratuitamente e"$ColorR
          echo -e $Branco"facil de navegar."$ColorR
          echo -e $Branco"O Exploit Database e um repositorio para"$ColorR
          echo -e $Branco"exploracoes e"$ColorR
          echo -e $Branco"Prova de Conceitos em vez de avisos, tornando-o"$ColorR
          echo -e $Branco"um recurso valioso para"$ColorR
          echo -e $Branco"aqueles que precisam de dados"$ColorR
          echo -e $Branco"acionaveis ​​imediatamente."$ColorR
          echo -e $Branco"$ exploitdb."$ColorR
          echo -e $Branco"$ searchsploit."$ColorR
          echo -e $BrancoBAD"Exploitdb Homepage: https://www.exploit-db.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/exploitdb/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "19" ]; then
          echo -e $Color"Instalando Programa Metasploit-Framework."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install metasploit-framework
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "19help" ]; then
          echo -e $BrancoBAD"Sobre Metasploit-Framework:"$ColorR
          echo -e $Branco"O Metasploit Framework e uma plataforma de codigo"$ColorR
          echo -e $Branco"aberto que oferece suporte a pesquisa de vulnerabilidades,"$ColorR
          echo -e $Branco"desenvolvimento de exploracao e criacao"$ColorR
          echo -e $Branco"de ferramentas de seguranca personalizadas."$ColorR
          echo -e $BrancoBAD"Exemplos de uso do Metasploit-Framework:"$ColorR
          echo -e $Branco"Uma das melhores fontes de informacao sobre"$ColorR
          echo -e $Branco"o uso do Metasploit Framework e"$ColorR
          echo -e $Branco"o Metasploit Unleashed, um curso online"$ColorR
          echo -e $Branco"gratuito criado pela Offensive Security"$ColorR
          echo -e $Branco"O Metasploit Unleashed orienta voce desde"$ColorR
          echo -e $Branco"o basico absoluto do Metasploit ate os topicos avancados."$ColorR
          echo -e $Branco"https://www.offensive-security.com/metasploit-unleashed/"$ColorR
          echo -e $Branco"$ msf-egghunter."$ColorR
          echo -e $Branco"$ msf-find_badchars."$ColorR
          echo -e $Branco"$ msf-java_deserializer."$ColorR
          echo -e $Branco"$ msf-md5_lookup."$ColorR
          echo -e $Branco"$ msf-nasm_shell."$ColorR
          echo -e $Branco"$ msf-pdf2xdp."$ColorR
          echo -e $Branco"$ msfd."$ColorR
          echo -e $Branco"$ msfrpcd."$ColorR
          echo -e $Branco"$ msf-exe2vba."$ColorR
          echo -e $Branco"$ msf-halflm_second."$ColorR
          echo -e $Branco"$ msf-jsobfu."$ColorR
          echo -e $Branco"$ msf-metasm_shell."$ColorR
          echo -e $Branco"$ msf-pattern_create."$ColorR
          echo -e $Branco"$ msf-virustotal."$ColorR
          echo -e $Branco"$ msfdb."$ColorR
          echo -e $Branco"$ msfupdate."$ColorR
          echo -e $Branco"$ msf-exe2vbs."$ColorR
          echo -e $Branco"$ msf-hmac_sha1_crack."$ColorR
          echo -e $Branco"$ msf-makeiplist."$ColorR
          echo -e $Branco"$ msf-msf_irb_shell."$ColorR
          echo -e $Branco"$ msf-pattern_offset."$ColorR
          echo -e $Branco"$ msfconsole."$ColorR
          echo -e $Branco"$ msfrpc."$ColorR
          echo -e $Branco"$ msfvenom."$ColorR
          echo -e $BrancoBAD"Metasploit-Framework Homepage: https://www.metasploit.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/metasploit-framework/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "20" ]; then
          echo -e $Color"Instalando Programa Msfpc."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install msfpc
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "20help" ]; then
          echo -e $BrancoBAD"Sobre Msfpc:"$ColorR
          echo -e $Branco"Uma maneira rapida de gerar varias cargas uteis"$ColorR
          echo -e $Branco"do Meterpreter “basicas” usando msfvenom,"$ColorR
          echo -e $Branco"que faz parte do framework Metasploit."$ColorR
          echo -e $Branco"$ msfpc."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/g0tmi1k/msfpc"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/msfpc/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

    elif [ "$H" = "21" ]; then
          echo -e $Color"Instalando Programa Termineter."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install termineter
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "21help" ]; then
          echo -e $BrancoBAD"Sobre Termineter:"$ColorR
          echo -e $Branco"Este pacote contem uma estrutura Python"$ColorR
          echo -e $Branco"que fornece uma plataforma para o teste de seguranca"$ColorR
          echo -e $Branco"de medidores inteligentes."$ColorR
          echo -e $Branco"Implementa os protocolos C1218 e C1219"$ColorR
          echo -e $Branco"para comunicacao atraves de uma interface optica."$ColorR
          echo -e $Branco"Atualmente ha suporte para medidores usando C1219-2007"$ColorR
          echo -e $Branco"com conjuntos de caracteres de 7 bits."$ColorR
          echo -e $Branco"Esta e, a configuracao mais comum encontrada"$ColorR
          echo -e $Branco"na America do Norte."$ColorR
          echo -e $Branco"O Termineter se comunica com Smart Meters"$ColorR
          echo -e $Branco"por meio de uma conexao usando uma sonda"$ColorR
          echo -e $Branco"otica ANSI tipo 2 com uma interface serial."$ColorR
          echo -e $Branco"$ termineter."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/securestate/termineter"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/termineter/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas08

     elif [ "$H" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$H" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$H" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$H" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$H" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$H" = "P13" ]; then
          Programas13

     elif [ "$H" = "P12" ]; then
          Programas12

     elif [ "$H" = "P11" ]; then
          Programas11

     elif [ "$H" = "P10" ]; then
          Programas10

     elif [ "$H" = "P09" ]; then
          Programas09

     elif [ "$H" = "P08" ]; then
          Programas08

     elif [ "$H" = "P07" ]; then
          Programas07

     elif [ "$H" = "P06" ]; then
          Programas06

     elif [ "$H" = "P05" ]; then
          Programas05

     elif [ "$H" = "P04" ]; then
          Programas04

     elif [ "$H" = "P03" ]; then
          Programas03

     elif [ "$H" = "P02" ]; then
          Programas02

     elif [ "$H" = "P01" ]; then
          Programas01

     elif [ "$H" = "Programas01" ]; then
          Programas01

     elif [ "$H" = "Programas02" ]; then
          Programas02

     elif [ "$H" = "Programas03" ]; then
          Programas03

     elif [ "$H" = "Programas04" ]; then
          Programas04

     elif [ "$H" = "Programas05" ]; then
          Programas05

     elif [ "$H" = "Programas06" ]; then
          Programas06

     elif [ "$H" = "Programas07" ]; then
          Programas07

     elif [ "$H" = "Programas08" ]; then
          Programas08

     elif [ "$H" = "Programas09" ]; then
          Programas09

     elif [ "$H" = "Programas10" ]; then
          Programas10

     elif [ "$H" = "Programas11" ]; then
          Programas11

     elif [ "$H" = "Programas12" ]; then
          Programas12

     elif [ "$H" = "Programas13" ]; then
          Programas13

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Programas08
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Programas08
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Programas08
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Programas08
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Programas08
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Programas08
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas08
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas08
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas08
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas08
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas08
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas08
fi
}
Programas07B(){
echo -e $Color"\n\nFerramentas de Reportacao"$ColorR
echo -e $Color"
01) Maltego
1help Sobre Maltego
02) Cutycapt
2help Sobre Cutycapt
03) Dos2unix
3help Sobre Dos2unix
04) Dradis
4help Sobre Dradis
05) Eyewitness
5help Sobre Eyewitness
06) Faraday
6help Sobre Faraday
07) Metagoofil
7help Sobre Metagoofil
08) Nipper-Ng
8help Sobre Nipper-Ng
09) Pipal
9help Sobre Pipal
10) Recordmydesktop
10help Sobre Recordmydesktop
"$ColorR

echo -e "\n"
echo -e $Verde"Install all Reporting tools"$ColorR
echo -e $Verde"(x) (Instalar Todas as ferramentas.)"$ColorR
echo -e "\n\n"
}
PrompTProgramas07(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" G
}
All_Tools_07(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install cutycapt
apt-get -y install eyewitness
apt-get -y install metagoofil
apt-get -y install recordmydesktop
apt-get -y install pipal
apt-get -y install faraday
apt-get -y install nipper-ng
apt-get -y install dradis
apt-get -y install casefile
apt-get -y install dos2unix
}
Programas07(){
Programas07B
PrompTProgramas07
if [ "$G" = "01" ]; then
   G="1"
fi
if [ "$G" = "02" ]; then
   G="2"
fi
if [ "$G" = "03" ]; then
   G="3"
fi
if [ "$G" = "04" ]; then
   G="4"
fi
if [ "$G" = "05" ]; then
   G="5"
fi
if [ "$G" = "06" ]; then
   G="6"
fi
if [ "$G" = "07" ]; then
   G="7"
fi
if [ "$G" = "08" ]; then
   G="8"
fi
if [ "$G" = "09" ]; then
   G="9"
fi
while [ "$G" ];
do
  if [ "$G" ]; then
     if [ "$G" = "1" ]; then
        echo -e $Color"Instalando Programa Maltego."$Color
        apt-get -y update 1> /dev/null 2> /dev/null
        apt-get -y install maltego
        sleep 1
        echo -e $Color"Processo Finalizado."$ColorR
        sleep 1
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        PrompTProgramas07

     elif [ "$G" = "1help" ]; then
          echo -e $BrancoBAD"Sobre Maltego:"$ColorR
          echo -e $Branco"Problema de ferramenta de inteligencia offline."$ColorR
          echo -e $Branco"Combinando o grafico fantastico da Maltego"$ColorR
          echo -e $Branco"e a analise de links, esta ferramenta permite"$ColorR
          echo -e $Branco"que os analistas examinem os links entre os dados"$ColorR
          echo -e $Branco"adicionados manualmente para mapear suas informacaes."$ColorR
          echo -e $Branco"$ maltego."$ColorR
          echo -e $BrancoBAD"Maltego Homepage: https://www.maltego.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/maltego/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_07
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_07
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "2" ]; then
          echo -e $Color"Instalando Programa Cutycapt."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cutycapt
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "2help" ]; then
          echo -e $BrancoBAD"Sobre Cutycapt:"$ColorR
          echo -e $Branco"CutyCapt e um pequeno utilitario de"$ColorR
          echo -e $Branco"linha de comando multiplataforma para capturar a"$ColorR
          echo -e $Branco"renderizacao do WebKit de uma pagina da Web"$ColorR
          echo -e $Branco"em uma variedade de formatos vetoriais"$ColorR
          echo -e $Branco"e de bitmap, incluindo SVG, PDF, PS, PNG,"$ColorR
          echo -e $Branco"JPEG, TIFF, GIF e BMP."$ColorR
          echo -e $Branco"$ cutycapt."$ColorR
          echo -e $BrancoBAD"Cutycapt Homepage: http://cutycapt.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cutycapt/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "3" ]; then
          echo -e $Color"Instalando Programa Dos2unix."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dos2unix
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "3help" ]; then
          echo -e $BrancoBAD"Sobre Dos2unix:"$ColorR
          echo -e $Branco"Este pacote contem utilitarios dos2unix,"$ColorR
          echo -e $Branco"unix2dos, mac2unix, unix2mac"$ColorR
          echo -e $Branco"para converter os finais de linha de arquivos de texto"$ColorR
          echo -e $Branco"entre os formatos UNIX (LF), DOS (CRLF) e Mac (CR)."$ColorR
          echo -e $Branco"Arquivos de texto em Windows e DOS"$ColorR
          echo -e $Branco"normalmente tem dois caracteres ASCII"$ColorR
          echo -e $Branco"no final de cada linha: CR (retorno de carro)"$ColorR
          echo -e $Branco"seguido por LF (alimentacao de linha)."$ColorR
          echo -e $Branco"Macs mais antigos usavam"$ColorR
          echo -e $Branco"apenas CR, enquanto UNIX usa apenas LF."$ColorR
          echo -e $Branco"Embora a maioria dos editores modernos possa ler"$ColorR
          echo -e $Branco"todos esses formatos, ainda pode haver"$ColorR
          echo -e $Branco"a necessidade de converter arquivos entre eles."$ColorR
          echo -e $Branco"Este e o utilitario classico desenvolvido em 1989."$ColorR
          echo -e $Branco"$ dos2unix."$ColorR
          echo -e $Branco"$ unix2mac."$ColorR
          echo -e $Branco"$ mac2unix."$ColorR
          echo -e $Branco"$ unix2dos."$ColorR
          echo -e $BrancoBAD"Dos2unix Homepage: https://waterlan.home.xs4all.nl/dos2unix.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dos2unix/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "4" ]; then
          echo -e $Color"Instalando Programa Dradis."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dradis
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "4help" ]; then
          echo -e $BrancoBAD"Sobre Dradis:"$ColorR
          echo -e $Branco"Dradis e uma ferramenta para auxiliar"$ColorR
          echo -e $Branco"no processo de teste de penetracao."$ColorR
          echo -e $BrancoBAD"O teste de penetracao e sobre informacoes:"$ColorR
          echo -e $Branco"1. Descoberta de informacoes."$ColorR
          echo -e $Branco"1. Explorar informacoes uteis."$ColorR
          echo -e $Branco"1. Relate as descobertas."$ColorR
          echo -e $Branco"Mas o teste de penetracao tambem e sobre"$ColorR
          echo -e $Branco"compartilhar as informacoes"$ColorR
          echo -e $Branco"que voce e seus colegas de equipe coletam."$ColorR
          echo -e $Branco"Nao compartilhar as informacoes disponiveis"$ColorR
          echo -e $Branco"de forma efetiva resultara na perda"$ColorR
          echo -e $Branco"de oportunidades de exploracao"$ColorR
          echo -e $Branco"e na sobreposicao de esforcos."$ColorR
          echo -e $Branco"$ dradis."$ColorR
          echo -e $Branco"$ dradis-stop."$ColorR
          echo -e $BrancoBAD"Dradis Homepage: https://dradisframework.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dradis/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "5" ]; then
          echo -e $Color"Instalando Programa Eyewitness."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install eyewitness
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "5help" ]; then
          echo -e $BrancoBAD"Sobre EyeWitness:"$ColorR
          echo -e $Branco"O EyeWitness foi projetado para fazer capturas"$ColorR
          echo -e $Branco"de tela de sites, fornecer algumas informacoes"$ColorR
          echo -e $Branco"de cabecalho do servidord"$ColorR
          echo -e $Branco"e identificar credenciais padrao,"$ColorR
          echo -e $Branco"se possivel."$ColorR
          echo -e $Branco"A inspiracao veio do PeepingTom Script de Tim Tomes."$ColorR
          echo -e $Branco"EyeWitness e projetado para rodar no Kali Linux."$ColorR
          echo -e $Branco"Ele detectara automaticamente o arquivo que voce"$ColorR
          echo -e $Branco"fornecer com o sinalizador -f como sendo um arquivo"$ColorR
          echo -e $Branco"de texto com URLs em cada"$ColorR
          echo -e $Branco"nova linha, saida nmap xml"$ColorR
          echo -e $Branco"ou saida nessus xml."$ColorR
          echo -e $Branco"O sinalizador -t (tempo limite) e totalmente opcional"$ColorR
          echo -e $Branco"e permite que voce forneca o tempo maximo"$ColorR
          echo -e $Branco"de espera ao tentar renderizar e capturar"$ColorR
          echo -e $Branco"uma pagina da web."$ColorR
          echo -e $Branco"O sinalizador –open, que e opcional,"$ColorR
          echo -e $Branco"abrira a URL em uma nova guia no Firefox."$ColorR
          echo -e $Branco"$ eyewitness."$ColorR
          echo -e $Branco"$ geckodriver."$ColorR
          echo -e $BrancoBAD"Eyewitness Homepage: https://www.christophertruncer.com/eyewitness-triage-tool/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/eyewitness/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "6" ]; then
          echo -e $Color"Instalando Programa Faraday."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install faraday
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "6help" ]; then
          echo -e $BrancoBAD"Sobre Faraday:"$ColorR
          echo -e $Branco"Faraday apresenta um novo conceito (IPE)"$ColorR
          echo -e $Branco"Integrated Penetration-Test Environment, um"$ColorR
          echo -e $Branco"IDE de teste de penetracao multiusuario."$ColorR
          echo -e $Branco"Projetado para distribuicao, indexacao e analise"$ColorR
          echo -e $Branco"dos dados gerados durante o processo de uma auditoria de seguranca."$ColorR
          echo -e $Branco"O principal objetivo do Faraday e reutilizar as ferramentas"$ColorR
          echo -e $Branco"disponiveis na comunidade para aproveita-las de forma multiusuario."$ColorR
          echo -e $Branco"$ faraday."$ColorR
          echo -e $Branco"$ faraday-server."$ColorR
          echo -e $Branco"$ faraday-manage."$ColorR
          echo -e $Branco"$ python-faraday."$ColorR
          echo -e $Branco"$ faraday-searcher."$ColorR
          echo -e $BrancoBAD"Faraday Homepage: https://faradaysec.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/python-faraday/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "7" ]; then
          echo -e $Color"Instalando Programa Metagoofil."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install metagoofil
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "7help" ]; then
          echo -e $BrancoBAD"Sobre Metagoofil:"$ColorR
          echo -e $Branco"O metagoofil pesquisa no Google por tipos"$ColorR
          echo -e $Branco"especificos"$ColorR
          echo -e $Branco"de arquivos hospedados publicamente"$ColorR
          echo -e $Branco"em um site e, opcionalmente, os baixa"\
                         "para sua"$ColorR
          echo -e $Branco"caixa local. Isso e util para coleta de Open"$ColorR
          echo -e $Branco"Source Intelligence, testes de penetracao ou"$ColorR
          echo -e $Branco"para determinar quais arquivos"\
                         "sua organizacao"$ColorR
          echo -e $Branco"esta vazando para indexadores de"\
                         "pesquisa como"$ColorR
          echo -e $Branco"o Google. Como exemplo, ele usa a consulta do"$ColorR
          echo -e $Branco"Google abaixo para encontrar todos os arquivos"\
                         ".pdf "$ColorR
          echo -e $Branco"hospedados em example.com e,"\
                         "opcionalmente, baixa"$ColorR
          echo -e $Branco"uma copia local."$ColorR
          echo -e $Branco"$ metagoofil."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/opsdisk/metagoofil"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/metagoofil/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "8" ]; then
          echo -e $Color"Instalando Programa Nipper-Ng."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install nipper-ng
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "8help" ]; then
          echo -e $BrancoBAD"Sobre Nipper-Ng:"$ColorR
          echo -e $Branco"O Nipper-ng e a proxima geracao do nippper e sempre"$ColorR
          echo -e $Branco"permanecera gratuito e de codigo aberto."$ColorR
          echo -e $Branco"Este software sera usado para fazer observacoes"$ColorR
          echo -e $Branco"sobre as configuracoes de seguranca de diversos"$ColorR
          echo -e $Branco"tipos de dispositivos, como roteadores, firewalls"$ColorR
          echo -e $Branco"e switches de uma infraestrutura de rede."$ColorR
          echo -e $Branco"Este e um fork da versao nipper 0.11.10 do codigo GNUv3 GPL."$ColorR
          echo -e $Branco"$ nipper."$ColorR
          echo -e $BrancoBAD"Nipper-Ng Homepage: https://code.google.com/p/nipper-ng/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/nipper-ng/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "9" ]; then
          echo -e $Color"Instalando Programa Pipal."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install pipal
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "9help" ]; then
          echo -e $BrancoBAD"Sobre Pipal:"$ColorR
          echo -e $Branco"Tudo o que essa ferramenta faz e fornecer as estatisticas"$ColorR
          echo -e $Branco"e as informacoes para ajuda-lo a analisar as senhas."$ColorR
          echo -e $Branco"O trabalho real e feito por voce na interpretacao dos resultados."$ColorR
          echo -e $Branco"$ pipal."$ColorR
          echo -e $BrancoBAD"Pipal Homepage: https://www.digininja.org/projects/pipal.php"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/pipal/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "10" ]; then
          echo -e $Color"Instalando Programa Recordmydesktop."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install recordmydesktop
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "10help" ]; then
          echo -e $BrancoBAD"Recordmydesktop:"$ColorR
          echo -e $Branco"O aplicativo produz um arquivo theora-vorbis encapsulado em ogg."$ColorR
          echo -e $Branco"O recordMyDesktop tenta ser o mais discreto possivel processando"$ColorR
          echo -e $Branco"apenas as regioes da tela que foram alteradas"$ColorR
          echo -e $Branco"$ recordmydesktop."$ColorR
          echo -e $BrancoBAD"Recordmydesktop Homepage: https://enselic.github.io/recordmydesktop/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/recordmydesktop/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas07

     elif [ "$G" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$G" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$G" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$G" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$G" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$G" = "P13" ]; then
          Programas13

     elif [ "$G" = "P12" ]; then
          Programas12

     elif [ "$G" = "P11" ]; then
          Programas11

     elif [ "$G" = "P10" ]; then
          Programas10

     elif [ "$G" = "P09" ]; then
          Programas09

     elif [ "$G" = "P08" ]; then
          Programas08

     elif [ "$G" = "P07" ]; then
          Programas07

     elif [ "$G" = "P06" ]; then
          Programas06

     elif [ "$G" = "P05" ]; then
          Programas05

     elif [ "$G" = "P04" ]; then
          Programas04

     elif [ "$G" = "P03" ]; then
          Programas03

     elif [ "$G" = "P02" ]; then
          Programas02

     elif [ "$G" = "P01" ]; then
          Programas01

     elif [ "$G" = "Programas01" ]; then
          Programas01

     elif [ "$G" = "Programas02" ]; then
          Programas02

     elif [ "$G" = "Programas03" ]; then
          Programas03

     elif [ "$G" = "Programas04" ]; then
          Programas04

     elif [ "$G" = "Programas05" ]; then
          Programas05

     elif [ "$G" = "Programas06" ]; then
          Programas06

     elif [ "$G" = "Programas07" ]; then
          Programas07

     elif [ "$G" = "Programas08" ]; then
          Programas08

     elif [ "$G" = "Programas09" ]; then
          Programas09

     elif [ "$G" = "Programas10" ]; then
          Programas10

     elif [ "$G" = "Programas11" ]; then
          Programas11

     elif [ "$G" = "Programas12" ]; then
          Programas12

     elif [ "$G" = "Programas13" ]; then
          Programas13

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Programas07
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Programas07
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Programas07
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Programas07
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Programas07
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Programas07
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas07
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas07
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas07
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas07
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas07
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas07
fi
}
Programas06B(){
echo -e $Color"\n\nMantendo o Acesso"$ColorR
echo -e $Color"
01) Cryptcat
1help Sobre Cryptcat
02) Cymothoa
2help Sobre Cymothoa
03) Dbd
3help Sobre Dbd
04) Dns2tcp
4help Sobre Dns2tcp
05) HTTPTunnel
5help Sobre HTTPTunnel
06) Nishang
6help Sobre Nishang
07) Polenum
7help Sobre Polenum
08) Powersploit
8help Sobre Powersploit
09) Pwnat
9help Sobre Pwnat
10) Ridenum
10help Sobre Ridenum
11) Sbd
11help Sobre Sbd
12) Webshells
12help Sobre Webshells
13) Weevely
13help Sobre Weevely
"$ColorR

echo -e "\n"
echo -e $Verde"Install all Maintaining Access tools"$ColorR
echo -e $Verde"(x) (Instalar Todas as ferramentas.)"$ColorR
echo -e "\n\n"
}
PrompTProgramas06(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" E
}
All_Tools_06(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install cryptcat
apt-get -y install ridenum
apt-get -y install weevely
apt-get -y install httptunnel
apt-get -y install polenum
apt-get -y install pwnat
apt-get -y install sbd
apt-get -y install powersploit
apt-get -y install webshells
apt-get -y install nishang
apt-get -y install dns2tcp
apt-get -y install cymothoa
apt-get -y install dbd
}
Programas06(){
Programas06B
PrompTProgramas06
if [ "$E" = "01" ]; then
   E="1"
fi
if [ "$E" = "02" ]; then
   E="2"
fi
if [ "$E" = "03" ]; then
   E="3"
fi
if [ "$E" = "04" ]; then
   E="4"
fi
if [ "$E" = "05" ]; then
   E="5"
fi
if [ "$E" = "06" ]; then
   E="6"
fi
if [ "$E" = "07" ]; then
   E="7"
fi
if [ "$E" = "08" ]; then
   E="8"
fi
if [ "$E" = "09" ]; then
   E="9"
fi
while [ "$E" ];
do
  if [ "$E" ]; then
     if [ "$E" = "1" ]; then
        echo -e $Color"Instalando Programa Cryptcat."$Color
        apt-get -y update 1> /dev/null 2> /dev/null
        apt-get -y install cryptcat
        sleep 1
        echo -e $Color"Processo Finalizado."$ColorR
        sleep 1
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        PrompTProgramas06

     elif [ "$E" = "1help" ]; then
          echo -e $BrancoBAD"Sobre Cryptcat:"$ColorR
          echo -e $Branco"Cryptcat e um utilitario Unix simples que le e grava"$ColorR
          echo -e $Branco"dados em conexoes de rede, usando"$ColorR
          echo -e $Branco"o protocolo TCP ou UDP enquanto criptografa"$ColorR
          echo -e $Branco"os dados que estao sendo transmitidos."$ColorR
          echo -e $Branco"Ele foi projetado para ser uma ferramenta “back-end”"$ColorR
          echo -e $Branco"confiavel que pode ser usada direta ou"$ColorR
          echo -e $Branco"facilmente por outros programas e scripts."$ColorR
          echo -e $Branco"Ao mesmo tempo, e uma ferramenta de depuracao e exploracao"$ColorR
          echo -e $Branco"de rede rica em recursos, pois pode criar praticamente"$ColorR
          echo -e $Branco"qualquer tipo de conexao que voce precisa"$ColorR
          echo -e $Branco"e possui varios recursos internos interessantes."$ColorR
          echo -e $Branco"$ cryptcat."$ColorR
          echo -e $BrancoBAD"Cryptcat Homepage: http://farm9.com/content/Free_Tools/cryptcat_linux2.tar"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cryptcat/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_06
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_06
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "2" ]; then
          echo -e $Color"Instalando Programa Cymothoa."$ColorR
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cymothoa
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "2help" ]; then
          echo -e $BrancoBAD"Sobre Cymothoa:"$ColorR
          echo -e $Branco"Cymothoa e uma ferramenta de backdoor furtiva, que injeta"$ColorR
          echo -e $Branco"o shellcode do backdoor em um processo existente."$ColorR
          echo -e $Branco"A ferramenta usa a biblioteca ptrace (disponivel em quase todos * nix)"$ColorR
          echo -e $Branco"para manipular processos e infecta-los."$ColorR
          echo -e $Branco"$ cymothoa."$ColorR
          echo -e $Branco"$ udp_server."$ColorR
          echo -e $Branco"$ bgrep."$ColorR
          echo -e $BrancoBAD"Cymothoa Homepage: http://cymothoa.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cymothoa/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "3" ]; then
          echo -e $Color"Instalando Programa Dbd."$ColorR
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dbd
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "3help" ]; then
          echo -e $BrancoBAD"Sobre Dbd:"$ColorR
          echo -e $Branco"dbd e um clone do Netcat, projetado para ser portatil"$ColorR
          echo -e $Branco"e oferecer criptografia forte."$ColorR
          echo -e $Branco"Ele roda em sistemas operacionais do tipo Unix e no Microsoft Win32."$ColorR
          echo -e $Branco"dbd possui criptografia AES-CBC-128 + HMAC-SHA1"$ColorR
          echo -e $Branco"(por Christophe Devine), execucao do programa (opcao -e), escolha"$ColorR
          echo -e $Branco"da porta de origem, reconexao continua com atraso e alguns"$ColorR
          echo -e $Branco"outros recursos interessantes."$ColorR
          echo -e $Branco"dbd suporta apenas comunicacao TCP/IP."$ColorR
          echo -e $Branco"O codigo-fonte e os binarios sao distribuidos"$ColorR
          echo -e $Branco"sob a GNU General Public License."$ColorR
          echo -e $Branco"$ dbd."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/gitdurandal/dbd"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dbd/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "4" ]; then
          echo -e $Color"Instalando Programa Dns2tcp."$ColorR
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dns2tcp
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "4help" ]; then
          echo -e $BrancoBAD"Sobre Dns2tcp:"$ColorR
          echo -e $Branco"dns2tcp e um conjunto de ferramentas para encapsular"$ColorR
          echo -e $Branco"uma sessao TCP em pacotes DNS."$ColorR
          echo -e $Branco"Esse tipo de encapsulamento gera pacotes menores"$ColorR
          echo -e $Branco"que o IP sobre DNS, melhorando o rendimento."$ColorR
          echo -e $Branco"O cliente nao precisa de privilegios de root.1"$ColorR
          echo -e $Branco"$ dns2tcpc."$ColorR
          echo -e $Branco"$ dns2tcpd."$ColorR
          echo -e $BrancoBAD"Dns2tcp Homepage: http://www.hsc.fr/ressources/outils/dns2tcp/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dns2tcp/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "5" ]; then
          echo -e $Color"Instalando Programa HTTPTunnel."$ColorR
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install httptunnel
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "5help" ]; then
          echo -e $BrancoBAD"Sobre HTTPTunnel:"$ColorR
          echo -e $Branco"Cria um fluxo de dados virtual bidirecional"$ColorR
          echo -e $Branco"encapsulado em solicitacoes HTTP."$ColorR
          echo -e $Branco"As solicitacoes podem ser enviadas"$ColorR
          echo -e $Branco"por meio de um proxy HTTP, se desejado."$ColorR
          echo -e $Branco"Isso pode ser util para usuarios"$ColorR
          echo -e $Branco"por tras de firewalls restritivos."$ColorR
          echo -e $Branco"Se o acesso a WWW for permitido"$ColorR
          echo -e $Branco"por meio de um proxy HTTP, e possivel"$ColorR
          echo -e $Branco"usar httptunnel e, digamos, telnet ou PPP"$ColorR
          echo -e $Branco"para conectar a um computador fora do firewall."$ColorR
          echo -e $BrancoBAD"HTTPTunnel Homepage: http://www.nocrew.org/software/httptunnel.html"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "6" ]; then
          echo -e $Color"Instalando Programa Nishang."$ColorR
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install nishang
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "6help" ]; then
          echo -e $BrancoBAD"Sobre Nishang:"$ColorR
          echo -e $Branco"Nishang e uma estrutura e uma colecao de scripts"$ColorR
          echo -e $Branco"e cargas uteis que permite o uso do PowerShell"$ColorR
          echo -e $Branco"para seguranca ofensiva e pos-exploracao durante"$ColorR
          echo -e $Branco"testes de penetracao."$ColorR
          echo -e $Branco"Os scripts sao escritos com base na exigencia"$ColorR
          echo -e $Branco"do autor durante testes de penetracao reais."$ColorR
          echo -e $Branco"$ nishang."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/samratashok/nishang"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/nishang/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "7" ]; then
          echo -e $Color"Instalando Programa Polenum."$ColorR
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install polenum
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "7help" ]; then
          echo -e $BrancoBAD"Sobre Polenum:"$ColorR
          echo -e $Branco"polenum e um script Python que usa a Biblioteca"$ColorR
          echo -e $Branco"Impacket da CORE Security Technologies"$ColorR
          echo -e $Branco"para extrair as informacoes de politica"$ColorR
          echo -e $Branco"de senha de uma maquina Windows."$ColorR
          echo -e $Branco"Isso permite que um usuario nao Windows"$ColorR
          echo -e $Branco"(Linux, Mac OSX, BSD etc.)"$ColorR
          echo -e $Branco"consulte a politica de senha de uma caixa Windows"$ColorR
          echo -e $Branco"remota sem a necessidade de ter acesso a uma maquina Windows."$ColorR
          echo -e $Branco"$ polenum."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/Wh1t3Fox/polenum/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/polenum/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "8" ]; then
          echo -e $Color"Instalando Programa Powersploit."$ColorR
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install powersploit
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "8help" ]; then
          echo -e $BrancoBAD"Sobre Powersploit:"$ColorR
          echo -e $Branco"PowerSploit e uma serie de scripts do Microsoft PowerShell"$ColorR
          echo -e $Branco"que podem ser usados em cenarios de pos-exploracao"$ColorR
          echo -e $Branco"durante testes de penetracao autorizados."$ColorR
          echo -e $Branco"$ powersploit."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/PowerShellMafia/PowerSploit"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/powersploit/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "9" ]; then
          echo -e $Color"Instalando Programa Pwnat."$ColorR
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install pwnat
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "9help" ]; then
          echo -e $BrancoBAD"Sobre Pwnat:"$ColorR
          echo -e $Branco"pwnat, pronunciado “poe-nat”, e uma ferramenta que permite"$ColorR
          echo -e $Branco"que qualquer numero de clientes por tras de NATs"$ColorR
          echo -e $Branco"se comuniquem com um servidor por tras de um NAT"$ColorR
          echo -e $Branco"separado sem encaminhamento de porta e sem configuracao de DMZ"$ColorR
          echo -e $Branco"em nenhum roteador para se comunicar diretamente entre si."$ColorR
          echo -e $Branco"O servidor nao precisa saber"$ColorR
          echo -e $Branco"nada sobre os clientes tentando se conectar."$ColorR
          echo -e $Branco"$ pwnat."$ColorR
          echo -e $BrancoBAD"Pwnat Homepage: http://samy.pl/pwnat/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/pwnat/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "10" ]; then
          echo -e $Color"Instalando Programa Ridenum."$ColorR
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ridenum
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "10help" ]; then
          echo -e $BrancoBAD"Sobre Ridenum:"$ColorR
          echo -e $Branco"Rid Enum e um ataque de ciclo RID que tenta enumerar"$ColorR
          echo -e $Branco"contas de usuario por meio de sessoes nulas e o SID para RID enum."$ColorR
          echo -e $Branco"Se voce especificar um arquivo de senha, ele tentara"$ColorR
          echo -e $Branco"automaticamente forcar as contas de usuario quando terminar de enumerar."$ColorR
          echo -e $Branco"$ ridenum."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/trustedsec/ridenum"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ridenum/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "11" ]; then
          echo -e $Color"Instalando Programa Sbd."$ColorR
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sbd
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "11help" ]; then
          echo -e $BrancoBAD"Sobre Sbd:"$ColorR
          echo -e $Branco"sbd e um clone do Netcat, projetado"$ColorR
          echo -e $Branco"para ser portatil e oferecer criptografia forte."$ColorR
          echo -e $Branco"Ele roda em sistemas operacionais do tipo Unix e no Microsoft Win32."$ColorR
          echo -e $Branco"O sbd possui criptografia AES-CBC-128 + HMAC-SHA1"$ColorR
          echo -e $Branco"(por Christophe Devine), execucao do programa"$ColorR
          echo -e $Branco"(opcao -e), escolha da porta de origem, reconexao"$ColorR
          echo -e $Branco"continua com atraso e alguns outros recursos interessantes."$ColorR
          echo -e $Branco"sbd suporta apenas comunicacao TCP/IP."$ColorR
          echo -e $Branco"$ sbd."$ColorR
          echo -e $BrancoBAD"Sbd Homepage: http://mirrors.kernel.org/gentoo/distfiles/sbd-1.37.tar.gz"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sbd/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "12" ]; then
          echo -e $Color"Instalando Programa Webshells."$ColorR
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install webshells
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "12help" ]; then
          echo -e $BrancoBAD"Sobre Webshells:"$ColorR
          echo -e $Branco"Uma colecao de webshells"$ColorR
          echo -e $Branco"para servidores ASP, ASPX, CFM, JSP, Perl e PHP."$ColorR
          echo -e $Branco"$ webshells."$ColorR
          echo -e $BrancoBAD"Webshells Homepage: https://www.kali.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/webshells/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "13" ]; then
          echo -e $Color"Instalando Programa Weevely."$ColorR
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install weevely
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "13help" ]; then
          echo -e $BrancoBAD"Sobre Weevely:"$ColorR
          echo -e $Branco"Weevely e um shell web PHP furtivo que simula"$ColorR
          echo -e $Branco"uma conexao tipo telnet."$ColorR
          echo -e $Branco"E uma ferramenta essencial para a pos-exploracao"$ColorR
          echo -e $Branco"de aplicativos da Web e pode ser usada como backdoor"$ColorR
          echo -e $Branco"furtivo ou como um shell da Web para gerenciar contas"$ColorR
          echo -e $Branco"legitimas da Web, mesmo hospedadas gratuitamente."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/epinna/weevely3/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/weevely/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas06

     elif [ "$E" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$E" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$E" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$E" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$E" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$E" = "P13" ]; then
          Programas13

     elif [ "$E" = "P12" ]; then
          Programas12

     elif [ "$E" = "P11" ]; then
          Programas11

     elif [ "$E" = "P10" ]; then
          Programas10

     elif [ "$E" = "P09" ]; then
          Programas09

     elif [ "$E" = "P08" ]; then
          Programas08

     elif [ "$E" = "P07" ]; then
          Programas07

     elif [ "$E" = "P06" ]; then
          Programas06

     elif [ "$E" = "P05" ]; then
          Programas05

     elif [ "$E" = "P04" ]; then
          Programas04

     elif [ "$E" = "P03" ]; then
          Programas03

     elif [ "$E" = "P02" ]; then
          Programas02

     elif [ "$E" = "P01" ]; then
          Programas01

     elif [ "$E" = "Programas01" ]; then
          Programas01

     elif [ "$E" = "Programas02" ]; then
          Programas02

     elif [ "$E" = "Programas03" ]; then
          Programas03

     elif [ "$E" = "Programas04" ]; then
          Programas04

     elif [ "$E" = "Programas05" ]; then
          Programas05

     elif [ "$E" = "Programas06" ]; then
          Programas06

     elif [ "$E" = "Programas07" ]; then
          Programas07

     elif [ "$E" = "Programas08" ]; then
          Programas08

     elif [ "$E" = "Programas09" ]; then
          Programas09

     elif [ "$E" = "Programas10" ]; then
          Programas10

     elif [ "$E" = "Programas11" ]; then
          Programas11

     elif [ "$E" = "Programas12" ]; then
          Programas12

     elif [ "$E" = "Programas13" ]; then
          Programas13

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Programas06
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Programas06
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Programas06
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Programas06
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Programas06
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Programas06
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas06
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas06
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas06
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas06
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas06
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas06
fi
}
Programas05B(){
echo -e $Color"\n\nFarejamento & Falsificacao"$ColorR
echo -e $Color"
01) BurpSuite                35) Netsniff-Ng
1help Sobre BurpSuite        35help Sobre Netsniff-Ng
02) DNSChef                  36) Tcpflow
2help Sobre DNSChef          36help Sobre Tcpflow
03) Fiked                    37) Darkstat
3help Sobre Fiked            37help Sobre Darkstat
04) Hamster-Sidejack         38) Driftnet
4help Sobre Hamster          38help Sobre Driftnet
05) Hexinject                39) Dsniff
5help Sobre Hexinject        39help Sobre Dsniff
06) Iaxflood                 40) Ettercap
6help Sobre Iaxflood         40help Sobre Ettercap
07) Inviteflood              41) Sslsniff
7help Sobre Inviteflood      41help Sobre Sslsniff
08) Ismtp                    42) Tcpreplay
8help Sobre Ismtp            42help Sobre Tcpreplay
09) Isr-Evilgrade
9help Sobre Isr-Evilgrade
10) Mitmproxy
10help Sobre Mitmproxy
11) Ohrwurm
11help Sobre Ohrwurm
12) Protos-Sip
12help Sobre Protos-Sip
13) Rebind
13help Sobre Rebind
14) Responder
14help Sobre Responder
15) Rtpbreak
15help Sobre Rtpbreak
16) Rtpinsertsound
16help Sobre Rtpinsertsound
17) Rtpmixsound
17help Sobre Rtpmixsound
18) Sctpscan
18help Sobre Sctpscan
19) Siparmyknife
19help Sobre Siparmyknife
20) Sipp
20help Sobre Sipp
21) SIPVicious
21help Sobre SIPVicious
22) Sniffjoke
22help Sobre Sniffjoke
23) SSLsplit
23help Sobre SSLsplit
24) SSLstrip
24help Sobre SSLstrip
25) Thc-Ipv6
25help Sobre Thc-Ipv6
26) VoIPHopper
26help Sobre VoIPHopper
27) WebScarab
27help Sobre WebScarab
28) Wifi-Honey
28help Sobre Wifi-Honey
29) Wireshark
29help Sobre Wireshark
30) Xspy
30help Sobre Xspy
31) Yersinia
31help Sobre Yersinia
32) Zaproxy
32help Sobre Zaproxy
33) Bettercap
33help Sobre Bettercap
34) Macchanger
34help Sobre Macchanger

"$ColorR

echo -e "\n"
echo -e $Verde"Install all Sniffing & Spoofing tools"$ColorR
echo -e $Verde"(x) (Instalar Todas as ferramentas.)"$ColorR
echo -e "\n\n"
}
PrompTProgramas05(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" D
}
All_Tools_05(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install ettercap-common
apt-get -y install ettercap-graphical
apt-get -y install ettercap-text-only
apt-get -y install burpsuite
apt-get -y install iaxflood
apt-get -y install ismtp
apt-get -y install tcpflow-nox
apt-get -y install netsniff-ng
apt-get -y install ohrwurm
apt-get -y install macchanger
apt-get -y install protos-sip
apt-get -y install darkstat
apt-get -y install tcpflow
apt-get -y install thc-ipv6
apt-get -y install sctpscan
apt-get -y install sslstrip
apt-get -y install responder
apt-get -y install yersinia
apt-get -y install driftnet
apt-get -y install xspy
apt-get -y install tcpreplay
apt-get -y install dsniff
apt-get -y install bettercap
apt-get -y install zaproxy
apt-get -y install sslsplit
apt-get -y install sniffjoke
apt-get -y install sipvicious
apt-get -y install rtpmixsound
apt-get -y install webscarab
apt-get -y install sslsniff
apt-get -y install rtpinsertsound
apt-get -y install siparmyknife
apt-get -y install voiphopper
apt-get -y install rebind
apt-get -y install rtpbreak
apt-get -y install libwireshark-data
apt-get -y install libwireshark-dev
apt-get -y install libwireshark15
apt-get -y install libwiretap-dev
apt-get -y install libwiretap12
apt-get -y install libwsutil-dev
apt-get -y install libwsutil13
apt-get -y install tshark
apt-get -y install wireshark
apt-get -y install wireshark-common
apt-get -y install wireshark-dev
apt-get -y install wireshark-doc
apt-get -y install wireshark-gtk
apt-get -y install wireshark-qt
apt-get -y install wifi-honey
apt-get -y install mitmproxy
apt-get -y install isr-evilgrade
apt-get -y install inviteflood
apt-get -y install dnschef
apt-get -y install hamster-sidejack
apt-get -y install hexinject
apt-get -y install fiked
apt-get -y install sipp
}
Programas05(){
Programas05B
PrompTProgramas05
if [ "$D" = "01" ]; then
   D="1"
fi
if [ "$D" = "02" ]; then
   D="2"
fi
if [ "$D" = "03" ]; then
   D="3"
fi
if [ "$D" = "04" ]; then
   D="4"
fi
if [ "$D" = "05" ]; then
   D="5"
fi
if [ "$D" = "06" ]; then
   D="6"
fi
if [ "$D" = "07" ]; then
   D="7"
fi
if [ "$D" = "08" ]; then
   D="8"
fi
if [ "$D" = "09" ]; then
   D="9"
fi
while [ "$D" ];
do
  if [ "$D" ]; then
     if [ "$D" = "1" ]; then
        echo -e $Color"Instalando Programa BurpSuite."$Color
        apt-get -y update 1> /dev/null 2> /dev/null
        apt-get -y install burpsuite
        sleep 1
        echo -e $Color"Processo Finalizado."$ColorR
        sleep 1
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        PrompTProgramas05

     elif [ "$D" = "1help" ]; then
          echo -e $BrancoBAD"Sobre BurpSuite:"$ColorR
          echo -e $Branco"Burp Suite e uma plataforma integrada"$ColorR
          echo -e $Branco"para realizar testes de seguranca de aplicacoes web."$ColorR
          echo -e $Branco"Suas varias ferramentas funcionam perfeitamente juntas"$ColorR
          echo -e $Branco"para dar suporte a todo o processo de teste,"$ColorR
          echo -e $Branco"desde o mapeamento inicial e a analise da superficie"$ColorR
          echo -e $Branco"de ataque de um aplicativo ate a descoberta"$ColorR
          echo -e $Branco"e exploracao de vulnerabilidades de seguranca."$ColorR
          echo -e $Branco"O Burp oferece controle total, permitindo combinar"$ColorR
          echo -e $Branco"tecnicas manuais avancadas com automacao"$ColorR
          echo -e $Branco"de ultima geracao, para tornar seu trabalho"$ColorR
          echo -e $Branco"mais rapido, eficaz e divertido."$ColorR
          echo -e $Branco"$ burpsuite."$ColorR
          echo -e $BrancoBAD"Burpsuite Homepage: https://portswigger.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/burpsuite/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_05
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_05
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "2" ]; then
          echo -e $Color"Instalando Programa DNSChef."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dnschef
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "2help" ]; then
          echo -e $BrancoBAD"Sobre DNSChef:"$ColorR
          echo -e $Branco"DNSChef e um proxy DNS altamente configuravel"$ColorR
          echo -e $Branco"para testadores de penetracao e analistas de malware."$ColorR
          echo -e $Branco"Um proxy DNS (tambem conhecido como “DNS falso”)"$ColorR
          echo -e $Branco"e uma ferramenta usada para analise de trafego"$ColorR
          echo -e $Branco"de rede de aplicativos entre outros usos."$ColorR
          echo -e $Branco"Por exemplo, um proxy DNS pode ser usado"$ColorR
          echo -e $Branco"para falsificar solicitacoes de “badguy.com”"$ColorR
          echo -e $Branco"para apontar para uma maquina local"$ColorR
          echo -e $Branco"para terminacao ou interceptacao em vez"$ColorR
          echo -e $Branco"de um host real em algum lugar da Internet."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/iphelix/dnschef"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dnschef/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "3" ]; then
          echo -e $Color"Instalando Programa Fiked."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install fiked
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "3help" ]; then
          echo -e $BrancoBAD"Sobre Fiked:"$ColorR
          echo -e $Branco"FakeIKEd, ou fiked para abreviar, e um daemon"$ColorR
          echo -e $Branco"IKE falso que suporta apenas o suficiente"$ColorR
          echo -e $Branco"dos padroes e extensoes da Cisco para atacar"$ColorR
          echo -e $Branco"configuracoes de autenticacao IPsec baseadas"$ColorR
          echo -e $Branco"em Cisco VPN PSK + XAUTH inseguras comumente"$ColorR
          echo -e $Branco"encontradas no que poderia ser descrito"$ColorR
          echo -e $Branco"como um ataque semi MitM."$ColorR
          echo -e $Branco"O Fiked pode representar o respondedor"$ColorR
          echo -e $Branco"IKE de um gateway de VPN para capturar"$ColorR
          echo -e $Branco"credenciais de login XAUTH;"$ColorR
          echo -e $Branco"atualmente nao faz a"$ColorR
          echo -e $Branco"parte do cliente do MitM completo."$ColorR
          echo -e $BrancoBAD"Fiked Homepage: https://www.roe.ch/FakeIKEd"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/fiked/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "4" ]; then
          echo -e $Color"Instalando Programa Hamster-Sidejack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hamster-sidejack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "4help" ]; then
          echo -e $BrancoBAD"Sobre Hamster-Sidejack:"$ColorR
          echo -e $Branco"Hamster e ferramenta ou “sidejacking”."$ColorR
          echo -e $Branco"Ele atua como um servidor proxy que substitui seus cookies"$ColorR
          echo -e $Branco"por cookies de sessao roubados de outra pessoa, permitindo"$ColorR
          echo -e $Branco"que voce sequestre suas sessoes."$ColorR
          echo -e $Branco"Os cookies sao farejados usando o programa Ferret."$ColorR
          echo -e $Branco"Voce precisa de uma copia disso tambem."$ColorR
          echo -e $BrancoBAD"Hamster-Sidejack Homepage: http://www.erratasec.com/research.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hamster-sidejack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "5" ]; then
          echo -e $Color"Instalando Programa Hexinject."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hexinject
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "5help" ]; then
          echo -e $BrancoBAD"Sobre Hexinject:"$ColorR
          echo -e $Branco"HexInject e um injetor e farejador"$ColorR
          echo -e $Branco"de pacotes muito versatil, que fornece"$ColorR
          echo -e $Branco"uma estrutura de linha de comando"$ColorR
          echo -e $Branco"para acesso bruto a rede."$ColorR
          echo -e $Branco"Ele foi projetado para trabalhar em conjunto"$ColorR
          echo -e $Branco"com outros utilitarios de linha de comando e,"$ColorR
          echo -e $Branco"por isso, facilita a criacao de poderosos"$ColorR
          echo -e $Branco"shell scripts capazes de ler, interceptar"$ColorR
          echo -e $Branco"e modificar o trafego de rede"$ColorR
          echo -e $Branco"de maneira transparente."$ColorR
          echo -e $BrancoBAD"Hexinject Homepage: http://hexinject.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hexinject/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "6" ]; then
          echo -e $Color"Instalando Programa Iaxflood."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install iaxflood
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "6help" ]; then
          echo -e $BrancoBAD"Sobre Iaxflood:"$ColorR
          echo -e $Branco"Um pacote UDP Inter-Asterisk_eXchange (ou seja, IAX)"$ColorR
          echo -e $Branco"foi capturado de um canal IAX entre dois PBXs"$ColorR
          echo -e $Branco"IP Asterisk."$ColorR
          echo -e $Branco"O conteudo desse pacote e a fonte da carga util"$ColorR
          echo -e $Branco"para o ataque incorporado por essa ferramenta."$ColorR
          echo -e $Branco"Embora o cabecalho do protocolo IAX"$ColorR
          echo -e $Branco"possa nao corresponder ao PBX Asterisk"$ColorR
          echo -e $Branco"que voce atacara com esta ferramenta,"$ColorR
          echo -e $Branco"pode exigir mais processamento"$ColorR
          echo -e $Branco"por parte do PBX do que um simples udpflood"$ColorR
          echo -e $Branco"sem qualquer carga util que se assemelhe"$ColorR
          echo -e $Branco"a uma carga util IAX."$ColorR
          echo -e $Branco"$ iaxflood."$ColorR
          echo -e $BrancoBAD"Iaxflood Homepage: http://www.hackingexposedvoip.com/sec_tools.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/iaxflood/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "7" ]; then
          echo -e $Color"Instalando Programa Inviteflood."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install inviteflood
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "7help" ]; then
          echo -e $BrancoBAD"Sobre Inviteflood:"$ColorR
          echo -e $Branco"Uma ferramenta para executar inundacao"$ColorR
          echo -e $Branco"de mensagens SIP/SDP INVITE sobre UDP/IP."$ColorR
          echo -e $Branco"Ele foi testado em uma plataforma Linux Red Hat"$ColorR
          echo -e $Branco"Fedora Core 4 (Pentium IV, 2,5 GHz), mas espera-se"$ColorR
          echo -e $Branco"que esta ferramenta seja construida e executada"$ColorR
          echo -e $Branco"com sucesso em uma variedade"$ColorR
          echo -e $Branco"de distribuicoes Linux."$ColorR
          echo -e $Branco"$ inviteflood."$ColorR
          echo -e $BrancoBAD"Inviteflood Homepage: http://www.hackingvoip.com/sec_tools.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/inviteflood/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "8" ]; then
          echo -e $Color"Instalando Programa Ismtp."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ismtp
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "8help" ]; then
          echo -e $BrancoBAD"Sobre Ismtp:"$ColorR
          echo -e $Branco"Teste para enumeracao de usuario SMTP"$ColorR
          echo -e $Branco"(RCPT TO e VRFY), falsificacao interna e retransmissao."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/altjx/ipwn/tree/master/iSMTP"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ismtp/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "9" ]; then
          echo -e $Color"Instalando Programa Isr-Evilgrade."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install isr-evilgrade
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "9help" ]; then
          echo -e $BrancoBAD"Sobre Isr-Evilgrade:"$ColorR
          echo -e $Branco"Evilgrade e uma estrutura modular"$ColorR
          echo -e $Branco"que permite ao usuario tirar proveito"$ColorR
          echo -e $Branco"de implementavoes de atualizacao ruins,"$ColorR
          echo -e $Branco"injetando atualizacoes falsas."$ColorR
          echo -e $Branco"Ele vem com binarios pre-fabricados (agentes),"$ColorR
          echo -e $Branco"uma configuracao padrao de trabalho para pentests"$ColorR
          echo -e $Branco"rapidos e possui seus proprios modulos WebServer"$ColorR
          echo -e $Branco"e DNSServer."$ColorR
          echo -e $Branco"Facil de configurar novas configuracoes"$ColorR
          echo -e $Branco"e tem uma configuracao automatica quando"$ColorR
          echo -e $Branco"novos agentes binarios sao configurados."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/infobyte/evilgrade"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/isr-evilgrade/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "10" ]; then
          echo -e $Color"Instalando Programa Mitmproxy."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install mitmproxy
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "10help" ]; then
          echo -e $BrancoBAD"Sobre Mitmproxy:"$ColorR
          echo -e $Branco"mitmproxy e um proxy man-in-the-middle interativo"$ColorR
          echo -e $Branco"para HTTP e HTTPS."$ColorR
          echo -e $Branco"Ele fornece uma interface de console que permite"$ColorR
          echo -e $Branco"que os fluxos de trafego sejam inspecionados"$ColorR
          echo -e $Branco"e editados em tempo real."$ColorR
          echo -e $Branco"Tambem e fornecido o mitmdump, a versao"$ColorR
          echo -e $Branco"de linha de comando do mitmproxy, com a mesma"$ColorR
          echo -e $Branco"funcionalidade, mas sem frescuras."$ColorR
          echo -e $Branco"Pense tcpdump para HTTP."$ColorR
          echo -e $BrancoBAD"Caracteristicas:"$ColorR
          echo -e $Branco"* interceptar e modificar solicitacoes"$ColorR
          echo -e $Branco"e respostas HTTP e HTTPS e modifica-las em tempo real."$ColorR
          echo -e $Branco"* salve conversas HTTP para reproducao e analise posteriores."$ColorR
          echo -e $Branco"* reproduzir o lado do cliente de uma conversa HTTP."$ColorR
          echo -e $Branco"* modo de proxy reverso para encaminhar o trafego"$ColorR
          echo -e $Branco"para um servidor especificado."$ColorR
          echo -e $Branco"* modo de proxy transparente no OSX e Linux."$ColorR
          echo -e $Branco"* fazer alteracoes com script no trafego HTTP usando Python."$ColorR
          echo -e $Branco"* Os certificados SSL/TLS para interceptacao"$ColorR
          echo -e $Branco"sao gerados em tempo real."$ColorR
          echo -e $Branco"* Este pacote contem o modulo python-pathod"$ColorR
          echo -e $Branco"(previamente fornecido por outro pacote fonte)."$ColorR
          echo -e $Branco"O modulo python-netlib tambem foi incluido,"$ColorR
          echo -e $Branco"mas foi descartado pelo upstream na versao 1.0."$ColorR
          echo -e $BrancoBAD"Mitmproxy Homepage: https://mitmproxy.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/mitmproxy/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "11" ]; then
          echo -e $Color"Instalando Programa Ohrwurm."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ohrwurm
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "11help" ]; then
          echo -e $Branco"Sobre Ohrwurm:"$ColorR
          echo -e $Branco"ohrwurm e um fuzzer RTP pequeno"$ColorR
          echo -e $Branco"e simples que foi testado com sucesso"$ColorR
          echo -e $Branco"em um pequeno numero de telefones SIP."$ColorR
          echo -e $BrancoBAD"Recursos:"$ColorR
          echo -e $Branco"* le mensagens SIP para obter informacoes da\nporta RTP numeros"$ColorR
          echo -e $Branco"* a leitura SIP pode ser omitida fornecendo a porta RTP"$ColorR
          echo -e $Branco"* numeros, para que qualquer trafego RTP possa ser difuso"$ColorR
          echo -e $Branco"* O trafego RTCP pode ser suprimido para evitar que codecs"$ColorR
          echo -e $Branco"* aprenda sobre a linha barulhenta"$ColorR
          echo -e $Branco"* cuidado especial e tomado para quebrar"$ColorR
          echo -e $Branco"o proprio manuseio do RTP"$ColorR
          echo -e $Branco"* a carga util RTP e fuzzed com um BER constante"$ColorR
          echo -e $Branco"* o BER e configuravel"$ColorR
          echo -e $Branco"* requer arpspoof do dsniff para fazer o ataque MITM"$ColorR
          echo -e $Branco"* requer que ambos os telefones estejam em uma LAN comutada"$ColorR
          echo -e $Branco"(GW operacao funciona apenas parcialmente)"$ColorR
          echo -e $BrancoBAD"Ohrwurm Homepage: http://mazzoo.de/blog/2006/08/25#ohrwurm"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ohrwurm/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "12" ]; then
          echo -e $Color"Instalando Programa Protos-Sip."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install protos-sip
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "12help" ]; then
          echo -e $BrancoBAD"Sobre Protos-Sip:"$ColorR
          echo -e $Branco"O objetivo deste conjunto de testes e avaliar"$ColorR
          echo -e $Branco"a seguranca e a robustez do nivel de implementacao"$ColorR
          echo -e $Branco"das implementacoes do Session Initiation Protocol (SIP)."$ColorR
          echo -e $BrancoBAD"Protos-Sip Homepage:"\
                            "https://www.ee.oulu.fi/research/ouspg/PROTOS_Test-Suite_c07-sip"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/protos-sip/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "13" ]; then
          echo -e $Color"Instalando Programa Rebind."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rebind
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "13help" ]; then
          echo -e $BrancoBAD"Sobre Rebind:"$ColorR
          echo -e $Branco"Rebind e uma ferramenta que implementa"$ColorR
          echo -e $Branco"o ataque de religacao de DNS de registro multiplo A."$ColorR
          echo -e $Branco"Embora essa ferramenta tenha sido originalmente escrita"$ColorR
          echo -e $Branco"para direcionar roteadores domesticos, ela pode ser usada"$ColorR
          echo -e $Branco"para direcionar qualquer endereco IP publico (nao RFC1918)."$ColorR
          echo -e $Branco"O Rebind fornece a um invasor externo acesso a interface"$ColorR
          echo -e $Branco"da Web interna de um roteador de destino."$ColorR
          echo -e $Branco"Essa ferramenta funciona em roteadores que implementam"$ColorR
          echo -e $Branco"o modelo de sistema final fraco em sua pilha de IPs,"$ColorR
          echo -e $Branco"tem regras de firewall configuradas especificamente"$ColorR
          echo -e $Branco"e que vinculam seu servico Web a interface WAN do roteador."$ColorR
          echo -e $Branco"Observe que a administracao remota nao precisa"$ColorR
          echo -e $Branco"ser habilitada para que esse ataque funcione."$ColorR
          echo -e $Branco"Tudo o que e necessario e que um usuario dentro"$ColorR
          echo -e $Branco"da rede de destino navegue em um site controlado"$ColorR
          echo -e $Branco"ou comprometido pelo invasor."$ColorR
          echo -e $BrancoBAD"Rebind Homepage: https://code.google.com/p/rebind/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rebind/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "14" ]; then
          echo -e $Color"Instalando Programa Responder."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install responder
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "$14help" ]; then
          echo -e $BrancoBAD"Sobre Responder:"$ColorR
          echo -e $Branco"Este pacote contem Responder/MultiRelay,"$ColorR
          echo -e $Branco"um envenenador LLMNR, NBT-NS e MDNS."$ColorR
          echo -e $Branco"Ele respondera a consultas NBT-NS (NetBIOS Name Service)"$ColorR
          echo -e $Branco"especificas com base em seu sufixo de nome"$ColorR
          echo -e $Branco"(consulte: http://support.microsoft.com/kb/163409)."$ColorR
          echo -e $Branco"Por padrao, a ferramenta respondera apenas a solicitacao"$ColorR
          echo -e $Branco"do Servico de Servidor de Arquivos, que e para SMB."$ColorR
          echo -e $Branco"O conceito por tras disso e direcionar suas respostas"$ColorR
          echo -e $Branco"e ser mais furtivo na rede."$ColorR
          echo -e $Branco"Isso tambem ajuda a garantir que voce nao quebre"$ColorR
          echo -e $Branco"o comportamento NBT-NS legitimo."$ColorR
          echo -e $Branco"Voce pode definir a opcao -r por meio"$ColorR
          echo -e $Branco"da linha de comando se quiser responder"$ColorR
          echo -e $Branco"ao sufixo do nome da solicitacao do Servico"$ColorR
          echo -e $Branco"de Estacao de Trabalho."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/lgandx/Responder"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/responder/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "15" ]; then
          echo -e $Color"Instalando Programa Rtpbreak."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rtpbreak
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "15help" ]; then
          echo -e $BrancoBAD"Sobre Rtpbreak:"$ColorR
          echo -e $Branco"Com rtpbreak voce pode detectar,"$ColorR
          echo -e $Branco"reconstruir e analisar qualquer sessao RTP."$ColorR
          echo -e $Branco"Nao requer a presenca de pacotes RTCP e funciona"$ColorR
          echo -e $Branco"independentemente do protocolo de sinalizacao"$ColorR
          echo -e $Branco"utilizado (SIP, H.323, SCCP, …)."$ColorR
          echo -e $Branco"A entrada e uma sequencia de pacotes,"$ColorR
          echo -e $Branco"a saida e um conjunto de arquivos que voce"$ColorR
          echo -e $Branco"pode usar como entrada para outras ferramentas"$ColorR
          echo -e $Branco"(wireshark/tshark, sox, grep/awk/cut/cat/sed, …)."$ColorR
          echo -e $Branco"Ele tambem suporta redes sem fio (AP_DLT_IEEE802_11)."$ColorR
          echo -e $BrancoBAD"Rtpbreak Homepage: http://dallachiesa.com/code/rtpbreak/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rtpbreak/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "16" ]; then
          echo -e $Color"Instalando Programa Rtpinsertsound."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rtpinsertsound
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "16help" ]; then
          echo -e $BrancoBAD"Sobre Rtpinsertsound:"$ColorR
          echo -e $Branco"Uma ferramenta para inserir audio em um fluxo"$ColorR
          echo -e $Branco"de audio especificado (ou seja, RTP)"$ColorR
          echo -e $Branco"foi criada no periodo de agosto a setembro de 2006."$ColorR
          echo -e $Branco"A ferramenta e denominada rtpinsertsound."$Branco
          echo -e $Branco"Ele foi testado em uma plataforma Linux Red Hat"$ColorR
          echo -e $Branco"Fedora Core 4 (Pentium IV, 2,5 GHz),"$ColorR
          echo -e $Branco"mas espera-se que esta ferramenta seja"$ColorR
          echo -e $Branco"construida e executada com sucesso em uma variedade"$ColorR
          echo -e $Branco"de distribuicoes Linux."$ColorR
          echo -e $BrancoBAD"Rtpinsertsound Homepage: http://www.hackingvoip.com/sec_tools.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rtpinsertsound/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "17" ]; then
          echo -e $Color"Instalando Programa Rtpmixsound."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rtpmixsound
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "17help" ]; then
          echo -e $BrancoBAD"Sobre Rtpmixsound:"$ColorR
          echo -e $Branco"Uma ferramenta para misturar audio pre-gravado"$ColorR
          echo -e $Branco"em tempo real com o audio (ou seja, RTP)"$ColorR
          echo -e $Branco"no fluxo de audio de destino especificado."$ColorR
          echo -e $BrancoBAD"Rtpmixsound Homepage: http://www.hackingvoip.com/sec_tools.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rtpmixsound/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "18" ]; then
          echo -e $Color"Instalando Programa Sctpscan."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sctpscan
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "18help" ]; then
          echo -e $BrancoBAD"Sobre Sctpscan:"$ColorR
          echo -e $Branco"Scanner de rede SCTP para descoberta e seguranca."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/philpraxis/sctpscan"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sctpscan/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "19" ]; then
          echo -e $Color"Instalando Programa Siparmyknife."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install siparmyknife
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "19help" ]; then
          echo -e $BrancoBAD"Sobre Siparmyknife:"$ColorR
          echo -e $Branco"O SIP Army Knife e um fuzzer que"$ColorR
          echo -e $Branco"procura scripts entre sites, injecao de SQL,"$ColorR
          echo -e $Branco"injecao de log, strings de formato, estouros"$ColorR
          echo -e $Branco"de buffer e muito mais."$ColorR
          echo -e $BrancoBAD"Siparmyknife Homepage:"\
                            "https://packetstormsecurity.com/files/107301/SIP-Army-Knife-Fuzzer-11232011.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/siparmyknife/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "20" ]; then
          echo -e $Color"Instalando Programa Sipp."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sipp
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "20help" ]; then
          echo -e $BrancoBAD"Sobre Sipp:"$ColorR
          echo -e $Branco"SIPp e uma ferramenta de teste"$ColorR
          echo -e $Branco"gerador de trafego de codigo aberto gratuito"$ColorR
          echo -e $Branco"para o protocolo SIP."$ColorR
          echo -e $Branco"Ele inclui alguns cenrios basicos de agente"$ColorR
          echo -e $Branco"de usuario SipStone (UAC e UAS) e estabelece"$ColorR
          echo -e $Branco"e libera varias chamadas com os metodos INVITE e BYE."$ColorR
          echo -e $Branco"Ele tambem pode ler arquivos de cenario XML"$ColorR
          echo -e $Branco"personalizados que descrevem fluxos de chamadas"$ColorR
          echo -e $Branco"muito simples a complexos."$ColorR
          echo -e $Branco"Ele apresenta a exibicao dinamica de estatisticas"$ColorR
          echo -e $Branco"sobre testes em execucao (taxa de chamadas,"$ColorR
          echo -e $Branco"atraso de ida e volta e estatisticas de mensagens),"$ColorR
          echo -e $Branco"despejos periodicos de estatisticas CSV,"$ColorR
          echo -e $Branco"TCP e UDP em varios soquetes ou multiplexados"$ColorR
          echo -e $Branco"com gerenciamento de retransmissao"$ColorR
          echo -e $Branco"e taxas de chamadas ajustaveis ​​dinamicamente."$ColorR
          echo -e $BrancoBAD"Sipp Homepage: http://sipp.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sipp/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "21" ]; then
          echo -e $Color"Instalando Programa SIPVicious."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sipvicious
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "21help" ]; then
          echo -e $BrancoBAD"Sobre SIPVicious:"$ColorR
          echo -e $Branco"A suite SIPVicious e um conjunto de ferramentas"$ColorR
          echo -e $Branco"que podem ser usadas para auditar sistemas VoIP baseados"$ColorR
          echo -e $Branco"em SIP."$ColorR
          echo -e $BrancoBAD"Esta suite possui cinco ferramentas:"$ColorR
          echo -e $Branco"svmap, svwar, svcrack, svreport, svcrash."$ColorR
          echo -e $Branco"svmap e um scanner de gole."$ColorR
          echo -e $Branco"Quando iniciado em intervalos de espaco"$ColorR
          echo -e $Branco"de endereco IP, ele identificara quaisquer servidores"$ColorR
          echo -e $Branco"SIP que encontrar no caminho."$ColorR
          echo -e $Branco"svwar identifica linhas de ramal"$ColorR
          echo -e $Branco"em funcionamento em um PBX."$ColorR
          echo -e $Branco"Tambem informa se a linha de ramal"$ColorR
          echo -e $Branco"requer autenticacao ou nao."$ColorR
          echo -e $Branco"svcrack e um cracker de senhas que usa"$ColorR
          echo -e $Branco"autenticacao digest."$ColorR
          echo -e $Branco"E capaz de quebrar senhas em servidores"$ColorR
          echo -e $Branco"de registro e servidores proxy."$ColorR
          echo -e $Branco"svreport e capaz de gerenciar sessoes"$ColorR
          echo -e $Branco"criadas pelo resto das ferramentas"$ColorR
          echo -e $Branco"e exportar para pdf, xml, csv e texto simples."$ColorR
          echo -e $Branco"svcrash responde a mensagens SIP svwar e svcrack"$ColorR
          echo -e $Branco"com uma mensagem que faz"$ColorR
          echo -e $Branco"com que versoes antigas travem."$ColorR
          echo -e $Branco"$ svcrack."$ColorR
          echo -e $Branco"$ svreport."$ColorR
          echo -e $Branco"$ svcrash."$ColorR
          echo -e $Branco"$ svwar."$ColorR
          echo -e $Branco"$ svmap."$ColorR
          echo -e $Branco"$ svmap."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/EnableSecurity/sipvicious"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sipvicious/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "22" ]; then
          echo -e $Color"Instalando Programa Sniffjoke."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sniffjoke
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "22help" ]; then
          echo -e $BrancoBAD"Sobre Sniffjoke:"$ColorR
          echo -e $Branco"SniffJoke e um aplicativo para Linux"$ColorR
          echo -e $Branco"que trata de forma transparente sua conexao"$ColorR
          echo -e $Branco"TCP, atrasando, modificando e injetando"$ColorR
          echo -e $Branco"pacotes falsos dentro de sua transmissao,"$ColorR
          echo -e $Branco"tornando quase impossivel sua leitura correta"$ColorR
          echo -e $Branco"por uma tecnologia de escuta"$ColorR
          echo -e $Branco"passiva (IDS ou sniffer)."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/vecna/sniffjoke"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sniffjoke/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "23" ]; then
          echo -e $Color"Instalando Programa SSLsplit."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sslsplit
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "23help" ]; then
          echo -e $BrancoBAD"Sobre SSLsplit:"$ColorR
          echo -e $Branco"SSLsplit e uma ferramenta para ataques"\
                         "\nman-in-the-middle contra conexoes"$ColorR
          echo -e $Branco"de rede criptografadas SSL/TLS."$ColorR
          echo -e $Branco"As conexoes sao interceptadas de forma"\
                         "transparente por meio"$ColorR
          echo -e $Branco"de um mecanismo de traducao de enderecos de"\
                         "\nrede e redirecionadas para SSLsplit."$ColorR
          echo -e $Branco"O SSLsplit encerra o SSL/TLS e inicia uma nova"\
                         "\nconexao SSL/TLS com o endereco"$ColorR
          echo -e $Branco"de destino original, enquanto registra todos os"\
                         "dados transmitidos."$ColorR
          echo -e $Branco"O SSLsplit destina-se a ser util para analise"\
                         "forense\nde rede e testes de penetracao."$ColorR
          echo -e $BrancoBAD"Homepage: https://www.roe.ch/SSLsplit"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sslsplit/"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/droe/sslsplit"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "24" ]; then
          echo -e $Color"Instalando Programa SSLstrip."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sslstrip
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "24help" ]; then
          echo -e $BrancoBAD"Sobre SSLstrip:"$ColorR
          echo -e $Branco"sslstrip e uma ferramenta que sequestra"$ColorR
          echo -e $Branco"de forma transparente o trafego HTTP"$ColorR
          echo -e $Branco"em uma rede, observa links e redirecionamentos HTTPS"$ColorR
          echo -e $Branco"e, em seguida, mapeia esses links em links HTTP"$ColorR
          echo -e $Branco"semelhantes ou links HTTPS semelhantes"$ColorR
          echo -e $Branco"a homografos."$ColorR
          echo -e $Branco"Ele tambem suporta modos para fornecer"$ColorR
          echo -e $Branco"um favicon que se parece com um icone"$ColorR
          echo -e $Branco"de cadeado, registro seletivo"$ColorR
          echo -e $Branco"e negacao de sessao."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/L1ghtn1ng/sslstrip"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sslstrip/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "25" ]; then
          echo -e $Color"Instalando Programa Thc-Ipv6."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install thc-ipv6
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "25help" ]; then
          echo -e $BrancoBAD"Sobre THC-IPV6:"$ColorR
          echo -e $Branco"Kit de ferramentas de ataque para testar as"$ColorR
          echo -e $Branco"fraquezas dos protocolos IPv6 e ICMPv6."$ColorR
          echo -e $Branco"Algumas das ferramentas incluidas:"$ColorR
          echo -e $Branco"$ alive6: uma varredura viva eficaz."$ColorR
          echo -e $Branco"$ denial6: tente uma colecao de testes de"$ColorR
          echo -e $Branco"negacao de servico contra um alvo."$ColorR
          echo -e $Branco"$ detect-new-ip6: detecta novos dispositivos"$ColorR
          echo -e $Branco"ip6 que ingressam na rede."$ColorR
          echo -e $Branco"$ dnsdict6: bruteforcer de dicionario dns"$ColorR
          echo -e $Branco"ipv6 paralelizado."$ColorR
          echo -e $Branco"$ dos-new-ip6: detecta novos dispositivos"$ColorR
          echo -e $Branco"ip6 e informa que o IP escolhido colide"$ColorR
          echo -e $Branco"na rede (DOS)."$ColorR
          echo -e $Branco"$ exploit6: teste vulnerabilidades IPv6"$ColorR
          echo -e $Branco"conhecidas em um alvo."$ColorR
          echo -e $Branco"$ fake_mld6: anuncie-se em um grupo multicast"$ColorR
          echo -e $Branco"de sua escolha na rede."$ColorR
          echo -e $Branco"$ fake_router6: anuncie-se como um"$ColorR
          echo -e $Branco"roteador na rede."$ColorR
          echo -e $Branco"$ flood_advertise6: inunda um alvo com"$ColorR
          echo -e $Branco"anuncios aleatorios de vizinhos."$ColorR
          echo -e $Branco"$ flood_router6: inunda um alvo com anuncios"$ColorR
          echo -e $Branco"aleatorios de roteador."$ColorR
          echo -e $Branco"$ implementation6: executa varias verificacoes"$ColorR
          echo -e $Branco"de implementacao no IPv6."$Color
          echo -e $Branco"$ parasite6: spoofer de solicitacao/anuncio"$ColorR
          echo -e $Branco"de vizinho icmp."$ColorR
          echo -e $Branco"$ redir6: redireciona o trafego para voce de"$ColorR
          echo -e $Branco"forma inteligente (man-in-the-middle)"$ColorR
          echo -e $Branco"com um spoofer de redirecionamento"$ColorR
          echo -e $Branco"icmp6 inteligente."$ColorR
          echo -e $Branco"$ rsmurf6: smurfer remoto (conhecido por"$ColorR
          echo -e $Branco"funcionar apenas contra Linux no momento)."$ColorR
          echo -e $Branco"$ thcping6: envia um pacote ping6 feito a mao."$ColorR
          echo -e $Branco"$ toobig6: Mtu decrescente com a mesma inteligencia que redir6.."$ColorR
          echo -e $Branco"$ atk6-address6."$ColorR
          echo -e $Branco"$ atk6-connsplit6."$ColorR
          echo -e $Branco"$ atk6-denial6."$ColorR
          echo -e $Branco"$ atk6-dnsdict6."$ColorR
          echo -e $Branco"$ atk6-dos-new-ip6."$ColorR
          echo -e $Branco"$ atk6-exploit6."$ColorR
          echo -e $Branco"$ atk6-fake_advertise6."$ColorR
          echo -e $Branco"$ atk6-fake_dnsupdate6."$ColorR
          echo -e $Branco"$ atk6-fake_mld6."$ColorR
          echo -e $Branco"$ atk6-fake_router26."$ColorR
          echo -e $Branco"$ atk6-flood_mld26."$ColorR
          echo -e $Branco"$ atk6-flood_redir6."$ColorR
          echo -e $Branco"$ atk6-flood_rs6."$ColorR
          echo -e $Branco"$ atk6-four2six."$ColorR
          echo -e $Branco"$ atk6-fuzz_dhcpc6."$ColorR
          echo -e $Branco"$ atk6-implementation6."$ColorR
          echo -e $Branco"$ atk6-inverse_lookup6."$ColorR
          echo -e $Branco"$ atk6-ndpexhaust6."$ColorR
          echo -e $Branco"$ atk6-passive_discovery6."$ColorR
          echo -e $Branco"$ atk6-redirsniff6."$ColorR
          echo -e $Branco"$ atk6-sendpeesmp6."$ColorR
          echo -e $Branco"$ atk6-thcsyn6."$ColorR
          echo -e $Branco"$ atk6-trace6."$ColorR
          echo -e $Branco"$ atk6-alive6."$ColorR
          echo -e $Branco"$ atk6-covert_send6."$ColorR
          echo -e $Branco"$ atk6-detect-new-ip6."$ColorR
          echo -e $Branco"$ atk6-dnsrevenum6."$ColorR
          echo -e $Branco"$ atk6-dump_dhcp6."$ColorR
          echo -e $Branco"$ atk6-extract_hosts6."$ColorR
          echo -e $Branco"$ atk6-fake_dhcps6."$ColorR
          echo -e $Branco"$ atk6-fake_mipv6."$ColorR
          echo -e $Branco"$ atk6-fake_mldrouter6."$ColorR
          echo -e $Branco"$ atk6-fake_router6."$ColorR
          echo -e $Branco"$ atk6-flood_advertise6."$ColorR
          echo -e $Branco"$ atk6-flood_mld6."$ColorR
          echo -e $Branco"$ atk6-flood_router26."$ColorR
          echo -e $Branco"$ atk6-flood_solicitate6."$ColorR
          echo -e $Branco"$ atk6-fragmentation6."$ColorR
          echo -e $Branco"$ atk6-fuzz_dhcps6."$ColorR
          echo -e $Branco"$ atk6-implementation6d."$ColorR
          echo -e $Branco"$ atk6-kill_router6."$ColorR
          echo -e $Branco"$ atk6-node_query6."$ColorR
          echo -e $Branco"$ atk6-randicmp6."$ColorR
          echo -e $Branco"$ atk6-rsmurf6."$ColorR
          echo -e $Branco"$ atk6-smurf6."$ColorR
          echo -e $Branco"$ atk6-toobig6."$ColorR
          echo -e $Branco"$ atk6-connect6."$ColorR
          echo -e $Branco"$ atk6-covert_send6d."$ColorR
          echo -e $Branco"$ atk6-detect_sniffer6."$ColorR
          echo -e $Branco"$ atk6-dnssecwalk."$ColorR
          echo -e $Branco"$ atk6-dump_router6."$ColorR
          echo -e $Branco"$ atk6-extract_networks6."$ColorR
          echo -e $Branco"$ atk6-fake_dns6d."$ColorR
          echo -e $Branco"$ atk6-fake_mld26."$ColorR
          echo -e $Branco"$ atk6-fake_pim6."$ColorR
          echo -e $Branco"$ atk6-fake_solicitate6."$ColorR
          echo -e $Branco"$ atk6-flood_dhcpc6."$ColorR
          echo -e $Branco"$ atk6-flood_mldrouter6."$ColorR
          echo -e $Branco"$ atk6-flood_router6."$ColorR
          echo -e $Branco"$ atk6-flood_unreach6."$ColorR
          echo -e $Branco"$ atk6-fragrouter6."$ColorR
          echo -e $Branco"$ atk6-fuzz_ip6."$ColorR
          echo -e $Branco"$ atk6-inject_alive6."$ColorR
          echo -e $Branco"$ atk6-ndpexhaust26."$ColorR
          echo -e $Branco"$ atk6-parasite6."$ColorR
          echo -e $Branco"$ atk6-redir6."$ColorR
          echo -e $Branco"$ atk6-sendpees6."$ColorR
          echo -e $Branco"$ atk6-thcping6."$ColorR
          echo -e $Branco"$ atk6-toobigsniff6."$ColorR
          echo -e $BrancoBAD"Thc-Ipv6 Homepage: http://www.thc.org/thc-ipv6/"$ColorR
          echo -e $BrancoBAD"Github:"\
                                    "https://github.com/vanhauser-thc/thc-ipv6"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/thc-ipv6/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "26" ]; then
          echo -e $Color"Instalando Programa VoIPHopper."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install voiphopper
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "26help" ]; then
          echo -e $BrancoBAD"Sobre VoIPHopper:"$ColorR
          echo -e $Branco"VoIP Hopper e uma ferramenta de seguranca"$ColorR
          echo -e $Branco"licenciada GPLv3, escrita em C que executa"$ColorR
          echo -e $Branco"rapidamente um teste de seguranca VLAN Hop."$ColorR
          echo -e $Branco"VoIP Hopper e uma ferramenta de teste"$ColorR
          echo -e $Branco"de seguranca de infraestrutura VoIP, mas"$ColorR
          echo -e $Branco"tambem uma ferramenta que pode ser usada"$ColorR
          echo -e $Branco"para testar a (in)seguranca de VLANs."$ColorR
          echo -e $BrancoBAD"Voiphopper Homepage: https://sourceforge.net/projects/voiphopper"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/voiphopper/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "27" ]; then
          echo -e $Color"Instalando Programa Webscarab."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install webscarab
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "27help" ]; then
          echo -e $BrancoBAD"Sobre Webscarab:"$ColorR
          echo -e $Branco"O WebScarab foi projetado para ser uma"$ColorR
          echo -e $Branco"ferramenta para qualquer pessoa que"$ColorR
          echo -e $Branco"precise expor o funcionamento de um aplicativo"$ColorR
          echo -e $Branco"baseado em HTTP(S), seja para permitir"$ColorR
          echo -e $Branco"que o desenvolvedor depure problemas dificeis"$ColorR
          echo -e $Branco"ou para permitir que um especialista"$ColorR
          echo -e $Branco"em seguranca identifique vulnerabilidades"$ColorR
          echo -e $Branco"na maneira como o aplicativo"$ColorR
          echo -e $Branco"foi projetado ou implementado."$ColorR
          echo -e $Branco"$ webscarab."$ColorR
          echo -e $BrancoBAD"Webscarab Homepage: http://dawes.za.net/rogan/webscarab/#current"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/webscarab/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "28" ]; then
          echo -e $Color"Instalando Programa Wifi-Honey."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install wifi-honey
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "28help" ]; then
          echo -e $BrancoBAD"Sobre Wifi-Honey:"$ColorR
          echo -e $Branco"No caso do WPA/WPA2, executando airodump-ng ao lado disso,"$ColorR
          echo -e $Branco"voce tambem acaba capturando os dois primeiros pacotes"$ColorR
          echo -e $Branco"do handshake de quatro vias e, portanto, pode tentar quebrar"$ColorR
          echo -e $Branco"a chave com aircrack-ng ou coWPAtty."$ColorR
          echo -e $Branco"O que esse script faz e automatizar"$ColorR
          echo -e $Branco"o processo de configuracao, ele cria cinco"$ColorR
          echo -e $Branco"interfaces de modo monitor, quatro sao usadas"$ColorR
          echo -e $Branco"como APs e a quinta e usada para airodump-ng."$ColorR
          echo -e $Branco"Para facilitar as coisas, em vez de ter cinco"$ColorR
          echo -e $Branco"janelas, tudo isso e feito em uma sessao de tela"$ColorR
          echo -e $Branco"que permite alternar entre as telas"$ColorR
          echo -e $Branco"para ver o que esta acontecendo."$ColorR
          echo -e $Branco"Todas as sessoes sao rotuladas"$ColorR
          echo -e $Branco"para que voce saiba qual e qual."$ColorR
          echo -e $BrancoBAD"Wifi-Honey Homepage: https://www.digininja.org/projects/wifi_honey.php"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/wifi-honey/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "29" ]; then
          echo -e $Color"Instalando Programa Wireshark."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install libwireshark-data
          apt-get -y install libwireshark-dev
          apt-get -y install libwireshark15
          apt-get -y install libwiretap-dev
          apt-get -y install libwiretap12
          apt-get -y install libwsutil-dev
          apt-get -y install libwsutil13
          apt-get -y install tshark
          apt-get -y install wireshark
          apt-get -y install wireshark-common
          apt-get -y install wireshark-dev
          apt-get -y install wireshark-doc
          apt-get -y install wireshark-gtk
          apt-get -y install wireshark-qt
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "29help" ]; then
          echo -e $BrancoBAD"Sobre Wireshark:"$ColorR
          echo -e $Branco"Wireshark e um “sniffer” de rede - uma ferramenta"$ColorR
          echo -e $Branco"que captura e analisa pacotes fora do fio."$ColorR
          echo -e $Branco"O Wireshark pode decodificar muitos protocolos"$ColorR
          echo -e $Branco"$ tshark."$ColorR
          echo -e $Branco"$ capinfos."$ColorR
          echo -e $Branco"$ editcap."$ColorR
          echo -e $Branco"$ randpkt."$ColorR
          echo -e $Branco"$ sharkd."$ColorR
          echo -e $Branco"$ captype."$ColorR
          echo -e $Branco"$ mergecap."$ColorR
          echo -e $Branco"$ rawshark."$ColorR
          echo -e $Branco"$ text2pcap."$ColorR
          echo -e $Branco"$ dumpcap."$ColorR
          echo -e $Branco"$ mmdbresolve."$ColorR
          echo -e $Branco"$ reordercap."$ColorR
          echo -e $Branco"$ asn2deb."$ColorR
          echo -e $Branco"$ idl2deb."$ColorR
          echo -e $Branco"$ idl2wrs."$ColorR
          echo -e $Branco"$ wireshark."$ColorR
          echo -e $Branco"para listar aqui."$ColorR
          echo -e $BrancoBAD"Wireshark Homepage: https://www.wireshark.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/wireshark"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "30" ]; then
          echo -e $Color"Instalando Programa Xspy."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install xspy
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "30help" ]; then
          echo -e $BrancoBAD"Sobre Xspy:"$ColorR
          echo -e $Branco"Fareja pressionamentos de tecla em servidores X-Windows"$ColorR
          echo -e $Branco"remotos ou locais."$ColorR
          echo -e $BrancoBAD"Xspy Homepage: https://www.kali.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/xspy/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "31" ]; then
          echo -e $Color"Instalando Programa Yersinia."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install yersinia
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "31help" ]; then
          echo -e $BrancoBAD"Sobre Yersinia:"$ColorR
          echo -e $Branco"Yersinia e uma estrutura para realizar ataques de camada 2."$ColorR
          echo -e $Branco"Ele foi projetado para tirar proveito de algumas fraquezas"$ColorR
          echo -e $Branco"em diferentes protocolos de rede."$ColorR
          echo -e $Branco"Ele pretende ser uma estrutura solida para analisar"$ColorR
          echo -e $Branco"e testar as redes e sistemas implantados."$ColorR
          echo -e $Branco"Ataques para os seguintes protocolos de rede"$ColorR
          echo -e $Branco"sao implementados nesta versao especifica:"$ColorR
          echo -e $Branco"* Spanning Tree Protocol (STP)."$ColorR
          echo -e $Branco"* Protocolo de descoberta da Cisco (CDP)."$ColorR
          echo -e $Branco"* Protocolo de entroncamento dinamico (DTP)."$ColorR
          echo -e $Branco"* Protocolo de configuracao dinamica de host (DHCP)."$ColorR
          echo -e $Branco"* Hot Standby Router Protocol (HSRP)."$ColorR
          echo -e $Branco"* 802.1q."$ColorR
          echo -e $Branco"* 802.1x."$ColorR
          echo -e $Branco"* Inter-Switch Link Protocol (ISL)."$ColorR
          echo -e $Branco"* Protocolo de entroncamento de VLAN (VTP)."$ColorR
          echo -e $Branco"$ yersinia."$ColorR
          echo -e $BrancoBAD"Yersinia Homepage: http://www.yersinia.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/yersinia/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "32" ]; then
          echo -e $Color"Instalando Programa Zaproxy."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install zaproxy
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "32help" ]; then
          echo -e $BrancoBAD"Sobre Zaproxy:"$ColorR
          echo -e $Branco"O OWASP Zed Attack Proxy (ZAP) e uma ferramenta"$ColorR
          echo -e $Branco"de teste de penetracao integrada facil"$ColorR
          echo -e $Branco"de usar para encontrar vulnerabilidades"$ColorR
          echo -e $Branco"em aplicativos da web."$ColorR
          echo -e $Branco"Ele foi projetado para ser usado por pessoas"$ColorR
          echo -e $Branco"com uma ampla gama de experiencia"$ColorR
          echo -e $Branco"em seguranca e, como tal, e ideal para desenvolvedores"$ColorR
          echo -e $Branco"e testadores funcionais que sao novos em testes"$ColorR
          echo -e $Branco"de penetracao, alem de ser uma adicao"$ColorR
          echo -e $Branco"util a uma caixa de ferramentas de testadores"$ColorR
          echo -e $Branco"de caneta experientes. https://www.owasp.org/index.php/ZAP"$ColorR
          echo -e $Branco"$ owasp-zap."$ColorR
          echo -e $Branco"$ zaproxy."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/zaproxy/zaproxy"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/zaproxy/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "33" ]; then
          echo -e $Color"Instalando Programa Bettercap."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install bettercap
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "33help" ]; then
          echo -e $BrancoBAD"Sobre Bettercap:"$ColorR
          echo -e $Branco"O canivete suico para reconhecimento de redes"$ColorR
          echo -e $Branco"802.11, BLE, IPv4 e IPv6 e ataques MITM."$ColorR
          echo -e $Branco"Bettercap e uma estrutura poderosa, facilmente"$ColorR
          echo -e $Branco"extensivel e portatil escrita em Go, que visa oferecer aos"$ColorR
          echo -e $Branco"pesquisadores de seguranca, red teamers"$ColorR
          echo -e $Branco"e engenheiros reversos"$ColorR
          echo -e $Branco"uma solucao completa e facil de usar com todos os recursos"$ColorR
          echo -e $Branco"necessarios para realizar reconhecimento e ataque"$ColorR
          echo -e $Branco"Redes WiFi, dispositivos Bluetooth"$ColorR
          echo -e $Branco"Low Energy, dispositivos HID"$ColorR
          echo -e $Branco"sem fio e redes Ethernet."$ColorR
          echo -e $BrancoBAD"Principais caracteristicas:"$ColorR
          echo -e $Branco"* Varredura de redes WiFi, ataque"$ColorR
          echo -e $Branco"de desautenticacao, ataque"$ColorR
          echo -e $Branco"de associacao PMKID sem cliente"$ColorR
          echo -e $Branco"e captura automatica de handshakes"$ColorR
          echo -e $Branco"de clientes WPA/WPA2."$ColorR
          echo -e $Branco"* Digitalizacao de dispositivos Bluetooth Low Energy, enumeracao"$ColorR
          echo -e $Branco"de caracteristicas, leitura e escrita."$ColorR
          echo -e $Branco"* Varredura de dispositivos sem fio de 2,4 GHz e ataques"$ColorR
          echo -e $Branco"de MouseJacking com injecao de quadros HID over-the-air"$ColorR
          echo -e $Branco"(com suporte a DuckyScript)."$ColorR
          echo -e $Branco"* A rede IP passiva e ativa hospeda sondagem e reconhecimento."$ColorR
          echo -e $Branco"Spoofers ARP, DNS, NDP e DHCPv6 para ataques"$ColorR
          echo -e $Branco"MITM em redes baseadas em IPv4 e IPv6."$ColorR
          echo -e $Branco"* Proxies em nivel de pacote, nivel TCP"$ColorR
          echo -e $Branco"e nivel de aplicativo HTTP/HTTPS"$ColorR
          echo -e $Branco"totalmente programaveis com plug-ins"$Branco
          echo -e $Branco"javascript faceis de implementar."$ColorR
          echo -e $Branco"* Um poderoso sniffer de rede"$ColorR
          echo -e $Branco"para coleta de credenciais que tambem"$ColorR
          echo -e $Branco"pode ser usado como um difusor de protocolo de rede."$ColorR
          echo -e $Branco"* Um scanner de porta muito rapido."$ColorR
          echo -e $Branco"* Uma poderosa API REST com suporte"$ColorR
          echo -e $Branco"para notificacao de eventos assincronos"$ColorR
          echo -e $Branco"no websocket para orquestrar seus ataques com facilidade."$ColorR
          echo -e $Branco"* Uma interface de usuario da web muito conveniente."$ColorR
          echo -e $Branco"Mais!  (https://www.bettercap.org/modules/)"$ColorR
          echo -e $Branco"Este pacote contem um canivete suico"$ColorR
          echo -e $Branco"para reconhecimento e ataques"$ColorR
          echo -e $Branco"de redes 802.11, BLE e Ethernet."$ColorR
          echo -e $BrancoBAD"Bettercap Homepage: https://www.bettercap.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/bettercap/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "34" ]; then
          echo -e $Color"Instalando Programa Macchanger."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install macchanger
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "34help" ]; then
          echo -e $BrancoBAD"Sobre Macchanger:"$ColorR
          echo -e $Branco"GNU MAC Changer e um utilitario que facilita"$ColorR
          echo -e $Branco"a manipulacao de enderecos MAC de interfaces de rede."$ColorR
          echo -e $Branco"Os enderecos MAC sao identificadores unicos em redes,"$ColorR
          echo -e $Branco"eles so precisam ser unicos, eles podem ser alterados"$ColorR
          echo -e $Branco"na maioria dos hardwares de rede."$ColorR
          echo -e $Branco"Os enderecos MAC comecaram a ser abusados"$ColorR
          echo -e $Branco"por empresas de marketing sem escrupulos, agencias"$ColorR
          echo -e $Branco"governamentais e outros para fornecer uma maneira facil"$ColorR
          echo -e $Branco"de rastrear um computador em varias redes."$ColorR
          echo -e $Branco"Ao alterar o endereco MAC regularmente, esse tipo"$ColorR
          echo -e $Branco"de rastreamento pode ser frustrado ou, pelo"$ColorR
          echo -e $Branco"menos, muito mais dificil."$ColorR
          echo -e $BrancoBAD"Caracteristicas:"$ColorR
          echo -e $Branco"* definir o endereco MAC especifico de uma interface de rede."$ColorR
          echo -e $Branco"* defina o MAC aleatoriamente."$ColorR
          echo -e $Branco"* definir um MAC de outro fornecedor."$ColorR
          echo -e $Branco"* defina outro MAC do mesmo fornecedor."$ColorR
          echo -e $Branco"* defina um MAC do mesmo tipo (por exemplo: placa wireless)."$ColorR
          echo -e $Branco"* exibir uma lista MAC do fornecedor (hoje, 6200 itens) para escolher"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/alobbs/macchanger"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/macchanger/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "35" ]; then
          echo -e $Color"Instalando Programa Netsniff-Ng."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install netsniff-ng
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "35help" ]; then
          echo -e $BrancoBAD"Sobre Netsniff-Ng:"$ColorR
          echo -e $Branco"O netsniff-ng e um sniffer"$ColorR
          echo -e $Branco"de rede Linux de alto desempenho"$ColorR
          echo -e $Branco"para inspecao de pacotes."$ColorR
          echo -e $Branco" Ele pode ser usado para analise"$ColorR
          echo -e $Branco"de protocolo, engenharia"$ColorR
          echo -e $Branco"reversa ou depuracao de rede. "$ColorR
          echo -e $Branco"O ganho de desempenho e alcancado por mecanismos"$ColorR
          echo -e $Branco"de ‘copia zero’, para que o kernel nao precise copiar"$ColorR
          echo -e $Branco"pacotes do kernelspace para o userspace."$ColorR
          echo -e $BrancoBAD"O kit de ferramentas netsniff-ng"$ColorR
          echo -e $Branco"atualmente consiste nos seguintes utilitarios:"$ColorR
          echo -e $Branco"netsniff-ng: um analisador de pacotes de copia zero,"$ColorR
          echo -e $Branco"ferramenta de captura/reproducao pcap."$ColorR
          echo -e $Branco"trafgen: um gerador de pacotes de rede de"$ColorR
          echo -e $Branco"copia zero de baixo nivel multithread."$ColorR
          echo -e $Branco"mausezahn: gerador de pacotes de alto nivel"$ColorR
          echo -e $Branco"para dispositivos com Cisco-CLI."$ColorR
          echo -e $Branco"ifpps: uma ferramenta de estatisticas"$ColorR
          echo -e $Branco"de sistema e rede do kernel top-like."$ColorR
          echo -e $Branco"curvetun: um tunel IP multiusuario"$ColorR
          echo -e $Branco"leve baseado em curve25519."$ColorR
          echo -e $Branco"astracroute: uma rota de rastreamento"$ColorR
          echo -e $Branco"de sistema autonomo e utilitario de teste de DPI."$ColorR
          echo -e $Branco"flowtop: uma ferramenta de rastreamento"$ColorR
          echo -e $Branco"de conexao de filtro de rede top-like."$ColorR
          echo -e $Branco"bpfc: um compilador [seccomp-]BPF"$ColorR
          echo -e $Branco"(filtro de pacotes Berkeley), desmontador JIT"$ColorR
          echo -e $BrancoBAD"Netsniff Homepage: http://netsniff-ng.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/netsniff-ng/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "36" ]; then
          echo -e $Color"Instalando Programa Tcpflow."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install tcpflow
          apt-get -y install tcpflow-nox
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "36help" ]; then
          echo -e $BrancoBAD"Sobre Tcpflow:"$ColorR
          echo -e $Branco"tcpflow e um programa que captura"$ColorR
          echo -e $Branco"dados transmitidos"$ColorR
          echo -e $Branco"como parte de conexoes TCP (fluxos)"$ColorR
          echo -e $Branco"e armazena os dados"$ColorR
          echo -e $Branco"de uma maneira conveniente"$ColorR
          echo -e $Branco"para analise ou depuracao de protocolo."$ColorR
          echo -e $Branco"Um programa como o “tcpdump” mostra"$ColorR
          echo -e $Branco"um resumo dos pacotes vistos"$ColorR
          echo -e $Branco"no fio, mas geralmente nao armazena"$ColorR
          echo -e $Branco"os dados que estao sendo transmitidos."$ColorR
          echo -e $Branco"Em contraste, o tcpflow reconstroi"$ColorR
          echo -e $Branco"os fluxos de dados reais e armazena"$ColorR
          echo -e $Branco"cada fluxo em um arquivo separado"$ColorR
          echo -e $Branco"para analise posterior."$ColorR
          echo -e $Branco"O tcpflow entende os numeros de"$ColorR
          echo -e $Branco"sequencia e reconstruira corretamente"$ColorR
          echo -e $Branco"os fluxos de dados, independentemente de retransmissoes"$ColorR
          echo -e $Branco"ou entregas fora de ordem."$ColorR
          echo -e $Branco"No entanto, atualmente nao entende fragmentos de IP;"$ColorR
          echo -e $Branco"fluxos contendo fragmentos de IP nao"$ColorR
          echo -e $Branco"serao registrados corretamente."$ColorR
          echo -e $Branco"O tcpflow e baseado na LBL Packet"$ColorR
          echo -e $Branco"Capture Library e, portanto, suporta as"$ColorR
          echo -e $Branco"mesmas expressoes de filtragem ricas que"$ColorR
          echo -e $Branco"programas como 'tcpdump' suportam."$ColorR
          echo -e $Branco"O tcpflow tambem pode reconstruir fluxos de dados"$ColorR
          echo -e $Branco"capturados com “tcpdump -w”."$ColorR
          echo -e $Branco"$ tcpflow."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/simsong/tcpflow"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/tcpflow/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "37" ]; then
          echo -e $Color"Instalando Programa Darkstat."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install darkstat
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "37help" ]; then
          echo -e $BrancoBAD"Sobre Darkstat:"$ColorR
          echo -e $BrancoBAD"E um sniffer de pacotes que e executado como"$ColorR
          echo -e $BrancoBAD"um processo em segundo plano e fornece"$ColorR
          echo -e $BrancoBAD"suas estatisticas a um navegador da web:"$ColorR
          echo -e $Branco"* trafego IP de entrada e saida"$ColorR
          echo -e $Branco"por maquinas, portas e protocolos,"$ColorR
          echo -e $Branco"graficos globais de entrada e saida de ultima hora,"$ColorR
          echo -e $Branco"por hora, diariamente e mensalmente."$ColorR
          echo -e $Branco"E conhecido por ser menor (em termos de espaco de memoria)"$ColorR
          echo -e $Branco"e mais estavel que o ntop."$ColorR
          echo -e $BrancoBAD"Darkstat Homepage: https://unix4lyfe.org/darkstat/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/darkstat/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "38" ]; then
          echo -e $Color"Instalando Programa Driftnet."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install driftnet
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "38help" ]; then
          echo -e $BrancoBAD"Sobre Driftnet:"$ColorR
          echo -e $Branco"Inspirado no EtherPEG, o Driftnet"$ColorR
          echo -e $Branco"e um programa que ouve"$ColorR
          echo -e $Branco"o trafego de rede e seleciona imagens"$ColorR
          echo -e $Branco"de fluxos TCP que observa."$ColorR
          echo -e $Branco"E interessante executa-lo em um host"$ColorR
          echo -e $Branco"que ve muito trafego na web."$ColorR
          echo -e $Branco"(Obviamente, isso e uma invasao"$ColorR
          echo -e $Branco"de privacidade de um tipo bastante flagrante."$ColorR
          echo -e $Branco"Alem disso, se voce possui sensibilidade"$ColorR
          echo -e $Branco"vitoriana e compartilha"$ColorR
          echo -e $Branco"uma rede nao comutada com outras"$ColorR
          echo -e $Branco"pessoas que nao sao, provavelmente"$ColorR
          echo -e $Branco"nao deve usa-la.)"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/deiv/driftnet"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/driftnet/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "39" ]; then
          echo -e $Color"Instalando Programa Dsniff."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dsniff
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "39help" ]; then
          echo -e $BrancoBAD"Sobre Dsniff:"$ColorR
          echo -e $BrancoBAD"Este pacote contem varias ferramentas"$ColorR
          echo -e $BrancoBAD"para ouvir e criar trafego de rede:"$ColorR
          echo -e $Branco"arpspoof - Envie respostas arp nao"$ColorR
          echo -e $Branco"solicitadas (e possivelmente forjadas)."$ColorR
          echo -e $Branco"dnsspoof - forja respostas a consultas arbitrarias"$ColorR
          echo -e $Branco"de endereco / ponteiro DNS na rede local."$ColorR
          echo -e $Branco"dsniff - sniffer de senha para varios protocolos."$ColorR
          echo -e $Branco"filesnarf - salva os arquivos"$ColorR
          echo -e $Branco"selecionados sniffados do trafego NFS."$ColorR
          echo -e $Branco"macof - inunda a rede local"$ColorR
          echo -e $Branco"com enderecos MAC aleatorios."$ColorR
          echo -e $Branco"mailsnarf - fareja e-mails na LAN"$ColorR
          echo -e $Branco"e os armazena no formato mbox."$ColorR
          echo -e $Branco"msgsnarf - grava mensagens"$ColorR
          echo -e $Branco"selecionadas de diferentes"$ColorR
          echo -e $Branco"mensageiros instantaneos."$ColorR
          echo -e $Branco"sshmitm - SSH macaco-no-meio."$ColorR
          echo -e $Branco"proxies e sniffs trafego SSH."$ColorR
          echo -e $Branco"sshow - analisador de trafego SSH."$ColorR
          echo -e $Branco"tcpkill - elimina conexoes TCP"$ColorR
          echo -e $Branco"em andamento especificadas."$ColorR
          echo -e $Branco"tcpnice - diminui a velocidade"$ColorR
          echo -e $Branco"de conexoes TCP especificadas"$ColorR
          echo -e $Branco"por meio de modelagem de trafego “ativa”."$ColorR
          echo -e $Branco"urlsnarf - saida de URLs selecionados"$ColorR
          echo -e $Branco"rastreados do trafego HTTP no CLF."$ColorR
          echo -e $Branco"webmitm - HTTP / HTTPS macaco-in-the-middle."$ColorR
          echo -e $Branco"proxies de forma transparente."$ColorR
          echo -e $Branco"webspy - envia URLs rastreadas"$ColorR
          echo -e $Branco"de um cliente para seu navegador"$ColorR
          echo -e $Branco"local (requer libx11-6 instalado)."$ColorR
          echo -e $Branco"Por favor, nao abuse deste software."$ColorR
          echo -e $BrancoBAD"Dsniff Homepage: https://www.monkey.org/~dugsong/dsniff/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dsniff/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "40" ]; then
          echo -e $Color"Instalando Programa Ettercap."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ettercap-common
          apt-get -y install ettercap-graphical
          apt-get -y install ettercap-text-only
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "40help" ]; then
          echo -e $BrancoBAD"Sobre Ettercap:"$ColorR
          echo -e $Branco"O Ettercap suporta disseccao ativa e passiva"$ColorR
          echo -e $Branco"de muitos protocolos (mesmo os criptografados)"$ColorR
          echo -e $Branco"e inclui muitos recursos para analise de rede e host."$ColorR
          echo -e $Branco"A injecao de dados em uma conexao estabelecida"$ColorR
          echo -e $Branco"e a filtragem (substituir ou descartar um pacote) em tempo"$ColorR
          echo -e $Branco"real tambem e possivel, mantendo a conexao sincronizada."$ColorR
          echo -e $Branco"Muitos modos de sniffing sao implementados, para um conjunto"$ColorR
          echo -e $Branco"de sniffing poderoso e completo."$ColorR
          echo -e $BrancoBAD"E possivel detectar em quatro modos:"$ColorR
          echo -e $Branco"Baseado em IP, Baseado em MAC, Baseado em ARP (full-duplex)"$ColorR
          echo -e $Branco"e Baseado em PublicARP (half-duplex)."$ColorR
          echo -e $Branco"O Ettercap tambem tem a capacidade de detectar uma LAN"$ColorR
          echo -e $Branco"comutada e usar as impressoes digitais do SO (ativa ou passiva)"$ColorR
          echo -e $Branco"para encontrar a geometria da LAN."$ColorR
          echo -e $Branco"$ ettercap."$ColorR
          echo -e $Branco"$ etterlog."$ColorR
          echo -e $Branco"$ etterfilter."$ColorR
          echo -e $BrancoBAD"Ettercap Homepage: https://ettercap.github.io/ettercap/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ettercap/#ettercap"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "41" ]; then
          echo -e $Color"Instalando Programa Sslsniff."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sslsniff
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "41help" ]; then
          echo -e $BrancoBAD"Sobre Sslsniff:"$ColorR
          echo -e $Branco"O sslsniff foi projetado para criar"$ColorR
          echo -e $Branco"ataques man-in-the-middle (MITM)"$ColorR
          echo -e $Branco"para conexoes SSL/TLS e gera certificados dinamicamente"$ColorR
          echo -e $Branco"para os dominios que estao sendo acessados ​​em tempo real."$ColorR
          echo -e $Branco"Os novos certificados sao construidos em uma cadeia"$ColorR
          echo -e $Branco"de certificados assinada por qualquer certificado fornecido."$ColorR
          echo -e $Branco"O sslsniff tambem oferece suporte a outros ataques,"$ColorR
          echo -e $Branco"como ataques de prefixo nulo ou OCSP,"$ColorR
          echo -e $Branco"para obter interceptacoes silenciosas"$ColorR
          echo -e $Branco"de conexoes quando possivel."$ColorR
          echo -e $BrancoBAD"Sslsniff Homepage: https://moxie.org/software/sslsniff/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sslsniff/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "42" ]; then
          echo -e $Color"Instalando Programa Tcpreplay."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install tcpreplay
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "42help" ]; then
          echo -e $BrancoBAD"Sobre Tcpreplay:"$ColorR
          echo -e $Branco"O Tcpreplay tem como objetivo testar o desempenho"$ColorR
          echo -e $Branco"de um NIDS reproduzindo o trafego de rede em segundo"$ColorR
          echo -e $Branco"plano real para ocultar os ataques."$ColorR
          echo -e $Branco"Tcpreplay permite controlar a velocidade"$ColorR
          echo -e $Branco"na qual o trafego e reproduzido e pode reproduzir"$ColorR
          echo -e $Branco"rastreamentos tcpdump arbitrarios."$ColorR
          echo -e $Branco"Ao contrario do trafego artificial gerado programaticamente"$ColorR
          echo -e $Branco"que nao exerce a inspecao de aplicativo/protocolo"$ColorR
          echo -e $Branco"que um NIDS executa e nao reproduz as anomalias"$ColorR
          echo -e $Branco"do mundo real que aparecem nas redes de producao"$ColorR
          echo -e $Branco"(rotas assimetricas, rajadas/interrupcoes de trafego,"$ColorR
          echo -e $Branco"fragmentacao, retransmissoes, etc.), o tcpreplay permite"$ColorR
          echo -e $Branco"a replicacao exata do trafego real visto em redes reais."$ColorR
          echo -e $Branco"Ele incluiu os seguintes executaveis ​​tcpprep,"$ColorR
          echo -e $Branco"tcprewrite, tcpreplay-edit, tcpbridge e capturas baseadas"$ColorR
          echo -e $Branco"em pcap sao possiveis."$ColorR
          echo -e $Branco"$ tcpreplay."$ColorR
          echo -e $Branco"$ tcpbridge."$ColorR
          echo -e $Branco"$ tcpcapinfo."$ColorR
          echo -e $Branco"$ tcpliveplay."$ColorR
          echo -e $Branco"$ tcpprep."$ColorR
          echo -e $Branco"$ tcpreplay-edit."$ColorR
          echo -e $Branco"$ tcprewrite."$ColorR
          echo -e $BrancoBAD"Tcpreplay Homepage: http://tcpreplay.appneta.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/tcpreplay/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas05

     elif [ "$D" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$D" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$D" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$D" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$D" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$D" = "P13" ]; then
          Programas13

     elif [ "$D" = "P12" ]; then
          Programas12

     elif [ "$D" = "P11" ]; then
          Programas11

     elif [ "$D" = "P10" ]; then
          Programas10

     elif [ "$D" = "P09" ]; then
          Programas09

     elif [ "$D" = "P08" ]; then
          Programas08

     elif [ "$D" = "P07" ]; then
          Programas07

     elif [ "$D" = "P06" ]; then
          Programas06

     elif [ "$D" = "P05" ]; then
          Programas05

     elif [ "$D" = "P04" ]; then
          Programas04

     elif [ "$D" = "P03" ]; then
          Programas03

     elif [ "$D" = "P02" ]; then
          Programas02

     elif [ "$D" = "P01" ]; then
          Programas01

     elif [ "$D" = "Programas01" ]; then
          Programas01

     elif [ "$D" = "Programas02" ]; then
          Programas02

     elif [ "$D" = "Programas03" ]; then
          Programas03

     elif [ "$D" = "Programas04" ]; then
          Programas04

     elif [ "$D" = "Programas05" ]; then
          Programas05

     elif [ "$D" = "Programas06" ]; then
          Programas06

     elif [ "$D" = "Programas07" ]; then
          Programas07

     elif [ "$D" = "Programas08" ]; then
          Programas08

     elif [ "$D" = "Programas09" ]; then
          Programas09

     elif [ "$D" = "Programas10" ]; then
          Programas10

     elif [ "$D" = "Programas11" ]; then
          Programas11

     elif [ "$D" = "Programas12" ]; then
          Programas12

     elif [ "$D" = "Programas13" ]; then
          Programas13

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Programas05
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Programas05
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Programas05
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Programas05
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Programas05
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Programas05
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas05
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas05
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas05
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas05
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas05
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas05
fi
}
Morningstar(){
echo -e $Branco'
*********************************
|M||O||R||N||I||N||G||S||T||A||R|
*********************************
'$ColorR
}
Programas04B(){
echo -e $Color"\n\nAplicativos da web"$ColorR
echo -e $Color"
01) Apache-Users                35) Websploit
1help Sobre Apache-Users        35help Sobre Websploit
02) BBQSQL                      36) Wfuzz
2help Sobre BBQSQL              36help Sobre Wfuzz
03) Arachni                     37) Wpscan
3help Sobre Arachni             37help Sobre Wpscan
04) BlindElephant               38) Lynx
4help Sobre BlindElephant       38help Sobre Lynx
05) BurpSuite                   39) Xsser
5help Sobre BurpSuite           39help Sobre Xsser
06) Commix                      40) Zaproxy
6help Sobre Commix              40help Sobre Zaproxy
07) Cutycapt                    41) Beef-Xss
7help Sobre Cutycapt            41help Sobre Beef-Xss
08) Davtest                     42) Cadaver
8help Sobre Davtest             42help Sobre Cadaver
09) Finalrecon                  43) EyeWitness
9help Sobre Finalrecon          43help Sobre EyeWitness
10) Dirb                        44) Ftester
10help Sobre Dirb               44help Sobre Ftester
11) Dirbuster                   45) Hakrawler
11help Sobre Dirbuster          45help Sobre Hakrawler
12) BlackWidow                  46) Hamster-Sidejack
12help Sobre BlackWidow         46help Sobre Hamster-Si
13) Whatweb                     47) Heartleech
13help Sobre Whatweb            47help Sobre Heartleech
14) Webacoo                     48) Httprint
14help Sobre Webacoo            48help Sobre Httprint
15) Jboss-Autopwn               49) Httrack
15help Sobre Jboss-Autopwn      49help Sobre Httrack
16) Joomscan                    50) ProxyTrack
16help Sobre Joomscan           50help Sobre ProxyTrack
17) jSQL                        51) WebHTTrack
17help Sobre jSQL               51help Sobre WebHTTrack
18) Maltego-Teeth               52) Hydra
18help Sobre Maltego-Teeth      52help Sobre Hydra
19) Padbuster                   53) Hydra-gtk
19help Sobre Padbuster          53help Sobre Hydra-gtk
20) Paros                       54) Laudanum
20help Sobre Paros              54help Sobre Laudanum
21) Parsero                     55) Medusa
21help Sobre Parsero            55help Sobre Medusa
22) Plecost                     56) Mitmproxy
22help Sobre Plecos             56help Sobre Mitmproxy
23) Ffuf                        57) Ncrack
23help Sobre Ffuf               57help Sobre Ncrack
24) Wireshark                   58) Nikto
24help Sobre Wireshark          58help Sobre Nikto
25) Recon-Ng                    59) Nishang
25help Sobre Recon-Ng           59help Sobre Nishang
26) Skipfish                    60) Owasp-Mantra-Ff
26help Sobre Skipfish           60help Sobre Owasp-Mantra
27) Sqlmap                      61) Qsslcaudit
27help Sobre Sqlmap             61help Sobre Qsslcaudit
28) Sqlninja                    62) Sidguesser
28help Sobre Sqlninja           62help Sobre Sidguesser
29) Sqlsus                      63) Siege
29help Sobre Sqlsus             63help Sobre Siege
30) Weevely                     64) Redsocks
30help Sobre Weevely            64help Sobre Redsocks
31) Uniscan                     65) Apache2
31help Sobre Uniscan            65help Sobre Apache2
32) Watobo                      66) SlowHTTPTest
32help Sobre Watobo             66help Sobre SlowHTTPTest
33) WebScarab                   67) Proxytunnel
33help Sobre WebScarab          67help Sobre Proxytunnel
34) Wapiti                      68) Tnscmd10g
34help Sobre Wapiti             68help Sobre Tnscmd10g

"$ColorR

echo -e "\n"
echo -e $Verde"Install all Web Applications tools"$ColorR
echo -e $Verde"(x) (Instalar Todas as ferramentas)"$ColorR
echo -e "\n\n"
}
PrompTProgramas04(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" C
}
All_Tools_04(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install apache-users
apt-get -y install burpsuite
apt-get -y install commix
apt-get -y install jsql
apt-get -y install cutycapt
apt-get -y install parsero
apt-get -y install davtest
apt-get -y install tnscmd10g
apt-get -y install apache2
apt-get -y install apache2-bin
apt-get -y install apache2-data
apt-get -y install apache2-dev
apt-get -y install apache2-doc
apt-get -y install apache2-ssl-dev
apt-get -y install apache2-suexec-custom
apt-get -y install apache2-suexec-pristine
apt-get -y install apache2-utils
apt-get -y install libapache2-mod-md
apt-get -y install libapache2-mod-proxy-uwsgi
apt-get -y install slowhttptest
apt-get -y install proxytunnel
apt-get -y install sqlmap
apt-get -y install xsser
apt-get -y install siege
apt-get -y install websploit
apt-get -y install webscarab
apt-get -y install hydra
apt-get -y install hydra-gtk
apt-get -y install finalrecon
apt-get -y install sidguesser
apt-get -y install laudanum
apt-get -y install redsocks
apt-get -y install zaproxy
apt-get -y install beef-xss
apt-get -y install cadaver
apt-get -y install medusa
apt-get -y install wpscan
apt-get -y install qsslcaudit
apt-get -y install httprint
apt-get -y install ncrack
apt-get -y install nikto
apt-get -y install owasp-mantra-ff
apt-get -y install nishang
apt-get -y install eyewitness
apt-get -y install hamster-sidejack
apt-get -y install webhttrack
apt-get -y install libhttrack-dev
apt-get -y install libhttrack2
apt-get -y install webhttrack-common
apt-get -y install mitmproxy
apt-get -y install proxytrack
apt-get -y install ftester
apt-get -y install watobo
apt-get -y install hakrawler
apt-get -y install uniscan
apt-get -y install weevely
apt-get -y install skipfish
apt-get -y install heartleech
apt-get -y install lynx
apt-get -y install sqlsus
apt-get -y install wapiti
apt-get -y install webacoo
apt-get -y install sqlninja
apt-get -y install dirbuster
apt-get -y install recon-ng
apt-get -y install maltego-teeth
apt-get -y install wfuzz
apt-get -y install ffuf
apt-get -y install paros
apt-get -y install httrack
apt-get -y install padbuster
apt-get -y install wireshark
apt-get -y install joomscan
apt-get -y install jboss-autopwn
apt-get -y install plecost
apt-get -y install whatweb
apt-get -y install dirb
apt-get -y install sudo
apt-get -y install git
cd ~/
apt-get -y install git python-pip python\
sudo apt-get -y install libpq-dev python-dev libxml2-dev python3-dev\
libxslt1-dev libldap2-dev build-essential\
libsasl2-dev libffi-dev
git clone https://github.com/CiscoCXSecurity/bbqsql.git
cd bbqsql
python2 setup.py install
cd ~/
rm -rf bbqsql
apt-get -y install curl git git-core gem ant g++ build-essential\
openssl libreadline6-dev zlib1g zlib1g-dev libssl-dev libyaml-dev\
libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf\
libc6-dev ncurses-dev automake libtool bison libxml2-dev\
libxslt1-dev libcurl4-openssl-dev libsqlite3-dev
apt-get -y install ruby ruby-dev
git clone https://github.com/Arachni/arachni.git
cd arachni
gem install bundler
gem install chromedriver-installer
gem install redcarpet -v '3.5.1'
bundle install --without prof
rake install
cd ~/
rm -rf arachni
git clone https://github.com/lokifer/BlindElephant.git
cd BlindElephant && cd src
python2 setup.py install
cd ~/
rm -rf BlindElephant
echo $Color"[*] BlindElephant.py para Chamar BlindElephant."$ColorR
git clone https://github.com/1N3/BlackWidow.git
cd BlackWidow
sudo bash install.sh
cd ~/
rm -rf BlackWidow
}
Programas04(){
Programas04B
PrompTProgramas04
if [ "$C" = "01" ]; then
   C="1"
fi
if [ "$C" = "02" ]; then
   C="2"
fi
if [ "$C" = "03" ]; then
   C="3"
fi
if [ "$C" = "04" ]; then
   C="4"
fi
if [ "$C" = "05" ]; then
   C="5"
fi
if [ "$C" = "06" ]; then
   C="6"
fi
if [ "$C" = "07" ]; then
   C="7"
fi
if [ "$C" = "08" ]; then
   C="8"
fi
if [ "$C" = "09" ]; then
   C="9"
fi
while [ "$C" ];
do
  if [ "$C" ]; then
     if [ "$C" = "1" ]; then
        echo -e $Color"Instalando Programa Apache-Users."$Color
        apt-get -y update 1> /dev/null 2> /dev/null
        apt-get -y install apache-users
        sleep 1
        echo -e $Color"Processo Finalizado."$ColorR
        sleep 1
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        PrompTProgramas04

     elif [ "$C" = "1help" ]; then
          echo -e $BrancoBAD"Sobre Apache-Users:"$ColorR
          echo -e $Branco"Este script Perl enumerara os nomes de usuario"$ColorR
          echo -e $Branco"em qualquer sistema que"$ColorR
          echo -e $Branco"use Apache com o modulo UserDir."$ColorR
          echo -e $BrancoBAD"Apache-Users Homepage: https://labs.portcullis.co.uk/downloads/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/apache-users/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_04
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_04
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "2" ]; then
          echo -e $Color"Instalando Programa BBQSQL."$Color
          cd ~/
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install git python-pip python
          sudo apt-get -y install libpq-dev python-dev libxml2-dev python3-dev\
          libxslt1-dev libldap2-dev build-essential\
          libsasl2-dev libffi-dev
          git clone https://github.com/CiscoCXSecurity/bbqsql.git
          cd bbqsql
          python2 setup.py install
          cd ~/
          rm -rf bbqsql
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "2help" ]; then
          echo -e $BrancoBAD"Sobre BBQSQL:"$ColorR
          echo -e $Branco"Injecao de SQL cego pode ser dificil de explorar."$ColorR
          echo -e $Branco"Quando as ferramentas disponiveis funcionam, elas"$ColorR
          echo -e $Branco"funcionam bem, mas quando nao funcionam, voce precisa"$ColorR
          echo -e $Branco"escrever algo personalizado."$ColorR
          echo -e $Branco"Isso e demorado e tedioso."$ColorR
          echo -e $Branco"O BBQSQL pode ajuda-lo a resolver esses problemas."$ColorR
          echo -e $Branco"BBQSQL e uma estrutura de injecao SQL cega escrita em Python."$ColorR
          echo -e $Branco"E extremamente util ao atacar vulnerabilidades complicadas"$ColorR
          echo -e $Branco"de injecao de SQL."$ColorR
          echo -e $Branco"O BBQSQL tambem e uma ferramenta semiautomatica, permitindo"$ColorR
          echo -e $Branco"um pouco de personalizacao para aqueles dificeis"$ColorR
          echo -e $Branco"de acionar descobertas de injecao de SQL."$ColorR
          echo -e $Branco"A ferramenta e construida para ser independente"$ColorR
          echo -e $Branco"de banco de dados e, e extremamente versatil."$ColorR
          echo -e $Branco"Ele tambem possui uma interface do usuario intuitiva para"$ColorR
          echo -e $Branco"facilitar muito a configuracao de ataques."$ColorR
          echo -e $Branco"Python gevent tambem e implementado, tornando"$ColorR
          echo -e $Branco"o BBQSQL extremamente rapido."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/CiscoCXSecurity/bbqsql"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "3" ]; then
          echo -e $Color"Instalando Programa Arachni."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install curl git git-core gem ant g++ build-essential\
          openssl libreadline6-dev zlib1g zlib1g-dev libssl-dev libyaml-dev\
          libsqlite3-0 libsqlite3-dev sqlite3 libxml2-dev libxslt-dev autoconf\
          libc6-dev ncurses-dev automake libtool bison libxml2-dev\
          libxslt1-dev libcurl4-openssl-dev libsqlite3-dev
          apt-get -y install ruby ruby-dev
          cd ~/
          git clone https://github.com/Arachni/arachni.git
          cd arachni
          gem install bundler
          gem install chromedriver-installer
          gem install redcarpet -v '3.5.1'
          bundle install --without prof
          rake install
          cd ~/
          rm -rf arachni
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "3help" ]; then
          echo -e $BrancoBAD"Sobre Arachni:"$ColorR
          echo -e $Branco"Arachni e uma estrutura Ruby de alto desempenho,"$ColorR
          echo -e $Branco"modular e cheia de recursos, destinada a ajudar testadores"$ColorR
          echo -e $Branco"de penetracao e administradores a avaliar a seguranca"$ColorR
          echo -e $Branco"de aplicativos web modernos."$ColorR
          echo -e $Branco"E gratuito, com cldigo fonte publico e disponivel"$ColorR
          echo -e $Branco"para revisao."$ColorR
          echo -e $Branco"E multiplataforma, suportando todos os principais sistemas"$ColorR
          echo -e $Branco"operacionais (MS Windows, Mac OS X e Linux) e distribuido por meio"$ColorR
          echo -e $Branco"de pacotes portateis que permitem implantacao instantanea."$ColorR
          echo -e $Branco"E versatil o suficiente para cobrir uma grande quantidade"$ColorR
          echo -e $Branco"de casos de uso, desde um simples utilitario"$ColorR
          echo -e $Branco"de scanner de linha de comando, ate uma grade global"$ColorR
          echo -e $Branco"de scanners de alto desempenho, uma biblioteca Ruby"$ColorR
          echo -e $Branco"que permite auditorias com script, ate uma colaboracao"$ColorR
          echo -e $Branco"na web multi-usuario multi-scan  plataforma."$ColorR
          echo -e $Branco"Alem disso, sua API REST simples torna"$ColorR
          echo -e $Branco"a integracao muito facil."$ColorR
          echo -e $Branco"Finalmente, devido ao seu ambiente de"$ColorR
          echo -e $Branco"navegador integrado, ele pode suportar aplicacoes"$ColorR
          echo -e $Branco"web altamente complicadas que fazem uso pesado"$ColorR
          echo -e $Branco"de tecnologias como JavaScript, HTML5, manipulacao"$ColorR
          echo -e $Branco"de DOM e AJAX."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/Arachni"$ColorR
          echo -e $BrancoBAD"Homepage: https://www.arachni-scanner.com/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "4" ]; then
          echo -e $Color"Instalando Programa BlindElephant."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install git python
          cd ~/
          git clone https://github.com/lokifer/BlindElephant.git
          cd BlindElephant && cd src
          python2 setup.py install
          cd ~/
          rm -rf BlindElephant
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "4help" ]; then
          echo -e $BrancoBAD"Sobre BlindElephant:"$ColorR
          echo -e $Branco"O BlindElephant Web Application Fingerprinter tenta"$ColorR
          echo -e $Branco"descobrir a versao de um aplicativo web (conhecido)"$ColorR
          echo -e $Branco"comparando arquivos estaticos em locais conhecidos"$ColorR
          echo -e $Branco"com hashes pre-computados para versoes desses arquivos"$ColorR
          echo -e $Branco"em todas as versoes disponiveis."$ColorR
          echo -e $Branco"A tecnica e rapida, de baixa largura de banda, nao"$ColorR
          echo -e $Branco"minvasiva, generica e altamente automatizavel."$ColorR
          echo -e $Branco"$ BlindElephant.py ."$ColorR
          echo -e $BrancoBAD"Homepage: https://sourceforge.net/projects/blindelephant/"$ColorR
          echo -e $BrancoBAD"Homepage: http://www.qualys.com/blindelephant"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/lokifer/BlindElephant"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "5" ]; then
          echo -e $Color"Instalando Programa BurpSuite."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install burpsuite
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "5help" ]; then
          echo -e $BrancoBAD"Sobre BurpSuite:"$ColorR
          echo -e $Branco"Burp Suite e uma plataforma integrada"$ColorR
          echo -e $Branco"para realizar testes de seguranca de aplicacoes web."$ColorR
          echo -e $Branco"Suas varias ferramentas funcionam perfeitamente juntas"$ColorR
          echo -e $Branco"para dar suporte a todo o processo de teste,"$ColorR
          echo -e $Branco"desde o mapeamento inicial e a analise da superficie"$ColorR
          echo -e $Branco"de ataque de um aplicativo ate a descoberta"$ColorR
          echo -e $Branco"e exploracao de vulnerabilidades de seguranca."$ColorR
          echo -e $Branco"O Burp oferece controle total, permitindo combinar"$ColorR
          echo -e $Branco"tecnicas manuais avancadas com automacao"$ColorR
          echo -e $Branco"de ultima geracao, para tornar seu trabalho"$ColorR
          echo -e $Branco"mais rapido, eficaz e divertido."$ColorR
          echo -e $Branco"$ burpsuite."$ColorR
          echo -e $BrancoBAD"Burpsuite Homepage: https://portswigger.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/burpsuite/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "6" ]; then
          echo -e $Color"Instalando Programa Commix."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install commix
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "6help" ]; then
          echo -e $BrancoBAD"Sobre Commix:"$ColorR
          echo -e $Branco"Este pacote contem o Commix (abreviacao de [comm]"$ColorR
          echo -e $Branco"e [i]njection e[x]ploiter)."$ColorR
          echo -e $Branco"Possui um ambiente simples e pode"$ColorR
          echo -e $Branco"ser utilizado, desde desenvolvedores web, testadores"$ColorR
          echo -e $Branco"de penetracao ou ate mesmo pesquisadores"$ColorR
          echo -e $Branco"de seguranca para testar aplicacoes web com o objetivo"$ColorR
          echo -e $Branco"de encontrar bugs, erros ou vulnerabilidades relacionados"$ColorR
          echo -e $Branco"a ataques de injecao de comandos."$ColorR
          echo -e $Branco"Ao usar esta ferramenta, e muito facil encontrar"$ColorR
          echo -e $Branco"e explorar uma vulnerabilidade de injecao de comando"$ColorR
          echo -e $Branco"em um determinado parametro ou string vulneravel."$ColorR
          echo -e $Branco"Commix e escrito em linguagem de programacao Python."$ColorR
          echo -e $Branco"$ commix."$ColorR
          echo -e $BrancoBAD"Commix Homepage: https://commixproject.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/commix/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "7" ]; then
          echo -e $Color"Instalando Programa Cutycapt."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cutycapt
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

    elif [ "$C" = "7help" ]; then
         echo -e $BrancoBAD"Sobre Cutycapt:"$ColorR
         echo -e $Branco"CutyCapt e um pequeno utilitario de"$ColorR
         echo -e $Branco"linha de comando multiplataforma para capturar a"$ColorR
         echo -e $Branco"renderizacao do WebKit de uma pagina da Web"$ColorR
         echo -e $Branco"em uma variedade de formatos vetoriais"$ColorR
         echo -e $Branco"e de bitmap, incluindo SVG, PDF, PS, PNG,"$ColorR
         echo -e $Branco"JPEG, TIFF, GIF e BMP."$ColorR
         echo -e $Branco"$ cutycapt."$ColorR
         echo -e $BrancoBAD"Cutycapt Homepage: http://cutycapt.sourceforge.net/"$ColorR
         echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cutycapt/"$ColorR
         echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
         sleep 1
         PrompTProgramas04

     elif [ "$C" = "8" ]; then
          echo -e $Color"Instalando Programa Davtest."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install davtest
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "8help" ]; then
          echo -e $BrancoBAD"Sobre Davtest:"$ColorR
          echo -e $Branco"O DAVTest testa servidores habilitados para WebDAV"$ColorR
          echo -e $Branco"fazendo upload de arquivos executsveis"$ColorR
          echo -e $Branco"​​de teste e, em seguida, (opcionalmente) fazendo"$ColorR
          echo -e $Branco"upload de arquivos que permitem a execucao"$ColorR
          echo -e $Branco"de comandos ou outras acoes diretamente no destino."$ColorR
          echo -e $Branco"Destina-se a testadores de penetracao para determinar"$ColorR
          echo -e $Branco"rapida e facilmente se os servicos DAV habilitados"$ColorR
          echo -e $Branco"sao exploraveis."$ColorR
          echo -e $BrancoBAD"Davtest Homepage: https://code.google.com/p/davtest/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/davtest/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "9" ]; then
          echo -e $Color"Instalando Programa Finalrecon."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install finalrecon
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "9help" ]; then
          echo -e $BrancoBAD"Sobre Finalrecon:"$ColorR
          echo -e $Branco"Um script python rapido e simples para reconhecimento"$ColorR
          echo -e $Branco"web que segue uma estrutura modular e fornece"$ColorR
          echo -e $Branco"informacoes detalhadas sobre diversas areas."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/thewhiteh4t/FinalRecon"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/finalrecon/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "10" ]; then
          echo -e $Color"Instalando Programa Dirb."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dirb
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "10help" ]; then
          echo -e $BrancoBAD"Sobre Dirb:"$ColorR
          echo -e $Branco"DIRB e um scanner de conteudo da Web."$ColorR
          echo -e $Branco"Ele procura por objetos da Web existentes (e/ou ocultos)."$ColorR
          echo -e $Branco"Ele basicamente funciona lancando um ataque baseado"$ColorR
          echo -e $Branco"em dicionario contra um servidor web e analisando as respostas."$ColorR
          echo -e $Branco"O DIRB vem com um conjunto de listas de palavras"$ColorR
          echo -e $Branco"de ataque pre-configuradas para facilitar o uso, mas voce"$ColorR
          echo -e $Branco"pode usar suas listas de palavras personalizadas."$ColorR
          echo -e $Branco"Alem disso, o DIRB as vezes pode ser usado"$ColorR
          echo -e $Branco"como um scanner CGI classico, mas lembre-se"$ColorR
          echo -e $Branco"de que e um scanner de conteudo, nao um"$ColorR
          echo -e $Branco"scanner de vulnerabilidade."$ColorR
          echo -e $Branco"O principal objetivo do DIRB e ajudar"$ColorR
          echo -e $Branco"na auditoria profissional de aplicacoes web."$ColorR
          echo -e $Branco"Especialmente em testes relacionados a seguranca."$ColorR
          echo -e $Branco"Ele cobre alguns buracos nao cobertos"$ColorR
          echo -e $Branco"pelos scanners classicos de vulnerabilidades da web."$ColorR
          echo -e $Branco"O DIRB procura objetos da Web especificos que outros"$ColorR
          echo -e $Branco"scanners CGI genericos nao podem procurar."$ColorR
          echo -e $Branco"Nao procura vulnerabilidades nem procura conteudos"$ColorR
          echo -e $Branco"web que possam ser vulneraveis."$ColorR
          echo -e $BrancoBAD"Dirb Homepage: http://dirb.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dirb/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "11" ]; then
          echo -e $Color"Instalando Programa DirBuster."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dirbuster
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "11help" ]; then
          echo -e $BrancoBAD"Sobre Dirbuster:"$ColorR
          echo -e $Branco"DirBuster e um aplicativo java multi-thread projetado"$ColorR
          echo -e $Branco"para diretorios de forca bruta e nomes de arquivos"$ColorR
          echo -e $Branco"em servidores web/aplicativos."$ColorR
          echo -e $Branco"Muitas vezes e o caso agora do que parece ser"$ColorR
          echo -e $Branco"um servidor web em um estado de instalacao padrao, na verdade"$ColorR
          echo -e $Branco"nao e, e tem paginas e aplicativos ocultos."$ColorR
          echo -e $Branco"DirBuster tenta encontra-los."$ColorR
          echo -e $Branco"No entanto, ferramentas dessa natureza"$ColorR
          echo -e $Branco"geralmente sao tao boas quanto o diretorio e"$ColorR
          echo -e $Branco"a lista de arquivos que acompanham."$ColorR
          echo -e $Branco"Uma abordagem diferente foi adotada para gerar isso."$ColorR
          echo -e $Branco"A lista foi gerada do zero, rastreando a Internet"$ColorR
          echo -e $Branco"e coletando o diretorio e os arquivos que realmente"$ColorR
          echo -e $Branco"sao usados ​​pelos desenvolvedores!  O DirBuster vem"$ColorR
          echo -e $Branco"com um total de 9 listas diferentes, o que"$ColorR
          echo -e $Branco"torna o DirBuster extremamente eficaz em encontrar"$ColorR
          echo -e $Branco"esses arquivos e diretorios ocultos."$ColorR
          echo -e $Branco"E se isso nao bastasse, o DirBuster tambem"$ColorR
          echo -e $Branco"tem a opcao de executar uma forca bruta pura, que deixa"$ColorR
          echo -e $Branco"os diretorios e arquivos ocultos"$ColorR
          echo -e $Branco"em nenhum lugar para se esconder."$ColorR
          echo -e $BrancoBAD"Dirbuster Homepage:"\
                            "https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dirbuster/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "12" ]; then
          echo -e $Color"Instalando Programa BlackWidow."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sudo
          apt-get -y install git
          cd ~/
          git clone https://github.com/1N3/BlackWidow.git
          cd BlackWidow
          sudo bash install.sh
          cd ~/
          rm -rf BlackWidow
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "12help" ]; then
          echo -e $BrancoBAD"Sobre BlackWidow:"$ColorR
          echo -e $Branco"BlackWidow e um spider de aplicativo web baseado"$ColorR
          echo -e $Branco"em python para reunir subdominios, URLs, parametros"$ColorR
          echo -e $Branco"dinamicos, enderecos de e-mail e numeros de telefone"$ColorR
          echo -e $Branco"de um site de destino."$ColorR
          echo -e $Branco"Este projeto tambem inclui o fuzzer Inject-X"$ColorR
          echo -e $Branco"para verificar URLs dinamicas em busca de vulnerabilidades"$ColorR
          echo -e $Branco"comuns do OWASP."$ColorR
          echo -e $BrancoBAD"RECURSOS:"$ColorR
          echo -e $Branco"* Colete automaticamente todos os URLs de um site"$ColorR
          echo -e $Branco"de destino."$ColorR
          echo -e $Branco"* Colete automaticamente todos os URLs"$ColorR
          echo -e $Branco"e parametros dinamicos de um site de destino."$ColorR
          echo -e $Branco"* Colete automaticamente todos os subdominios"$ColorR
          echo -e $Branco"de um site de destino."$ColorR
          echo -e $Branco"* Colete automaticamente todos os numeros"$ColorR
          echo -e $Branco"de telefone de um site de destino."$ColorR
          echo -e $Branco"* Colete automaticamente todos os enderecos de e-mail"$ColorR
          echo -e $Branco"de um site de destino."$ColorR
          echo -e $Branco"* Colete automaticamente todos os URLs"$ColorR
          echo -e $Branco"de formulario de um site de destino."$ColorR
          echo -e $Branco"* Verificacao/fuzz automaticamente para vulnerabilidades"$ColorR
          echo -e $Branco"comuns do OWASP TOP."$ColorR
          echo -e $Branco"* Salva automaticamente todos os dados em arquivos de texto"$ColorR
          echo -e $Branco"classificados."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/1N3/BlackWidow"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "13" ]; then
          echo -e $Color"Instalando Programa Whatweb."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install whatweb
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "13help" ]; then
          echo -e $BrancoBAD"Sobre Whatweb:"$ColorR
          echo -e $Branco"WhatWeb identifica sites."$ColorR
          echo -e $Branco"Ele reconhece tecnologias da Web, incluindo"$ColorR
          echo -e $Branco"sistemas de gerenciamento de conteudo (CMS), plataformas de blogs,"$ColorR
          echo -e $Branco"pacotes estatisticos/analiticos, bibliotecas JavaScript, servidores"$ColorR
          echo -e $Branco"da Web e dispositivos incorporados."$ColorR
          echo -e $Branco"WhatWeb tem mais de 900 plugins, cada um"$ColorR
          echo -e $Branco"para reconhecer algo diferente."$ColorR
          echo -e $Branco"Ele tambem identifica numeros de versao, enderecos"$ColorR
          echo -e $Branco"de e-mail, IDs de conta, modulos de estrutura"$ColorR
          echo -e $Branco"da Web, erros de SQL e muito mais."$ColorR
          echo -e $BrancoBAD"Whatweb Homepage: https://www.morningstarsecurity.com/research/whatweb"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/whatweb/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "14" ]; then
          echo -e $Color"Instalando Programa Webacoo."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install webacoo
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "14help" ]; then
          echo -e $BrancoBAD"Sobre Webacoo:"$ColorR
          echo -e $BrancoBAD"Web Backdoor Cookie Script-Kit."$ColorR
          echo -e $Branco"Kit de script de cookies de backdoor da Web"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/anestisb/WeBaCoo"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/webacoo/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "15" ]; then
          echo -e $Color"Instalando Programa Jboss-Autopwn."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install jboss-autopwn
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "15help" ]; then
          echo -e $BrancoBAD"Sobre Jboss-Autopwn:"$ColorR
          echo -e $Branco"Este script JBoss implanta um shell JSP"$ColorR
          echo -e $Branco"no servidor JBoss AS de destino."$ColorR
          echo -e $Branco"Uma vez implantado, o script usa seu recurso"$ColorR
          echo -e $Branco"de carregamento e execucao de comando para fornecer"$ColorR
          echo -e $Branco"uma sessao interativa."$ColorR
          echo -e $BrancoBAD"Os recursos incluem:"$ColorR
          echo -e $Branco"* Suporte multiplataforma."$ColorR
          echo -e $Branco"* testado em destinos Windows, Linux e Mac."$ColorR
          echo -e $Branco"* Suporte para shells de ligacao e ligacao reversa."$ColorR
          echo -e $Branco"* Shells de medidor e suporte VNC"$ColorR
          echo -e $Branco"para destinos Windows."$ColorR
          echo -e $Branco"$ jboss-linux."$ColorR
          echo -e $Branco"$ jboss-win."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/SpiderLabs/jboss-autopwn"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/jboss-autopwn/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "16" ]; then
          echo -e $Color"Instalando Programa Joomscan."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install joomscan
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "16help" ]; then
          echo -e $BrancoBAD"Sobre Joomscan:"$ColorR
          echo -e $Branco"Este pacote contem JoomScan, abreviacao"$ColorR
          echo -e $Branco"de [Joom]la Vulnerability [Scan]ner."$ColorR
          echo -e $Branco"E um projeto em linguagem de programacao"$ColorR
          echo -e $Branco"perl para detectar vulnerabilidades"$ColorR
          echo -e $Branco"do Joomla CMS e analisa-las."$ColorR
          echo -e $BrancoBAD"Joomscan Homepage:"\
                            "https://www.owasp.org/index.php/Category:OWASP_Joomla_Vulnerability_Scanner_Project"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/joomscan/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "17" ]; then
          echo -e $Color"Instalando Programa Jsql."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install jsql-injection
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "17help" ]; then
          echo -e $BrancoBAD"Sobre jSQL:"$ColorR
          echo -e $Branco"jSQL Injection e um aplicativo leve usado"$ColorR
          echo -e $Branco"para encontrar informacoes de banco de dados"$ColorR
          echo -e $Branco"de um servidor distante."$ColorR
          echo -e $Branco"jSQL e gratuito, de codigo aberto"$ColorR
          echo -e $Branco"e multiplataforma (Windows, Linux, Mac OS X, Solaris)."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/ron190/jsql-injection"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/jsql/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "18" ]; then
          echo -e $Color"Instalando Programa Maltego-Teeth."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install maltego-teeth
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "18help" ]; then
          echo -e $BrancoBAD"Sobre Maltego-Teeth:"$ColorR
          echo -e $Branco"Um conjunto de transformacoes para o Maltego"$ColorR
          echo -e $Branco"executar nmap, sqlmap e muito mais"$ColorR
          echo -e $Branco"em entidades no Maltego."$ColorR
          echo -e $BrancoBAD"Maltego-Teeth Homepage: https://www.maltego.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/maltego-teeth/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "19" ]; then
          echo -e $Color"Instalando Programa Padbuster."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install padbuster
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "19help" ]; then
          echo -e $BrancoBAD"Sobre Padbuster:"$ColorR
          echo -e $Branco"PadBuster e um script Perl para automatizar ataques"$ColorR
          echo -e $Branco"de preenchimento Oracle."$ColorR
          echo -e $Branco"O PadBuster fornece a capacidade de descriptografar"$ColorR
          echo -e $Branco"texto cifrado arbitrario, criptografar texto simples"$ColorR
          echo -e $Branco"arbitrario e realizar analise de resposta"$ColorR
          echo -e $Branco"automatizada para determinar se uma solicitacao"$ColorR
          echo -e $Branco"e vulneravel a ataques oracle de preenchimento."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/GDSSecurity/PadBuster"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/padbuster/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "20" ]; then
          echo -e $Color"Instalando Programa Paros."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install paros
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "20help" ]; then
          echo -e $BrancoBAD"Sobre Paros:"$ColorR
          echo -e $Branco"Proxy para avaliar a seguranca"$ColorR
          echo -e $Branco"de aplicativos da web"$ColorR
          echo -e $Branco"Paros e para pessoas que precisam avaliar"$ColorR
          echo -e $Branco"a seguranca de seus aplicativos da web."$ColorR
          echo -e $Branco"Atraves da natureza proxy do Paros, todos os dados"$ColorR
          echo -e $Branco"HTTP e HTTPS entre servidor e cliente, incluindo cookies"$ColorR
          echo -e $Branco"e campos de formulario, podem"$ColorR
          echo -e $Branco"ser interceptados e modificados."$ColorR
          echo -e $BrancoBAD"Paros Homepage: http://www.parosproxy.org/index.shtml"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/paros/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "21" ]; then
          echo -e $Color"Instalando Programa Parsero."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install parsero
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "21help" ]; then
          echo -e $BrancoBAD"Sobre Parsero:"$ColorR
          echo -e $Branco"Parsero e um script gratuito escrito em Python"$ColorR
          echo -e $Branco"que le o arquivo Robots.txt de um servidor web"$ColorR
          echo -e $Branco"e verifica as entradas Disallow."$ColorR
          echo -e $Branco"As entradas Disallow informam aos mecanismos"$ColorR
          echo -e $Branco"de pesquisa quais diretorios ou arquivos"$ColorR
          echo -e $Branco"hospedados em um servidor da Web nao devem ser indexados."$ColorR
          echo -e $Branco"Por exemplo, “Disallow: /portal/login” significa"$ColorR
          echo -e $Branco"que o conteudo em www.example.com/portal/login"$ColorR
          echo -e $Branco"nao pode ser indexado por rastreadores"$ColorR
          echo -e $Branco"como Google, Bing, Yahoo… Esta e a forma"$ColorR
          echo -e $Branco"que o administrador tem para nao compartilhar"$ColorR
          echo -e $Branco"informacoes confidenciais ou privadas"$ColorR
          echo -e $Branco"com os motores de busca."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/behindthefirewalls/Parsero"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/parsero/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "22" ]; then
          echo -e $Color"Instalando Programa Plecost."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install plecost
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "22help" ]; then
          echo -e $BrancoBAD"Sobre Plecost:"$ColorR
          echo -e $Branco"Ferramenta de impressao digital Wordpress, busca"$ColorR
          echo -e $Branco"e recupera informacoes sobre as versoes dos plugins"$ColorR
          echo -e $Branco"instalados nos sistemas Wordpress."$ColorR
          echo -e $Branco"Ele pode analisar um unico URL ou realizar"$ColorR
          echo -e $Branco"uma analise com base nos resultados indexados pelo Google."$ColorR
          echo -e $Branco"Alem disso, exibe o codigo CVE associado"$ColorR
          echo -e $Branco"a cada plug-in, se houver."$ColorR
          echo -e $Branco"O Plecost recupera as informacoes contidas"$ColorR
          echo -e $Branco"em sites da Web suportados pelo Wordpress"$ColorR
          echo -e $Branco"e tambem permite uma pesquisa nos resultados indexados"$ColorR
          echo -e $Branco"pelo Google."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/iniqua/plecost"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/plecost/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "23" ]; then
          echo -e $Color"Instalando Programa Ffuf."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ffuf
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "23help" ]; then
          echo -e $BrancoBAD"Sobre Ffuf:"$ColorR
          echo -e $Branco"ffuf e um fest web fuzzer escrito em Go"$ColorR
          echo -e $Branco"que permite a descoberta tipica de diretorio,"$ColorR
          echo -e $Branco"descoberta de host virtual (sem registros DNS)"$ColorR
          echo -e $Branco"e fuzzing de parametros GET e POST."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/ffuf/ffuf"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ffuf/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "24" ]; then
          echo -e $Color"Instalando Programa Wireshark."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install wireshark
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "24help" ]; then
          echo -e $BrancoBAD"Sobre Wireshark:"$ColorR
          echo -e $Branco"Wireshark e um “sniffer” de rede - uma ferramenta"$ColorR
          echo -e $Branco"que captura e analisa pacotes fora do fio."$ColorR
          echo -e $Branco"O Wireshark pode decodificar muitos protocolos"$ColorR
          echo -e $Branco"para listar aqui."$ColorR
          echo -e $BrancoBAD"Wireshark Homepage: https://www.wireshark.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/wireshark"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "25" ]; then
          echo -e $Color"Instalando Programa Recon-Ng."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install recon-ng
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "25help" ]; then
          echo -e $BrancoBAD"Sobre Recon-Ng:"$ColorR
          echo -e $Branco"O Recon-ng e um framework de Reconhecimento"$ColorR
          echo -e $Branco"da Web completo escrito em Python."$ColorR
          echo -e $Branco"Completo com modulos independentes, interacao"$ColorR
          echo -e $Branco"com banco de dados, funcoes de conveniencia"$ColorR
          echo -e $Branco"incorporadas, ajuda interativa e conclusao"$ColorR
          echo -e $Branco"de comandos, o Recon-ng fornece um ambiente"$ColorR
          echo -e $Branco"poderoso no qual o reconhecimento baseado na"$ColorR
          echo -e $Branco"web de codigo aberto pode ser conduzido de"$ColorR
          echo -e $Branco"forma rapida e completa."$ColorR
          echo -e $Branco"Recon-ng tem uma aparencia semelhante ao"$ColorR
          echo -e $Branco"Metasploit Framework, reduzindo a curva"$ColorR
          echo -e $Branco"de aprendizado para alavancar o framework."$ColorR
          echo -e $Branco"No entanto, e bem diferente."$ColorR
          echo -e $Branco"O Recon-ng nao se destina a competir com"$ColorR
          echo -e $Branco"os frameworks existentes, pois e projetado"$ColorR
          echo -e $Branco"exclusivamente para reconhecimento de codigo"$ColorR
          echo -e $Branco"aberto baseado na web. Se voce quiser"$ColorR
          echo -e $Branco"explorar, use o Metasploit Framework."$ColorR
          echo -e $Branco"Se voce quiser Engenharia Social, use o Kit"$ColorR
          echo -e $Branco"de Ferramentas Social-Engineer Toolkit."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/lanmaster53/recon-ng"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/recon-ng/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "26" ]; then
          echo -e $Color"Instalando Programa Skipfish."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install skipfish
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "26help" ]; then
          echo -e $BrancoBAD"Sobre Skipfish:"$ColorR
          echo -e $Branco"Skipfish e uma ferramenta ativa de reconhecimento"$ColorR
          echo -e $Branco"de seguranca de aplicativos da web."$ColorR
          echo -e $Branco"Ele prepara um mapa do site interativo"$ColorR
          echo -e $Branco"para o site de destino, realizando um rastreamento"$ColorR
          echo -e $Branco"recursivo e sondagens baseadas em dicionario."$ColorR
          echo -e $Branco"O mapa resultante e entao anotado"$ColorR
          echo -e $Branco"com a saida de varias verificacoes"$ColorR
          echo -e $Branco"de seguranca ativas (mas esperamos que nao"$ColorR
          echo -e $Branco"causem interrupcoes)."$ColorR
          echo -e $Branco"O relatorio final gerado pela ferramenta"$ColorR
          echo -e $Branco"serve como base para avaliacoes profissionais"$ColorR
          echo -e $Branco"de seguranca de aplicativos da Web."$ColorR
          echo -e $BrancoBAD"Shipfish Homepage: https://www.kali.org/tools/skipfish/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "27" ]; then
          echo -e $Color"Instalando Programa Sqlmap."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sqlmap
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "27help" ]; then
          echo -e $BrancoBAD"Sobre Sqlmap:"$ColorR
          echo -e $Branco"O objetivo do sqlmap e detectar e aproveitar"$ColorR
          echo -e $Branco"as vulnerabilidades de injecao"$ColorR
          echo -e $Branco"de SQL em aplicativos da web."$ColorR
          echo -e $Branco"Uma vez que detecta uma ou mais injecoes"$ColorR
          echo -e $Branco"de SQL no host de destino, o usuario"$ColorR
          echo -e $Branco"pode escolher entre uma variedade de opcoes"$ColorR
          echo -e $Branco"para executar uma extensa impressao digital"$ColorR
          echo -e $Branco"do sistema de gerenciamento de banco"$ColorR
          echo -e $Branco"de dados de back-end, recuperar o usuario e"$ColorR
          echo -e $Branco"o banco de dados da sessao DBMS, enumerar"$ColorR
          echo -e $Branco"usuarios, hashes de senha, privilegios, bancos"$ColorR
          echo -e $Branco"de dados, despejar tabelas/colunas DBMS"$ColorR
          echo -e $Branco"inteiras ou especificas do usuario, executar"$ColorR
          echo -e $Branco"sua propria instrucao SQL, ler arquivos"$ColorR
          echo -e $Branco"especificos no sistema"$ColorR
          echo -e $Branco"de arquivos e muito mais."$ColorR
          echo -e $Branco"$ sqlmap."$ColorR
          echo -e $Branco"$ sqlmapapi."$ColorR
          echo -e $BrancoBAD"Sqlmap Homepage: http://pkg.kali.org/sqlmap"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sqlmap/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "28" ]; then
          echo -e $Color"Instalando Programa Sqlninja."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sqlninja
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "28help" ]; then
          echo -e $BrancoBAD"Sobre Sqlninja:"$ColorR
          echo -e $Branco"Gostaria de passar de uma injecao de SQL"$ColorR
          echo -e $Branco"no Microsoft SQL Server para um acesso GUI"$ColorR
          echo -e $Branco"completo no banco de dados?"$ColorR
          echo -e $Branco"Pegue alguns novos truques"$ColorR
          echo -e $Branco"de SQL Injection, adicione algumas fotos remotas"$ColorR
          echo -e $Branco"no registro para desabilitar o Data Execution"$ColorR
          echo -e $Branco"Prevention, misture com um pouco de Perl"$ColorR
          echo -e $Branco"que gera automaticamente um script"$ColorR
          echo -e $Branco"de depuracao, coloque tudo isso em um shaker"$ColorR
          echo -e $Branco"com um wrapper Metasploit, agite bem e voce tenha"$ColorR
          echo -e $Branco"apenas um dos modulos"$ColorR
          echo -e $Branco"de ataque do sqlninja!"$ColorR
          echo -e $BrancoBAD"Sqlninja Homepage: http://sqlninja.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sqlninja/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "29" ]; then
          echo -e $Color"Instalando Programa Sqlsus."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sqlsus
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "29help" ]; then
          echo -e $BrancoBAD"Sobre Sqlsus:"$ColorR
          echo -e $Branco"sqlsus e uma ferramenta de injecao e controle"$ColorR
          echo -e $Branco"do MySQL de codigo aberto, escrita em perl."$ColorR
          echo -e $Branco"Atraves de uma interface de linha"$ColorR
          echo -e $Branco"de comando, voce pode recuperar a estrutura"$ColorR
          echo -e $Branco"do banco de dados, injetar suas proprias consultas SQL"$ColorR
          echo -e $Branco"(mesmo as complexas), baixar arquivos"$ColorR
          echo -e $Branco"do servidor web, rastrear o site para"$ColorR
          echo -e $Branco"diretorios gravaveis, fazer upload e controlar"$ColorR
          echo -e $Branco"um backdoor, clonar o banco de dados (s),"$ColorR
          echo -e $Branco"e muito mais... Sempre que relevante,"$ColorR
          echo -e $Branco"sqlsus ira imitar uma saida do console MySQL."$ColorR
          echo -e $BrancoBAD"Sqlsus Homepage: http://sqlsus.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sqlsus/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "30" ]; then
          echo -e $Color"Instalando Programa Weevely."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install weevely
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "30help" ]; then
          echo -e $BrancoBAD"Sobre Weevely:"$ColorR
          echo -e $Branco"Weevely e um shell web PHP furtivo que simula"$ColorR
          echo -e $Branco"uma conexao tipo telnet."$ColorR
          echo -e $Branco"E uma ferramenta essencial para a pos-exploracao"$ColorR
          echo -e $Branco"de aplicativos da Web e pode ser usada como backdoor"$ColorR
          echo -e $Branco"furtivo ou como um shell da Web para gerenciar contas"$ColorR
          echo -e $Branco"legitimas da Web, mesmo hospedadas gratuitamente."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/epinna/weevely3/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/weevely/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "31" ]; then
          echo -e $Color"Instalando Programa Uniscan."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install uniscan
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "31help" ]; then
          echo -e $BrancoBAD"Sobre Uniscan:"$ColorR
          echo -e $Branco"O Uniscan e um simples scanner de vulnerabilidades"$ColorR
          echo -e $Branco"Remote File Include, Local File Include"$ColorR
          echo -e $Branco"e Remote Command Execution."$ColorR
          echo -e $BrancoBAD"Uniscan Homepage: https://sourceforge.net/projects/uniscan/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/uniscan/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "32" ]; then
          echo -e $Color"Instalando Programa Watobo."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install watobo
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "32help" ]; then
          echo -e $BrancoBAD"Sobre Watobo:"$ColorR
          echo -e $Branco"O WATOBO destina-se a permitir que"$ColorR
          echo -e $Branco"os profissionais de seguranca realizem auditorias"$ColorR
          echo -e $Branco"de seguranca de aplicativos da Web altamente eficientes"$ColorR
          echo -e $Branco"(semi-automatizadas)."$ColorR
          echo -e $Branco"Funciona como um proxy da web local."$ColorR
          echo -e $BrancoBAD"Watobo Homepage: https://sourceforge.net/projects/watobo/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/watobo/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "33" ]; then
          echo -e $Color"Instalando Programa Webscarab."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install webscarab
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "33help" ]; then
          echo -e $BrancoBAD"Sobre Webscarab:"$ColorR
          echo -e $Branco"O WebScarab foi projetado para ser uma"$ColorR
          echo -e $Branco"ferramenta para qualquer pessoa que"$ColorR
          echo -e $Branco"precise expor o funcionamento de um aplicativo"$ColorR
          echo -e $Branco"baseado em HTTP(S), seja para permitir"$ColorR
          echo -e $Branco"que o desenvolvedor depure problemas dificeis"$ColorR
          echo -e $Branco"ou para permitir que um especialista"$ColorR
          echo -e $Branco"em seguranca identifique vulnerabilidades"$ColorR
          echo -e $Branco"na maneira como o aplicativo"$ColorR
          echo -e $Branco"foi projetado ou implementado."$ColorR
          echo -e $Branco"$ webscarab."$ColorR
          echo -e $BrancoBAD"Webscarab Homepage: http://dawes.za.net/rogan/webscarab/#current"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/webscarab/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "34" ]; then
          echo -e $Color"Instalando Programa Wapiti."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install wapiti
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "34help" ]; then
          echo -e $BrancoBAD"Sobre Wapiti:"$ColorR
          echo -e $Branco"Wapiti permite auditar a seguranca"$ColorR
          echo -e $Branco"de seus aplicativos da web."$ColorR
          echo -e $Branco"Ele realiza varreduras de “caixa preta”, ou seja,"$ColorR
          echo -e $Branco"nao estuda o codigo-fonte do aplicativo, mas varre"$ColorR
          echo -e $Branco"as paginas da Web dos aplicativos da Web implantados,"$ColorR
          echo -e $Branco"procurando scripts e formularios onde possa injetar dados."$ColorR
          echo -e $Branco"Depois de obter essa lista, o Wapiti age como um fuzzer,"$ColorR
          echo -e $Branco"injetando cargas uteis para ver"$ColorR
          echo -e $Branco"se um script e vulneravel."$ColorR
          echo -e $BrancoBAD"Wapiti pode detectar as seguintes vulnerabilidades:"$ColorR
          echo -e $Branco"* Injecao de banco de dados"$ColorR
          echo -e $Branco"(PHP/ASP/JSP SQL Injections e XPath Injections)."$ColorR
          echo -e $Branco"* Cross Site Scripting (XSS) refletido e permanente"$ColorR
          echo -e $Branco"* Deteccao de divulgacao de arquivos (incluir local"$ColorR
          echo -e $Branco"e remoto, exigir, fopen, readfile…)."$ColorR
          echo -e $Branco"* Deteccao de execucao de comandos (eval(),"$ColorR
          echo -e $Branco"system(), passtru()…)."$ColorR
          echo -e $Branco"* Injecao de XXE (Xml eXternal Entity)."$ColorR
          echo -e $Branco"Injecao de CRLF."$ColorR
          echo -e $Branco"* Procure arquivos potencialmente perigosos"$ColorR
          echo -e $Branco"no servidor (gracas ao Nikto db)."$ColorR
          echo -e $Branco"* Bypass de configuracoes htaccess fracas."$ColorR
          echo -e $Branco"* Procurar copias (backup) de scripts no servidor."$ColorR
          echo -e $Branco"* Trauma pos guerra."$ColorR
          echo -e $Branco"* Gosto do DirBuster."$ColorR
          echo -e $Branco"* Falsificacao de solicitacao do lado do servidor"$ColorR
          echo -e $Branco"(atraves do uso de um site Wapiti externo)."$ColorR
          echo -e $BrancoBAD"Wapiti Homepage: http://wapiti.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/wapiti/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "35" ]; then
          echo -e $Color"Instalando Programa Websploit."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install websploit
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "35help" ]; then
          echo -e $BrancoBAD"Sobre Websploit:"$ColorR
          echo -e $Branco"WebSploit e um projeto de codigo aberto"$ColorR
          echo -e $Branco"que e usado para escanear e analisar sistemas"$ColorR
          echo -e $Branco"remotos para encontrar varios tipos de vulnerabilidades."$ColorR
          echo -e $Branco"Esta ferramenta e muito poderosa"$ColorR
          echo -e $Branco"e suporta multiplas vulnerabilidades."$ColorR
          echo -e $BrancoBAD"Websploit Homepage: https://sourceforge.net/projects/websploit/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/websploit/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "36" ]; then
          echo -e $Color"Instalando Programa Wfuzz."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install wfuzz
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "36help" ]; then
          echo -e $BrancoBAD"Sobre Wfuzz:"$ColorR
          echo -e $Branco"Wfuzz e uma ferramenta projetada"$ColorR
          echo -e $Branco"para bruteforcing de aplicativos da Web, pode ser usado"$ColorR
          echo -e $Branco"para encontrar recursos nao vinculados"$ColorR
          echo -e $Branco"a diretorios, servlets, scripts, etc,"$ColorR
          echo -e $Branco"parametros bruteforce GET e POST para verificar diferentes"$ColorR
          echo -e $Branco"tipos de injecoes (SQL, XSS, LDAP, etc), bruteforce"$ColorR
          echo -e $Branco"Forms parametros (Usuario/Senha), Fuzzing, etc."$ColorR
          echo -e $BrancoBAD"Wfuzz Homepage: http://www.edge-security.com/wfuzz.php"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/wfuzz/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "37" ]; then
          echo -e $Color"Instalando Programa Wpscan."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install wpscan
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "37help" ]; then
          echo -e $BrancoBAD"Sobre Wpscan:"$ColorR
          echo -e $Branco"O WPScan verifica as instalacoes remotas do WordPress"$ColorR
          echo -e $Branco"para encontrar problemas de seguranca."$ColorR
          echo -e $BrancoBAD"Wpscan Homepage: https://wpscan.com/wordpress-security-scanner"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/wpscan/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "38" ]; then
          echo -e $Color"Instalando Programa Lynx."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install lynx
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "38help" ]; then
          echo -e $BrancoBAD"Sobre Lynx:"$ColorR
          echo -e $Branco"Lynx e um navegador web baseado"$ColorR
          echo -e $Branco"em terminal popular em todos os tipos de Linux."$ColorR
          echo -e $Branco"O Lynx exibe texto ASCII simples em seu terminal,"$ColorR
          echo -e $Branco"nao exibe nenhuma imagem ou conteudo multimidia."$ColorR
          echo -e $Branco"Lynx carrega paginas da web na linha"$ColorR
          echo -e $Branco"de comando (Terminal)."$ColorR
          echo -e $Branco"Como nao carrega imagens e material"$ColorR
          echo -e $Branco"flash, e rapido em comparacao"$ColorR
          echo -e $Branco"com outros navegadores."$ColorR
          echo -e $Branco"Voce pode navegar para diferentes links"$ColorR
          echo -e $Branco"da pagina da Web usando as teclas de seta."$ColorR
          echo -e $Branco"O usuario da Internet com baixa especificacao"$ColorR
          echo -e $Branco"do sistema ou problemas de compatibilidade"$ColorR
          echo -e $Branco"preferem usar o lynx."$ColorR
          echo -e $BrancoBAD"Lynx Homepage: http://lynx.invisible-island.net/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "39" ]; then
          echo -e $Color"Instalando Programa Xsser."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install xsser
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "39help" ]; then
          echo -e $BrancoBAD"Sobre Xsser:"$ColorR
          echo -e $Branco"Cross Site “Scripter” (tambem conhecido como XSSer)"$ColorR
          echo -e $Branco"e uma estrutura automatica para detectar,"$ColorR
          echo -e $Branco"explorar e relatar vulnerabilidades XSS"$ColorR
          echo -e $Branco"em aplicativos baseados na web."$ColorR
          echo -e $Branco"Ele contem varias opcoes para tentar"$ColorR
          echo -e $Branco"contornar certos filtros e varias"$ColorR
          echo -e $Branco"tecnicas especiais de injecao de codigo."$ColorR
          echo -e $BrancoBAD"Xsser Homepage: https://xsser.03c8.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/xsser/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "40" ]; then
          echo -e $Color"Instalando Programa Zaproxy."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install zaproxy
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "40help" ]; then
          echo -e $BrancoBAD"Sobre Zaproxy:"$ColorR
          echo -e $Branco"O OWASP Zed Attack Proxy (ZAP) e uma ferramenta"$ColorR
          echo -e $Branco"de teste de penetracao integrada facil"$ColorR
          echo -e $Branco"de usar para encontrar vulnerabilidades"$ColorR
          echo -e $Branco"em aplicativos da web."$ColorR
          echo -e $Branco"Ele foi projetado para ser usado por pessoas"$ColorR
          echo -e $Branco"com uma ampla gama de experiencia"$ColorR
          echo -e $Branco"em seguranca e, como tal, e ideal para desenvolvedores"$ColorR
          echo -e $Branco"e testadores funcionais que sao novos em testes"$ColorR
          echo -e $Branco"de penetracao, alem de ser uma adicao"$ColorR
          echo -e $Branco"util a uma caixa de ferramentas de testadores"$ColorR
          echo -e $Branco"de caneta experientes. https://www.owasp.org/index.php/ZAP"$ColorR
          echo -e $Branco"$ owasp-zap."$ColorR
          echo -e $Branco"$ zaproxy."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/zaproxy/zaproxy"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/zaproxy/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "41" ]; then
          echo -e $Color"Instalando Programa Beef-Xss."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install beef-xss
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "41help" ]; then
          echo -e $BrancoBAD"Sobre Beef-Xss:"$ColorR
          echo -e $Branco"BeEF e a abreviacao de The Browser Exploitation Framework."$ColorR
          echo -e $Branco"E uma ferramenta de teste de penetracao que se concentr"$ColorR
          echo -e $Branco"no navegador da web."$ColorR
          echo -e $Branco"Em meio a preocupacoes crescentes sobre ataques"$ColorR
          echo -e $Branco"na Web contra clientes, incluindo clientes"$ColorR
          echo -e $Branco"moveis, o BeEF permite que o testador de penetracao"$ColorR
          echo -e $Branco"profissional avalie a postura de seguranca real"$ColorR
          echo -e $Branco"de um ambiente de destino usando vetores"$ColorR
          echo -e $Branco"de ataque do lado do cliente."$ColorR
          echo -e $Branco"Ao contrario de outras estruturas"$ColorR
          echo -e $Branco"de seguranca, o BeEF olha alem do perimetro"$ColorR
          echo -e $Branco"de rede reforcado e do sistema cliente e examina"$ColorR
          echo -e $Branco"a possibilidade de exploracao dentro do contexto"$ColorR
          echo -e $Branco"de uma porta aberta: o navegador da web."$ColorR
          echo -e $Branco"O BeEF conectara um ou mais navegadores da Web"$ColorR
          echo -e $Branco"e os usara como cabecas de ponte para lancar modulos"$ColorR
          echo -e $Branco"de comando direcionados e outros ataques"$ColorR
          echo -e $Branco"contra o sistema de dentro do contexto do navegador."$ColorR
          echo -e $Branco"$ beef-xss."$ColorR
          echo -e $Branco"$ beef-xss-stop."$ColorR
          echo -e $BrancoBAD"Beef-Xss Homepage: https://beefproject.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/beef-xss/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "42" ]; then
          echo -e $Color"Instalando Programa Cadaver."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cadaver
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "42help" ]; then
          echo -e $BrancoBAD"Sobre Cadaver:"$ColorR
          echo -e $Branco"cadaver suporta upload de arquivos, download,"$ColorR
          echo -e $Branco"exibicao na tela, edicao no local,"$ColorR
          echo -e $Branco"operacoes de namespace (mover/copiar), criacao"$ColorR
          echo -e $Branco"e exclusao de colecoes, manipulacao de propriedades"$ColorR
          echo -e $Branco"e bloqueio de recursos."$ColorR
          echo -e $Branco"Sua operacao e semelhante ao cliente BSD ftp(1)"$ColorR
          echo -e $Branco"padrao e ao smbclient(1) do Projeto Samba."$ColorR
          echo -e $Branco"Este pacote inclui suporte a GnuTLS (HTTPS)."$ColorR
          echo -e $Branco"WebDAV (Web-based Distributed Authoring and Versioning)"$ColorR
          echo -e $Branco"e um conjunto de extensoes para o protocolo HTTP"$ColorR
          echo -e $Branco"que permite aos usuarios editar e gerenciar"$ColorR
          echo -e $Branco"arquivos de forma colaborativa"$ColorR
          echo -e $Branco"em servidores web remotos."$ColorR
          echo -e $BrancoBAD"Cadaver Homepage: http://www.webdav.org/cadaver/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cadaver/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "43" ]; then
          echo -e $Color"Instalando Programa EyeWitness."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install eyewitness
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "43help" ]; then
          echo -e $BrancoBAD"Sobre EyeWitness:"$ColorR
          echo -e $Branco"O EyeWitness foi projetado para fazer capturas"$ColorR
          echo -e $Branco"de tela de sites, fornecer algumas informacoes"$ColorR
          echo -e $Branco"de cabecalho do servidor e identificar credenciais padrao,"$ColorR
          echo -e $Branco"se possivel."$ColorR
          echo -e $Branco"A inspiracao veio do PeepingTom Script de Tim Tomes."$ColorR
          echo -e $Branco"EyeWitness e projetado para rodar no Kali Linux."$ColorR
          echo -e $Branco"Ele detectara automaticamente o arquivo que voce"$ColorR
          echo -e $Branco"fornecer com o sinalizador -f como sendo um arquivo"$ColorR
          echo -e $Branco"de texto com URLs em cada nova linha, saida nmap xml"$ColorR
          echo -e $Branco"ou saida nessus xml."$ColorR
          echo -e $Branco"O sinalizador -t (tempo limite) e totalmente opcional"$ColorR
          echo -e $Branco"e permite que voce forneca o tempo maximo"$ColorR
          echo -e $Branco"de espera ao tentar renderizar e capturar"$ColorR
          echo -e $Branco"uma pagina da web."$ColorR
          echo -e $Branco"O sinalizador –open, que e opcional,"$ColorR
          echo -e $Branco"abrira a URL em uma nova guia no Firefox."$ColorR
          echo -e $Branco"$ eyewitness."$ColorR
          echo -e $Branco"$ geckodriver."$ColorR
          echo -e $BrancoBAD"Eyewitness Homepage:"\
                            "https://www.christophertruncer.com/eyewitness-triage-tool/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/eyewitness/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "44" ]; then
          echo -e $Color"Instalando Programa Ftester."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ftester
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "44help" ]; then
          echo -e $BrancoBAD"Sobre Ftester:"$ColorR
          echo -e $Branco"O Firewall Tester (FTester) e uma ferramenta"$ColorR
          echo -e $Branco"projetada para testar politicas de filtragem de firewall"$ColorR
          echo -e $Branco"e recursos do Sistema de Deteccao de Intrusao (IDS)."$ColorR
          echo -e $BrancoBAD"Caracteristicas:"$ColorR
          echo -e $Branco"* teste de firewall."$ColorR
          echo -e $Branco"* Teste de IDS."$ColorR
          echo -e $Branco"* simulacao de conexoes tcp reais"$ColorR
          echo -e $Branco"para firewalls de inspecao com estado e IDS."$ColorR
          echo -e $Branco"Falsificacao de conexao TCP."$ColorR
          echo -e $Branco"* Fragmentacao IP / segmentacao TCP."$ColorR
          echo -e $Branco"* Tecnicas de evasao de IDS."$ColorR
          echo -e $BrancoBAD"Ftester Homepage: https://dev.inversepath.com/ftester/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ftester/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "45" ]; then
          echo -e $Color"Instalando Programa Hakrawler."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hakrawler
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "45help" ]; then
          echo -e $BrancoBAD"Sobre Hakrawler:"$ColorR
          echo -e $Branco"Rastreador da web golang rapido para coletar URLs"$ColorR
          echo -e $Branco"e locais de arquivos JavaScript."$ColorR
          echo -e $Branco"Esta e basicamente uma implementacao simples"$ColorR
          echo -e $Branco"da incrivel biblioteca Gocolly."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/hakluke/hakrawler"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hakrawler/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "46" ]; then
          echo -e $Color"Instalando Programa Hamster-Sidejack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hamster-sidejack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "46help" ]; then
          echo -e $BrancoBAD"Sobre Hamster-Sidejack:"$ColorR
          echo -e $Branco"Hamster e ferramenta ou “sidejacking”."$ColorR
          echo -e $Branco"Ele atua como um servidor proxy que substitui seus cookies"$ColorR
          echo -e $Branco"por cookies de sessao roubados de outra pessoa, permitindo"$ColorR
          echo -e $Branco"que voce sequestre suas sessoes."$ColorR
          echo -e $Branco"Os cookies sao farejados usando o programa Ferret."$ColorR
          echo -e $Branco"Voce precisa de uma copia disso tambem."$ColorR
          echo -e $BrancoBAD"Hamster-Sidejack Homepage: http://www.erratasec.com/research.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hamster-sidejack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "47" ]; then
          echo -e $Color"Instalando Programa Heartleech."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install heartleech
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "47help" ]; then
          echo -e $BrancoBAD"Sobre Heartleech:"$ColorR
          echo -e $Branco"Esta e uma ferramenta tipica “heartbleed”."$ColorR
          echo -e $Branco"Ele pode procurar sistemas vulneraveis ​​ao bug e,"$ColorR
          echo -e $Branco"em seguida, ser usado para baixa-los."$ColorR
          echo -e $BrancoBAD"Algumas caracteristicas importantes:"$ColorR
          echo -e $Branco"* veredictos conclusivos/inconclusivos sobre se"$ColorR
          echo -e $Branco"o alvo e vulneravel."$ColorR
          echo -e $Branco"* download em massa/rapido de dados heartbleed em arquivos"$ColorR
          echo -e $Branco"grandes para processamento offline usando muitos threads."$ColorR
          echo -e $Branco"* recuperacao automatica de chaves privadas"$ColorR
          echo -e $Branco"sem etapas adicionais."$ColorR
          echo -e $Branco"* alguma evasao limitada de IDS."$ColorR
          echo -e $Branco"* Suporte STARTTLS."$ColorR
          echo -e $Branco"* Suporte a IPv6"$ColorR
          echo -e $Branco"* Suporte a proxy Tor/Socks5n."$ColorR
          echo -e $Branco"* extensas informacoes de diagnostico de conexao."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/robertdavidgraham/heartleech"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/heartleech/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "48" ]; then
          echo -e $Color"Instalando Programa Httprint."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install httprint
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "48help" ]; then
          echo -e $BrancoBAD"Sobre Httprint:"$ColorR
          echo -e $Branco"httprint e uma ferramenta de impressao digital"$ColorR
          echo -e $Branco"do servidor web."$ColorR
          echo -e $Branco"Ele se baseia nas caracteristicas do servidor da Web"$ColorR
          echo -e $Branco"para identificar com precisao os servidores da Web,"$ColorR
          echo -e $Branco"apesar do fato de que eles podem ter sido ofuscados"$ColorR
          echo -e $Branco"pela alteracao das strings do banner do servidor ou"$ColorR
          echo -e $Branco"por plug-ins como mod_security ou servermask."$ColorR
          echo -e $Branco"httprint tambem pode ser usado para detectar"$ColorR
          echo -e $Branco"dispositivos habilitados para web que nao possuem"$ColorR
          echo -e $Branco"uma string de banner de servidor, como"$ColorR
          echo -e $Branco"pontos de acesso sem fio, roteadores,"$ColorR
          echo -e $Branco"switches, modems a cabo, etc."$ColorR
          echo -e $Branco"httprint usa strings de assinatura de texto"$ColorR
          echo -e $Branco"e, e muito facil adicionar assinaturas"$ColorR
          echo -e $Branco"a assinatura  base de dados."$ColorR
          echo -e $BrancoBAD"Httprint Homepage: http://www.net-square.com/httprint.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/httprint/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "49" ]; then
          echo -e $Color"Instalando Programa Httrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install httrack
          apt-get -y install libhttrack-dev
          apt-get -y install libhttrack2
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "49help" ]; then
          echo -e $BrancoBAD"Sobre Httrack:"$ColorR
          echo -e $Branco"HTTrack e um utilitario de navegador offline,"$ColorR
          echo -e $Branco"permitindo que voce baixe um site World Wide da Internet"$ColorR
          echo -e $Branco"para um diretorio local, construindo recursivamente"$ColorR
          echo -e $Branco"todos os diretorios, obtendo html, imagens e outros"$ColorR
          echo -e $Branco"arquivos do servidor para o seu computador."$ColorR
          echo -e $Branco"O HTTrack organiza a estrutura de links"$ColorR
          echo -e $Branco"relativa do site original."$ColorR
          echo -e $Branco"Basta abrir uma pagina do site “espelhado” em seu"$ColorR
          echo -e $Branco"navegador e voce podera navegar no site"$ColorR
          echo -e $Branco"de link em link, como se estivesse"$ColorR
          echo -e $Branco"visualizando-o online."$ColorR
          echo -e $Branco"O HTTrack tambem pode atualizar um site"$ColorR
          echo -e $Branco"espelhado existente e retomar downloads"$ColorR
          echo -e $Branco"interrompidos."$ColorR
          echo -e $Branco"O HTTrack e totalmente configuravel"$ColorR
          echo -e $Branco"e possui um sistema de ajuda integrado."$ColorR
          echo -e $BrancoBAD"Httrack Homepage: http://www.httrack.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/httrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "50" ]; then
          echo -e $Color"Instalando Programa ProxyTrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install proxytrack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "50help" ]; then
          echo -e $BrancoBAD"Sobre ProxyTrack:"$ColorR
          echo -e $Branco"ProxyTrack e um servidor proxy simples"$ColorR
          echo -e $Branco"destinado a fornecer conteudo arquivado"$ColorR
          echo -e $Branco"por sessoes HTTrack."$ColorR
          echo -e $Branco"Ele pode agregar varios caches"$ColorR
          echo -e $Branco"de download, para uso direto"$ColorR
          echo -e $Branco"(atraves de qualquer navegador) ou como"$ColorR
          echo -e $Branco"um servidor escravo de cache upstream."$ColorR
          echo -e $Branco"Esse proxy pode lidar com conexoes"$ColorR
          echo -e $Branco"de proxy HTTP/1.1 e, e capaz de responder"$ColorR
          echo -e $Branco"a solicitacoes ICPv2 para uma integracao"$ColorR
          echo -e $Branco"eficiente em outros servidores"$ColorR
          echo -e $Branco"de cache, como o Squid."$ColorR
          echo -e $Branco"Ele tambem pode lidar com solicitacoes"$ColorR
          echo -e $Branco"HTTP transparentes para permitir"$ColorR
          echo -e $Branco"conexoes ativas em cache dentro"$ColorR
          echo -e $Branco"de uma rede offline."$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/httrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "51" ]; then
          echo -e $Color"Instalando Programa WebHTTrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install webhttrack
          apt-get -y install webhttrack-common
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "51help" ]; then
          echo -e $BrancoBAD"Sobre WebHTTrack:"$ColorR
          echo -e $Branco"WebHTTrack e um utilitario de navegador offline,"$ColorR
          echo -e $Branco"permitindo que voce baixe um site World Wide da Internet"$ColorR
          echo -e $Branco"para um diretorio local, construindo recursivamente"$ColorR
          echo -e $Branco"todos os diretorios, obtendo html, imagens e outros"$ColorR
          echo -e $Branco"arquivos do servidor para o seu computador,"$ColorR
          echo -e $Branco"usando um passo a passo interface web."$ColorR
          echo -e $Branco"O WebHTTrack organiza a estrutura de links"$ColorR
          echo -e $Branco"relativa do site original."$ColorR
          echo -e $Branco"Basta abrir uma pagina do site “espelhado”"$ColorR
          echo -e $Branco"em seu navegador e voce podera navegar no site de link"$ColorR
          echo -e $Branco"em link, como se estivesse visualizando-o online."$ColorR
          echo -e $Branco"O HTTrack tambem pode atualizar um site espelhado"$ColorR
          echo -e $Branco"existente e retomar downloads interrompidos."$ColorR
          echo -e $Branco"O WebHTTrack e totalmente configuravel"$ColorR
          echo -e $Branco"e possui um sistema de ajuda integrado."$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/httrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "52" ]; then
          echo -e $Color"Instalando Programa Hydra."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hydra
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "52help" ]; then
          echo -e $BrancoBAD"Sobre Hydra:"$ColorR
          echo -e $Branco"Hydra e um cracker de login paralelizado"$ColorR
          echo -e $Branco"que suporta varios protocolos de ataque."$ColorR
          echo -e $Branco"E muito rapido e flexivel, e novos"$ColorR
          echo -e $Branco"modulos sao faceis de adicionar."$ColorR
          echo -e $Branco"Essa ferramenta possibilita que pesquisadores"$ColorR
          echo -e $Branco"e consultores de seguranca mostrem como"$ColorR
          echo -e $Branco"seria facil obter acesso nao autorizado"$ColorR
          echo -e $Branco"a um sistema remotamente."$ColorR
          echo -e $Branco"Suporta: Cisco AAA, Cisco auth, Cisco enable,"$ColorR
          echo -e $Branco"CVS, FTP, HTTP(S)-FORM-GET, HTTP(S)-FORM-POST,"$ColorR
          echo -e $Branco"HTTP(S)-GET, HTTP(S)-HEAD, HTTP-  Proxy,"$ColorR
          echo -e $Branco"ICQ, IMAP, IRC, LDAP, MS-SQL, MySQL,"$ColorR
          echo -e $Branco"NNTP, Oracle Listener, Oracle SID,"$ColorR
          echo -e $Branco"PC-Anywhere, PC-NFS, POP3, PostgreSQL,"$ColorR
          echo -e $Branco"RDP, Rexec, Rlogin, Rsh, SIP, SMB(NT),"$ColorR
          echo -e $Branco"SMTP, SMTP Enum, SNMP v1+v2+v3,"$ColorR
          echo -e $Branco"SOCKS5, SSH (v1 e v2), SSHKEY,"$ColorR
          echo -e $Branco"Subversion, Teamspeak (TS2), Telnet,"$ColorR
          echo -e $Branco"VMware-Auth, VNC e XMPP."$ColorR
          echo -e $Branco"$ dpl4hydra."$ColorR
          echo -e $Branco"$ pw-inspector."$ColorR
          echo -e $Branco"$ hydra."$ColorR
          echo -e $Branco"$ hydra-wizard."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/vanhauser-thc/thc-hydra"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hydra/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "53" ]; then
          echo -e $Color"Instalando Programa Hydra-gtk."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hydra-gtk
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "53help" ]; then
          echo -e $BrancoBAD"Sobre Hydra-gtk:"$ColorR
          echo -e $Branco"Hydra e um cracker de login paralelizado"$ColorR
          echo -e $Branco"que suporta varios protocolos de ataque."$ColorR
          echo -e $Branco"E muito rapido e flexivel, e novos"$ColorR
          echo -e $Branco"modulos sao faceis de adicionar."$ColorR
          echo -e $Branco"Essa ferramenta possibilita que pesquisadores"$ColorR
          echo -e $Branco"e consultores de seguranca mostrem como"$ColorR
          echo -e $Branco"seria facil obter acesso nao autorizado"$ColorR
          echo -e $Branco"a um sistema remotamente."$ColorR
          echo -e $Branco"Suporta: Cisco AAA, Cisco auth, Cisco enable,"$ColorR
          echo -e $Branco"CVS, FTP, HTTP(S)-FORM-GET, HTTP(S)-FORM-POST,"$ColorR
          echo -e $Branco"HTTP(S)-GET, HTTP(S)-HEAD, HTTP-  Proxy,"$ColorR
          echo -e $Branco"ICQ, IMAP, IRC, LDAP, MS-SQL, MySQL,"$ColorR
          echo -e $Branco"NNTP, Oracle Listener, Oracle SID,"$ColorR
          echo -e $Branco"PC-Anywhere, PC-NFS, POP3, PostgreSQL,"$ColorR
          echo -e $Branco"RDP, Rexec, Rlogin, Rsh, SIP, SMB(NT),"$ColorR
          echo -e $Branco"SMTP, SMTP Enum, SNMP v1+v2+v3,"$ColorR
          echo -e $Branco"SOCKS5, SSH (v1 e v2), SSHKEY,"$ColorR
          echo -e $Branco"Subversion, Teamspeak (TS2), Telnet,"$ColorR
          echo -e $Branco"VMware-Auth, VNC e XMPP."$ColorR
          echo -e $Branco"Este pacote fornece a GUI baseada em GTK+ para hydra."$ColorR
          echo -e $Branco"$ xhydra."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/vanhauser-thc/thc-hydra"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hydra/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "54" ]; then
          echo -e $Color"Instalando Programa Laudanum."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install laudanum
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "54help" ]; then
          echo -e $BrancoBAD"Sobre Laudanum:"$ColorR
          echo -e $Branco"Laudanum e uma colecao de arquivos injetaveis,"$ColorR
          echo -e $Branco"projetados para serem usados ​​em um pentest"$ColorR
          echo -e $Branco"quando falhas de injecao de SQL sao encontradas"$ColorR
          echo -e $Branco"e estao em varios idiomas para diferentes ambientes."$ColorR
          echo -e $Branco"Eles fornecem funcionalidades como shell,"$ColorR
          echo -e $Branco"consulta DNS, recuperacao LDAP e outras."$ColorR
          echo -e $BrancoBAD"Laudanum Homepage: https://sourceforge.net/projects/laudanum/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/laudanum/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "55" ]; then
          echo -e $Color"Instalando Programa Medusa."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install medusa
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "55help" ]; then
          echo -e $BrancoBAD"Sobre Medusa:"$ColorR
          echo -e $Branco"Medusa pretende ser um brute-forcer de login"$ColorR
          echo -e $Branco"rapido, massivamente paralelo e modular."$ColorR
          echo -e $Branco"O objetivo e oferecer suporte ao maior"$ColorR
          echo -e $Branco"numero possivel de servicos que permitem"$ColorR
          echo -e $Branco"autenticacao remota."$ColorR
          echo -e $BrancoBAD"O autor considera os seguintes itens"$ColorR
          echo -e $BrancoBAD"como alguns dos principais recursos"$ColorR
          echo -e $BrancoBAD"deste aplicativo:"$ColorR
          echo -e $Branco"* Teste paralelo baseado em thread."$ColorR
          echo -e $Branco"O teste de forca bruta pode ser executado"$ColorR
          echo -e $Branco"em varios hosts, usuarios ou senhas simultaneamente."$ColorR
          echo -e $Branco"* Entrada de usuario flexivel."$ColorR
          echo -e $Branco"As informacoes de destino (host/usuario/senha)"$ColorR
          echo -e $Branco"podem ser especificadas de varias maneiras."$ColorR
          echo -e $Branco"Por exemplo, cada item pode ser uma unica"$ColorR
          echo -e $Branco"entrada ou um arquivo contendo varias entradas."$ColorR
          echo -e $Branco"Alem disso, um formato de arquivo de combinacao"$ColorR
          echo -e $Branco"permite ao usuario refinar sua lista de destino."$ColorR
          echo -e $Branco"* Design modular."$ColorR
          echo -e $Branco"Cada modulo de servico existe como"$ColorR
          echo -e $Branco"um arquivo .mod independente."$ColorR
          echo -e $Branco"Isso significa que nenhuma modificacao e necessaria"$ColorR
          echo -e $Branco"no aplicativo principal para estender a lista"$ColorR
          echo -e $Branco"de servicos com suporte para forca bruta."$ColorR
          echo -e $Branco"$ medusa."$ColorR
          echo -e $BrancoBAD"Medusa Homepage: http://foofus.net/?page_id=51"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/medusa/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "56" ]; then
          echo -e $Color"Instalando Programa Mitmproxy."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install mitmproxy
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "56help" ]; then
          echo -e $BrancoBAD"Sobre Mitmproxy:"$ColorR
          echo -e $Branco"mitmproxy e um proxy man-in-the-middle interativo"$ColorR
          echo -e $Branco"para HTTP e HTTPS."$ColorR
          echo -e $Branco"Ele fornece uma interface de console que permite"$ColorR
          echo -e $Branco"que os fluxos de trafego sejam inspecionados"$ColorR
          echo -e $Branco"e editados em tempo real."$ColorR
          echo -e $Branco"Tambem e fornecido o mitmdump, a versao"$ColorR
          echo -e $Branco"de linha de comando do mitmproxy, com a mesma"$ColorR
          echo -e $Branco"funcionalidade, mas sem frescuras."$ColorR
          echo -e $Branco"Pense tcpdump para HTTP."$ColorR
          echo -e $BrancoBAD"Caracteristicas:"$ColorR
          echo -e $Branco"* interceptar e modificar solicitacoes"$ColorR
          echo -e $Branco"e respostas HTTP e HTTPS e modifica-las em tempo real."$ColorR
          echo -e $Branco"* salve conversas HTTP para reproducao e analise posteriores."$ColorR
          echo -e $Branco"* reproduzir o lado do cliente de uma conversa HTTP."$ColorR
          echo -e $Branco"* modo de proxy reverso para encaminhar o trafego"$ColorR
          echo -e $Branco"para um servidor especificado."$ColorR
          echo -e $Branco"* modo de proxy transparente no OSX e Linux."$ColorR
          echo -e $Branco"* fazer alteracoes com script no trafego HTTP usando Python."$ColorR
          echo -e $Branco"* Os certificados SSL/TLS para interceptacao"$ColorR
          echo -e $Branco"sao gerados em tempo real."$ColorR
          echo -e $Branco"* Este pacote contem o modulo python-pathod"$ColorR
          echo -e $Branco"(previamente fornecido por outro pacote fonte)."$ColorR
          echo -e $Branco"O modulo python-netlib tambem foi incluido,"$ColorR
          echo -e $Branco"mas foi descartado pelo upstream na versao 1.0."$ColorR
          echo -e $BrancoBAD"Mitmproxy Homepage: https://mitmproxy.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/mitmproxy/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

      elif [ "$C" = "57" ]; then
          echo -e $Color"Instalando Programa Ncrack."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ncrack
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "57help" ]; then
          echo -e $BrancoBAD"Sobre Ncrack:"$ColorR
          echo -e $Branco"Ncrack e uma ferramenta de cracking"$ColorR
          echo -e $Branco"de autenticacao de rede de alta velocidade."$ColorR
          echo -e $Branco"Ele foi desenvolvido para ajudar as empresas"$ColorR
          echo -e $Branco"a proteger suas redes testando proativamente todos"$ColorR
          echo -e $Branco"os seus hosts e dispositivos de rede"$ColorR
          echo -e $Branco"em busca de senhas ruins."$ColorR
          echo -e $Branco"Os profissionais de seguranca"$ColorR
          echo -e $Branco"tambem confiam no Ncrack ao auditar seus clientes."$ColorR
          echo -e $Branco"O Ncrack foi projetado usando uma abordagem"$ColorR
          echo -e $Branco"modular, uma sintaxe de linha de comando"$ColorR
          echo -e $Branco"semelhante ao Nmap e um mecanismo dinamico"$ColorR
          echo -e $Branco"que pode adaptar seu comportamento com base"$ColorR
          echo -e $Branco"no feedback da rede."$ColorR
          echo -e $Branco"Ele permite uma auditoria em larga"$ColorR
          echo -e $Branco"escala rapida e confiavel de varios hosts."$ColorR
          echo -e $Branco"Os recursos do Ncrack incluem uma interface"$ColorR
          echo -e $Branco"muito flexivel que garante ao usuario controle"$ColorR
          echo -e $Branco"total das operacoes de rede, permitindo ataques"$ColorR
          echo -e $Branco"de forca bruta muito sofisticados, modelos de tempo"$ColorR
          echo -e $Branco"para facilidade de uso, interacao em tempo"$ColorR
          echo -e $Branco"de execucao semelhante ao Nmap e muito mais."$ColorR
          echo -e $Branco"Os protocolos suportados incluem RDP, SSH,"$ColorR
          echo -e $Branco"http(s), SMB, pop3(s), VNC, FTP e telnet."$ColorR
          echo -e $Branco"Certifique-se de ler a pagina de manual do Ncrack"$ColorR
          echo -e $Branco"(https://nmap.org/ncrack/man.html)"$ColorR
          echo -e $Branco"para entender completamente o uso do Ncrack."$ColorR
          echo -e $Branco"$ ncrack."$ColorR
          echo -e $BrancoBAD"Ncrack Homepage: https://nmap.org/ncrack/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ncrack/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

      elif [ "$C" = "58" ]; then
          echo -e $Color"Instalando Programa Nikto."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install nikto
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "58help" ]; then
          echo -e $BrancoBAD"Sobre Nikto:"$ColorR
          echo -e $Branco"Verifique o servidor web em busca de vulnerabilidades"$ColorR
          echo -e $Branco"conhecidas."$ColorR
          echo -e $Branco"Nikto e um servidor web conectavel"$ColorR
          echo -e $Branco"e um scanner CGI escrito em Perl, usando"$ColorR
          echo -e $Branco"o LibWhisker do rfp para realizar verificacoes"$ColorR
          echo -e $Branco"rapidas de seguranca ou informacoes."$ColorR
          echo -e $BrancoBAD"Caracteristicas:"$ColorR
          echo -e $Branco"* Banco de dados de verificacoes em formato"$ColorR
          echo -e $Branco"CSV facilmente atualizavel."$ColorR
          echo -e $Branco"* Relatorios de saida em texto simples ou HTML."$ColorR
          echo -e $Branco"* Comutacao automatica das versoes HTTP disponiveis."$ColorR
          echo -e $Branco"* Verificacoes genericas e especificas"$ColorR
          echo -e $Branco"de software de servidor."$ColorR
          echo -e $Branco"* Suporte SSL (atraves de libnet-ssleay-perl)."$ColorR
          echo -e $Branco"* Suporte de proxy (com autenticacao)."$ColorR
          echo -e $Branco"* Suporte a cookies."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/sullo/nikto"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/nikto/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

      elif [ "$C" = "59" ]; then
          echo -e $Color"Instalando Programa Nishang."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install nishang
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "59help" ]; then
          echo -e $BrancoBAD"Sobre Nishang:"$ColorR
          echo -e $Branco"Nishang e uma estrutura e uma colecao de scripts"$ColorR
          echo -e $Branco"e cargas uteis que permite o uso do PowerShell"$ColorR
          echo -e $Branco"para seguranca ofensiva e pos-exploracao durante"$ColorR
          echo -e $Branco"testes de penetracao."$ColorR
          echo -e $Branco"Os scripts sao escritos com base na exigencia"$ColorR
          echo -e $Branco"do autor durante testes de penetracao reais."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/samratashok/nishang"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/nishang/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

      elif [ "$C" = "60" ]; then
          echo -e $Color"Instalando Programa Owasp-Mantra-Ff."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install owasp-mantra-ff
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "60help" ]; then
          echo -e $BrancoBAD"Sobre Owasp-Mantra-Ff:"$ColorR
          echo -e $Branco"Mantra e um navegador especialmente desenvolvido"$ColorR
          echo -e $Branco"para testes de seguranca de aplicacoes web."$ColorR
          echo -e $Branco"Ao ter um produto assim, mais pessoas"$ColorR
          echo -e $Branco"conhecerao a facilidade e flexibilidade"$ColorR
          echo -e $Branco"de poder seguir os procedimentos basicos"$ColorR
          echo -e $Branco"de teste dentro do navegador."$ColorR
          echo -e $Branco"A Mantra acredita que ter uma plataforma"$ColorR
          echo -e $Branco"tao portatil, facil de usar e ainda"$ColorR
          echo -e $Branco"assim poderosa pode ser util"$ColorR
          echo -e $Branco"para a industria."$ColorR
          echo -e $Branco"O Mantra tem muitas ferramentas integradas"$ColorR
          echo -e $Branco"para modificar cabecalhos, manipular"$ColorR
          echo -e $Branco"strings de entrada, reproduzir"$ColorR
          echo -e $Branco"solicitacoes GET/POST, editar cookies,"$ColorR
          echo -e $Branco"alternar rapidamente entre varios"$ColorR
          echo -e $Branco"proxies, controlar redirecionamentos"$ColorR
          echo -e $Branco"forcados etc. Isso o torna um bom software"$ColorR
          echo -e $Branco"para realizar verificacoes basicas"$ColorR
          echo -e $Branco"de seguranca e, as vezes, exploracao."$ColorR
          echo -e $Branco"Assim, o Mantra pode ser usado para resolver"$ColorR
          echo -e $Branco"niveis basicos de varios CTFs baseados"$ColorR
          echo -e $Branco"na web, mostrar problemas de seguranca"$ColorR
          echo -e $Branco"em aplicativos web vulneraveis, etc."$ColorR
          echo -e $BrancoBAD"Owasp-Mantra-Ff Homepage:"\
                            "https://www.owasp.org/index.php/OWASP_Mantra_-_Security_Framework"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/owasp-mantra-ff/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

      elif [ "$C" = "61" ]; then
          echo -e $Color"Instalando Programa Qsslcaudit."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install qsslcaudit
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "61help" ]; then
          echo -e $BrancoBAD"Sobre Qsslcaudit:"$ColorR
          echo -e $Branco"Essa ferramenta pode ser usada para determinar"$ColorR
          echo -e $Branco"se um aplicativo que usa TLS/SSL"$ColorR
          echo -e $Branco"para suas transferencias de dados"$ColorR
          echo -e $Branco"faz isso de maneira segura."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/gremwell/qsslcaudit"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/qsslcaudit/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

      elif [ "$C" = "62" ]; then
          echo -e $Color"Instalando Programa Sidguesser."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sidguesser
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "62help" ]; then
          echo -e $BrancoBAD"Sobre Sidguesser:"$ColorR
          echo -e $Branco"Adivinhar sids/instancias em um banco"$ColorR
          echo -e $Branco"de dados Oracle de acordo com um arquivo"$ColorR
          echo -e $Branco"de dicionario predefinido."$ColorR
          echo -e $Branco"A velocidade e lenta (80-100 palpites por segundo),"$ColorR
          echo -e $Branco"mas faz o trabalho."$ColorR
          echo -e $BrancoBAD"Sidguesser Homepage: http://www.cqure.net/wp/tools/database/sidguesser/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sidguesser/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "63" ]; then
          echo -e $Color"Instalando Programa Siege."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install siege
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "63help" ]; then
          echo -e $BrancoBAD"Sobre Siege:"$ColorR
          echo -e $Branco"Siege e um teste de regressao"$ColorR
          echo -e $Branco"e utilitario de referencia."$ColorR
          echo -e $Branco"Ele pode testar um unico URL com um numero"$ColorR
          echo -e $Branco"definido pelo usuario de usuarios simulados,"$ColorR
          echo -e $Branco"ou pode ler muitos URLs na memoria"$ColorR
          echo -e $Branco"e estressa-los simultaneamente."$ColorR
          echo -e $Branco"O programa informa o numero total de ocorrencias"$ColorR
          echo -e $Branco"registradas, bytes transferidos,"$ColorR
          echo -e $Branco"tempo de resposta, simultaneidade"$ColorR
          echo -e $Branco"e status de retorno."$ColorR
          echo -e $Branco"O Siege suporta protocolos HTTP/1.0 e 1.1,"$ColorR
          echo -e $Branco"as diretivas GET e POST, cookies, log"$ColorR
          echo -e $Branco"de transacoes e autenticacao basica."$ColorR
          echo -e $Branco"Seus recursos sao configuraveis ​​por usuario."$ColorR
          echo -e $Branco"Nota: este pacote contem siege com suporte"$ColorR
          echo -e $Branco"HTTPS ativado, portanto, torna o pacote"$ColorR
          echo -e $Branco"siege-ssl obsoleto agora."$ColorR
          echo -e $BrancoBAD"Siege Homepage: http://www.joedog.org/JoeDog/Siege"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/siege/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "64" ]; then
          echo -e $Color"Instalando Programa Redsocks."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install redsocks
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "64help" ]; then
          echo -e $BrancoBAD"Sobre Redsocks:"$ColorR
          echo -e $Branco"Redsocks e um daemon executado no sistema local,"$ColorR
          echo -e $Branco"que ira encapsular de forma transparente qualquer"$ColorR
          echo -e $Branco"conexao TCP atraves de um servidor proxy remoto"$ColorR
          echo -e $Branco"SOCKS4, SOCKS5 ou HTTP."$ColorR
          echo -e $Branco"Ele usa o recurso de redirecionamento do firewall"$ColorR
          echo -e $Branco"do sistema para interceptar conexoes TCP,"$ColorR
          echo -e $Branco"portanto, o redirecionamento e em todo"$ColorR
          echo -e $Branco"o sistema, com controle refinado e nao depende"$ColorR
          echo -e $Branco"de bibliotecas LD_PRELOAD."$ColorR
          echo -e $Branco"Redsocks suporta conexoes TCP de encapsulamento"$ColorR
          echo -e $Branco"e pacotes UDP."$ColorR
          echo -e $Branco"Possui suporte de autenticacao"$ColorR
          echo -e $Branco"para proxies SOCKS e HTTP."$ColorR
          echo -e $Branco"Tambem esta incluido um pequeno"$ColorR
          echo -e $Branco"servidor DNS retornando respostas"$ColorR
          echo -e $Branco"com o sinalizador “truncado” definido"$ColorR
          echo -e $Branco"para qualquer consulta UDP, forcando"$ColorR
          echo -e $Branco"o resolvedor a usar o TCP."$ColorR
          echo -e $BrancoBAD"Redsocks Homepage: http://darkk.net.ru/redsocks/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/redsocks/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "65" ]; then
          echo -e $Color"Instalando Programa Apache2."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install apache2
          apt-get -y install apache2-bin
          apt-get -y install apache2-data
          apt-get -y install apache2-dev
          apt-get -y install apache2-doc
          apt-get -y install apache2-ssl-dev
          apt-get -y install apache2-suexec-custom
          apt-get -y install apache2-suexec-pristine
          apt-get -y install apache2-utils
          apt-get -y install libapache2-mod-md
          apt-get -y install libapache2-mod-proxy-uwsgi
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "65help" ]; then
          echo -e $BrancoBAD"Sobre Apache2 e Adicionais:"$ColorR
          echo -e $BrancoBAD"Apache2:"$ColorR
          echo -e $Branco"O objetivo do Apache HTTP Server Project"$ColorR
          echo -e $Branco"e construir um servidor HTTP seguro, eficiente"$ColorR
          echo -e $Branco"e extensivel como software de codigo aberto"$ColorR
          echo -e $Branco"compativel com os padroes."$ColorR
          echo -e $Branco"O resultado tem sido o servidor"$ColorR
          echo -e $Branco"web numero um na Internet."$ColorR
          echo -e $Branco"A instalacao deste pacote resulta"$ColorR
          echo -e $Branco"em uma instalacao completa,"$ColorR
          echo -e $Branco"incluindo os arquivos de configuracao,"$ColorR
          echo -e $Branco"scripts de inicializacao"$ColorR
          echo -e $Branco"e scripts de suporte."$ColorR
          echo -e $BrancoBAD"apache2-bin:"$ColorR
          echo -e $Branco"Este pacote contem apenas os binarios"$ColorR
          echo -e $Branco"e nao configura uma instancia"$ColorR
          echo -e $Branco"de servidor web funcional."$ColorR
          echo -e $Branco"Instale o pacote “apache2” para obter"$ColorR
          echo -e $Branco"uma instancia totalmente funcional."$ColorR
          echo -e $BrancoBAD"apache2-data:"$ColorR
          echo -e $Branco"Este pacote contem arquivos comuns"$ColorR
          echo -e $Branco"independentes de arquitetura, como icones,"$ColorR
          echo -e $Branco"paginas de erro e arquivos"$ColorR
          echo -e $Branco"de indice estaticos."$ColorR
          echo -e $BrancoBAD"apache2-dev:"$ColorR
          echo -e $Branco"Este pacote fornece cabecalhos de desenvolvimento"$ColorR
          echo -e $Branco"e o binario apxs2 para o servidor Apache 2 HTTP,"$ColorR
          echo -e $Branco"util para desenvolver e vincular adicoes de terceiros"$ColorR
          echo -e $Branco"ao pacote do servidor Debian Apache HTTP."$ColorR
          echo -e $Branco"Ele tambem fornece complementos de sequencia dh_apache2"$ColorR
          echo -e $Branco"e dh uteis para instalar varias extensoes"$ColorR
          echo -e $Branco"Debian Apache2 com o debhelper."$ColorR
          echo -e $Branco"Ele suporta"$ColorR
          echo -e $Branco"* Configuracoes do modulo Apache 2 e objetos compartilhados."$ColorR
          echo -e $Branco"* Arquivos de configuracao do site."$ColorR
          echo -e $Branco"* Arquivos de configuracao global."$ColorR
          echo -e $BrancoBAD"apache2-doc:"$ColorR
          echo -e $Branco"Este pacote fornece a documentacao"$ColorR
          echo -e $Branco"para o servidor HTTP Apache 2."$ColorR
          echo -e $Branco"A documentacao e enviada em formato HTML"$ColorR
          echo -e $Branco"e pode ser acessada a partir de uma instancia"$ColorR
          echo -e $Branco"do servidor Apache HTTP em execucao local ou navegando"$ColorR
          echo -e $Branco"diretamente no sistema de arquivos."$ColorR
          echo -e $BrancoBAD"apache2-ssl-dev:"$ColorR
          echo -e $Branco"Este pacote fornece o cabecalho de desenvolvimento"$ColorR
          echo -e $Branco"e as dependencias para modulos que interagem"$ColorR
          echo -e $Branco"com o estado openssl interno do mod_ssl."$ColorR
          echo -e $BrancoBAD"apache2-suexec-custom:"$ColorR
          echo -e $Branco"Se voce nao precisar de configuracoes de raiz"$ColorR
          echo -e $Branco"de documento ou userdir nao padrao, e"$ColorR
          echo -e $Branco"recomendavel usar o programa auxiliar"$ColorR
          echo -e $Branco"padrao suexec do pacote apache2-suexec-pristine."$ColorR
          echo -e $BrancoBAD"apache2-suexec-pristine:"$ColorR
          echo -e $Branco"Fornece o programa auxiliar padrao suexec"$ColorR
          echo -e $Branco"para mod_suexec."$ColorR
          echo -e $Branco"Esta versao e compilada com a raiz"$ColorR
          echo -e $Branco"do documento /var/www e o sufixo userdir public_html."$ColorR
          echo -e $Branco"Se voce precisar de configuracoes diferentes,"$ColorR
          echo -e $Branco"use o pacote apache2-suexec-custom."$ColorR
          echo -e $BrancoBAD"apache2-utils:"$ColorR
          echo -e $Branco"Fornece alguns programas complementares uteis"$ColorR
          echo -e $Branco"para qualquer servidor web."$ColorR
          echo -e $BrancoBAD"Esses incluem:"$ColorR
          echo -e $Branco"* ab (ferramenta de benchmark do Apache)."$ColorR
          echo -e $Branco"* fcgistarter (Iniciar um programa FastCGI)."$ColorR
          echo -e $Branco"* logresolve (Resolva enderecos IP para nomes"$ColorR
          echo -e $Branco"de host em arquivos de log)."$ColorR
          echo -e $Branco"* htpasswd (Manipular arquivos de autenticacao basica)."$ColorR
          echo -e $Branco"* htdigest (Manipular arquivos de autenticacao digest)."$ColorR
          echo -e $Branco"* htdbm (Manipule arquivos de autenticacao"$ColorR
          echo -e $Branco"basica no formato DBM, usando APR)."$ColorR
          echo -e $Branco"* htcacheclean (Limpe o cache do disco)."$ColorR
          echo -e $Branco"* rotatelogs (interrompa periodicamente a gravacao"$ColorR
          echo -e $Branco"em um arquivo de log e abra um novo)"$ColorR
          echo -e $Branco"* split-logfile (dividir um unico log incluindo varios vhosts)."$ColorR
          echo -e $Branco"* checkgid (verifica se o chamador pode definir"$ColorR
          echo -e $Branco"o gid para o grupo especificado)"$ColorR
          echo -e $Branco"* check_forensic (Extrair a saida mod_log_forensic"$ColorR
          echo -e $Branco"dos arquivos de log do Apache)."$ColorR
          echo -e $Branco"* httxt2dbm (Gerar arquivos dbm"$ColorR
          echo -e $Branco"para uso com RewriteMap)"$ColorR
          echo -e $BrancoBAD"libapache2-mod-md:"$ColorR
          echo -e $Branco"Este e um pacote de transicao para o apache2"$ColorR
          echo -e $Branco"para usuarios do libapache2-mod-md."$ColorR
          echo -e $Branco"Ele pode ser removido com seguranca apos"$ColorR
          echo -e $Branco"a conclusao da instalacao."$ColorR
          echo -e $BrancoBAD"libapache2-mod-proxy-uwsgi:"$ColorR
          echo -e $Branco"Este e um pacote de transicao para o apache2"$ColorR
          echo -e $Branco"para usuarios de libapache2-mod-proxy-uwsgi."$ColorR
          echo -e $Branco"Ele pode ser removido com seguranca apos"$ColorR
          echo -e $Branco"a conclusao da instalacao."$ColorR
          echo -e $BrancoBAD"Apache2 Homepage: https://httpd.apache.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/apache2/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "66" ]; then
          echo -e $Color"Instalando Programa SlowHTTPTest."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install slowhttptest
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "66help" ]; then
          echo -e $BrancoBAD"Sobre SlowHTTPTest:"$ColorR
          echo -e $Branco"SlowHTTPTest e uma ferramenta altamente"$ColorR
          echo -e $Branco"configuravel que simula alguns ataques"$ColorR
          echo -e $Branco"de negacao de servico na camada de aplicacao."$ColorR
          echo -e $Branco"Ele implementa os ataques mais comuns de negacao"$ColorR
          echo -e $Branco"de servico da camada de aplicativo de baixa"$ColorR
          echo -e $Branco"largura de banda, como"$ColorR
          echo -e $Branco"* Slowloris."$ColorR
          echo -e $Branco"* POST HTTP lento."$ColorR
          echo -e $Branco"* Ataque de leitura lenta (com base na exploracao"$ColorR
          echo -e $Branco"do temporizador de persistencia TCP) drenando"$ColorR
          echo -e $Branco"o pool de conexoes simultaneas."$ColorR
          echo -e $Branco"* Ataque Apache Range Header, causando um"$ColorR
          echo -e $Branco"uso muito significativo"$ColorR
          echo -e $Branco"de memoria e CPU no servidor."$ColorR
          echo -e $Branco"$ slowhttptest."$ColorR
          echo -e $Branco"Github: https://github.com/shekyan/slowhttptest"$ColorR
          echo -e $Branco"Kali: https://www.kali.org/tools/slowhttptest/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "67" ]; then
          echo -e $Color"Instalando Programa Proxytunnel."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install proxytunnel
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "67help" ]; then
          echo -e $BrancoBAD"Sobre Proxytunnel:"$ColorR
          echo -e $Branco"Proxytunnel cria tuneis atraves de proxies HTTP(S)"$ColorR
          echo -e $Branco"para qualquer protocolo baseado em TCP."$ColorR
          echo -e $Branco"E util quando se esta atras de um firewall"$ColorR
          echo -e $Branco"que permite apenas trafego HTTP(S)."$ColorR
          echo -e $Branco"O programa conecta stdin e stdout a um servidor"$ColorR
          echo -e $Branco"de origem em algum lugar na Internet por meio"$ColorR
          echo -e $Branco"de um proxy HTTP ou HTTPS padrao do setor."$ColorR
          echo -e $Branco"Foi originalmente escrito como uma"$ColorR
          echo -e $Branco"extensao do SSH, para ser usado para SSH"$ColorR
          echo -e $Branco"em uma caixa em casa."$ColorR
          echo -e $Branco"Tambem e possivel usar proxytunnel"$ColorR
          echo -e $Branco"junto com outros aplicativos, executando-o"$ColorR
          echo -e $Branco"a partir do inetd ou como lista de daemon"$ColorR
          echo -e $Branco"em uma porta local a"$ColorR
          echo -e $Branco"ser encaminhada pelo tunel."$ColorR
          echo -e $BrancoBAD"Proxytunnel Homepage: https://proxytunnel.sourceforge.io/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/proxytunnel/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "68" ]; then
          echo -e $Color"Instalando Programa Tnscmd10g."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install tnscmd10g
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "68help" ]; then
          echo -e $BrancoBAD"Sobre Tnscmd10g:"$ColorR
          echo -e $Branco"Uma ferramenta para estimular o processo"$ColorR
          echo -e $Branco"oracle tnslsnr na porta 1521/tcp."$ColorR
          echo -e $BrancoBAD"Tnscmd10g Homepage: http://www.red-database-security.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/tnscmd10g/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas04

     elif [ "$C" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$C" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$C" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$C" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$C" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$C" = "P13" ]; then
          Programas13

     elif [ "$C" = "P12" ]; then
          Programas12

     elif [ "$C" = "P11" ]; then
          Programas11

     elif [ "$C" = "P10" ]; then
          Programas10

     elif [ "$C" = "P09" ]; then
          Programas09

     elif [ "$C" = "P08" ]; then
          Programas08

     elif [ "$C" = "P07" ]; then
          Programas07

     elif [ "$C" = "P06" ]; then
          Programas06

     elif [ "$C" = "P05" ]; then
          Programas05

     elif [ "$C" = "P04" ]; then
          Programas04

     elif [ "$C" = "P03" ]; then
          Programas03

     elif [ "$C" = "P02" ]; then
          Programas02

     elif [ "$C" = "P01" ]; then
          Programas01

     elif [ "$C" = "Programas01" ]; then
          Programas01

     elif [ "$C" = "Programas02" ]; then
          Programas02

     elif [ "$C" = "Programas03" ]; then
          Programas03

     elif [ "$C" = "Programas04" ]; then
          Programas04

     elif [ "$C" = "Programas05" ]; then
          Programas05

     elif [ "$C" = "Programas06" ]; then
          Programas06

     elif [ "$C" = "Programas07" ]; then
          Programas07

     elif [ "$C" = "Programas08" ]; then
          Programas08

     elif [ "$C" = "Programas09" ]; then
          Programas09

     elif [ "$C" = "Programas10" ]; then
          Programas10

     elif [ "$C" = "Programas11" ]; then
          Programas11

     elif [ "$C" = "Programas12" ]; then
          Programas12

     elif [ "$C" = "Programas13" ]; then
          Programas13

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Programas04
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Programas04
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Programas04
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Programas04
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Programas04
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Programas04
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas04
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas04
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas04
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas04
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas04
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas04
fi
}
Programas03B(){
echo -e $Color"\n\nAtaque a Redes sem Fio"$ColorR
echo -e $Color"
01) Aircrack-ng                35) Uhd-Host
1help Sobre Aircrack-ng        35help Sobre Uhd-Host
02) Asleap                     36) Uhd-Images
2help Sobre Asleap             36help Sobre Uhd-Images
03) Bluelog                    37) RFDump
3help Sobre Bluelog            37help Sobre RFDump
04) BlueRanger                 38) BlueZ
4help Sobre BlueRanger         38help Sobre BlueZ
05) Bluesnarfer                39) Btscanner
5help Sobre Bluesnarfer        39help Sobre Btscanner
06) Bully                      40) Ubertooth
6help Sobre Bully              40help Sobre Ubertooth
07) Cowpatty                   41) Airgeddon
7help sobre Cowpatty           41help Sobre Airgeddon
08) Crackle                    42) Hashcat
8help Sobre Crackle            42help Sobre Hashcat
09) Eapmd5pass                 43) Hostapd-Wpe
9help Sobre Eapmd5pass         43help Sobre Hostapd-Wpe
10) Fern Wifi Cracker          44) Iw
10help Sobre Fern Wifi Cracker 44help Sobre Iw
11) Spectools                  45) Mdk4
11help Sobre Spectools         45help Sobre Mdk4
12) Sakis3G
12help Sobre Sakis3G
13) Kalibrate-rtl
13help Sobre Kalibrate-rtl
14) KillerBee
14help Sobre KillerBee
15) Kismet
15help Sobre Kismet
16) Mdk3
16help Sobre Mdk3
17) Mfcuk
17help Sobre Mfcuk
18) Mfoc
18help Sobre Mfoc
19) Mfterm
19help Sobre Mfterm
20) Multimon-NG
20help Sobre Multimon-NG
21) PixieWPS
21help Sobre PixieWPS
22) Reaver
22help Sobre Reaver
23) Redfang
23help Sobre Redfang
24) Rtlsdr-Scanner
24help Sobre Rtlsdr-Scanner
25) Spooftooph
25help Sobre Spooftooph
26) Wifi-Honey
26help Sobre Wifi-Honey
27) Freeradius-Wpe
27help Sobre Freeradius-Wpe
28) Wifite
28help Sobre Wifite
29) Tshark
29help Sobre Tshark
30) Wifiphisher
30help Sobre Wifiphisher
31) Gr-Air-Modes
31help Sobre Gr-Air-Modes
32) HackRF
32help Sobre HackRF
33) Inspectrum
33help Sobre Inspectrum
34) Gnuradio
34help Sobre Gnuradio

"$ColorR

echo -e "\n"
echo -e $Verde"Install all Wireless Attacks tools"$ColorR
echo -e $Verde"(x) (Instalar Todas as ferramentas)"$ColorR
echo -e "\n\n"
}
PrompTProgramas03(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" F
}

All_Tools_03(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install aircrack-ng
apt-get -y install asleap
apt-get -y install bluez
apt-get -y install hostapd-wpe
apt-get -y install airgeddon
apt-get -y install ubertooth
apt-get -y install iw
apt-get -y install mdk3
apt-get -y install mdk4
apt-get -y install hashcat
apt-get -y install hashcat-data
apt-get -y install ubertooth-firmware
apt-get -y install ubertooth-firmware-source
apt-get -y install libubertooth-dev
apt-get -y install libubertooth1
apt-get -y install bluetooth
apt-get -y install btscanner
apt-get -y install bluez-cups
apt-get -y install bluez-hcidump
apt-get -y install bluez-meshd
apt-get -y install bluez-obexd
apt-get -y install bluez-source
apt-get -y install bluez-test-scripts
apt-get -y install bluez-test-tools
apt-get -y install libbluetooth-dev
apt-get -y install libbluetooth3
apt-get -y install bluelog
apt-get -y install rfdump
apt-get -y install gnuradio
apt-get -y install uhd-images
apt-get -y install inspectrum
apt-get -y install blueranger
apt-get -y install hackrf
apt-get -y install uhd-host
apt-get -y install bluesnarfer
apt-get -y install bully
apt-get -y install gr-air-modes
apt-get -y install cowpatty
apt-get -y install crackle
apt-get -y install eapmd5pass
apt-get -y install fern-wifi-cracker
apt-get -y install spectools
apt-get -y install sakis3g
apt-get -y install kalibrate-rtl
apt-get -y install kismet
apt-get -y install mfcuk
apt-get -y install mfoc
apt-get -y install mfterm
apt-get -y install multimon-ng
apt-get -y install pixiewps
apt-get -y install reaver
apt-get -y install redfang
apt-get -y install rtlsdr-scanner
apt-get -y install spooftooph
apt-get -y install wifi-honey
apt-get -y install freeradius-wpe
apt-get -y install wifite
apt-get -y install tshark
apt-get -y install git
apt-get -y install sudo
apt-get -y install python3
apt-get -y install python3-pip
sudo pip3 install scapy
sudo apt-get -y install python3-usb
sudo apt-get -y install libgcrypt-dev
cd ~/
git clone https://github.com/riverloopsec/killerbee.git
cd killerbee
python3 setup.py install
cd ~/
rm -rf killerbee
git clone https://github.com/wifiphisher/wifiphisher.git
cd wifiphisher
sudo python3 setup.py install\
cd ~/
rm -rf wifiphisher
}
Programas03(){
Programas03B
PrompTProgramas03
if [ "$F" = "01" ]; then
   F="1"
fi
if [ "$F" = "02" ]; then
   F="2"
fi
if [ "$F" = "03" ]; then
   F="3"
fi
if [ "$F" = "04" ]; then
   F="4"
fi
if [ "$F" = "05" ]; then
   F="5"
fi
if [ "$F" = "06" ]; then
   F="6"
fi
if [ "$F" = "07" ]; then
   F="7"
fi
if [ "$F" = "08" ]; then
   F="8"
fi
if [ "$F" = "09" ]; then
   F="9"
fi
while [ "$F" ];
do
  if [ "$F" ]; then
     if [ "$F" = "1" ]; then
        echo -e $Color"Instalando Programa Aircrack-ng."$Color
        apt-get -y update 1> /dev/null 2> /dev/null
        apt-get -y install aircrack-ng
        sleep 1
        echo -e $Color"Processo Finalizado."$ColorR
        sleep 1
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        PrompTProgramas03

     elif [ "$F" = "1help" ]; then
          echo -e $BrancoBAD"Sobre Aircrack-ng:"$ColorR
          echo -e $Branco"aircrack-ng e um programa de cracking 802.11a/b/g WEP/WPA"$ColorR
          echo -e $Branco"que pode recuperar uma chave WEP de 40 bits, 104 bits, 256 bits"$ColorR
          echo -e $Branco"ou 512 bits assim que pacotes criptografados suficientes forem coletados."$ColorR
          echo -e $Branco"Tambem pode atacar redes WPA1/2 com alguns metodos avancados"$ColorR
          echo -e $Branco"ou simplesmente por forca bruta."$ColorR
          echo -e $Branco"Ele implementa o ataque FMS padrao junto com algumas"$ColorR
          echo -e $Branco"otimizackes, tornando o ataque muito mais rapido em comparacao"$ColorR
          echo -e $Branco"com outras ferramentas de cracking WEP."$ColorR
          echo -e $Branco"Ele tambem pode usar totalmente um sistema"$ColorR
          echo -e $Branco"multiprocessador em toda a sua potencia para acelerar"$ColorR
          echo -e $Branco"o processo de craqueamento."$ColorR
          echo -e $Branco"aircrack-ng e um fork do aircrack, pois esse projeto"$ColorR
          echo -e $Branco"foi interrompido pelo mantenedor upstream."$ColorR
          echo -e $BrancoBAD"Aircrack-Ng Homepage: https://www.aircrack-ng.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/aircrack-ng/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
         sleep 1
         PrompTProgramas03

     elif [ "$F" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_03
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_03
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "2" ]; then
          echo -e $Color"Instalando Programa Asleap."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install asleap
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "2help" ]; then
          echo -e $BrancoBAD"Sobre Asleap:"$ColorR
          echo -e $Branco"Demonstra uma seria deficiencia em redes proprietarias"$ColorR
          echo -e $Branco"Cisco LEAP."$ColorR
          echo -e $BrancoBAD"Asleap Homepage: https://www.willhackforsushi.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/asleap/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "3" ]; then
          echo -e $Color"Instalando Programa Bluelog."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install bluelog
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "3help" ]; then
          echo -e $BrancoBAD"Sobre Bluelog:"$ColorR
          echo -e $Branco"Bluelog e um scanner Bluetooth projetado para informar"$ColorR
          echo -e $Branco"quantos dispositivos detectaveis ​​existem em uma area"$ColorR
          echo -e $Branco"o mais rapido possivel."$ColorR
          echo -e $Branco"Destina-se a ser usado como uma ferramenta"$ColorR
          echo -e $Branco"de pesquisa do local, identificando"$ColorR
          echo -e $Branco"o numero de possiveis alvos Bluetooth existentes no ambiente"$ColorR
          echo -e $Branco"circundante."$ColorR
          echo -e $BrancoBAD"Bluelog Homepage: http://www.digifail.com/software/bluelog.shtml"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/bluelog/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "4" ]; then
          echo -e $Color"Instalando Programa BlueRanger."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install blueranger
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "4help" ]; then
          echo -e $BrancoBAD"Sobre BlueRanger:"$ColorR
          echo -e $Branco"BlueRanger e um script Bash simples que usa Link"$ColorR
          echo -e $Branco"Quality para localizar radios de dispositivos Bluetooth."$ColorR
          echo -e $Branco"Ele envia pings l2cap (Bluetooth) para criar uma"$ColorR
          echo -e $Branco"conexao entre as interfaces Bluetooth, pois a maioria"$ColorR
          echo -e $Branco"dos dispositivos permite pings sem qualquer autenticacao"$ColorR
          echo -e $Branco"ou autorizacao."$ColorR
          echo -e $Branco"Quanto maior a qualidade do link, mais proximo"$ColorR
          echo -e $Branco"o dispositivo (em teoria)."$ColorR
          echo -e $Branco"Use um adaptador Bluetooth Classe 1"$ColorR
          echo -e $Branco"para deteccao de localizacao de longo alcance."$ColorR
          echo -e $Branco"Mude para um adaptador Classe 3 para uma localizacao"$ColorR
          echo -e $Branco"de curto alcance mais precisa."$ColorR
          echo -e $Branco"A precisao dependem da qualidade de construcao"$ColorR
          echo -e $Branco"do adaptador Bluetooth, interferencia e resposta"$ColorR
          echo -e $Branco"do dispositivo remoto."$ColorR
          echo -e $Branco"Podem ocorrer flutuacoes mesmo quando nenhum"$ColorR
          echo -e $Branco"dos dispositivos esta em movimento."$ColorR
          echo -e $BrancoBAD"Blueranger Homepage: http://www.hackfromacave.com/projects/blueranger.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/blueranger/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "5" ]; then
          echo -e $Color"Instalando Programa Bluesnarfer."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install bluesnarfer
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "5help" ]; then
          echo -e $BrancoBAD"Sobre Bluesnarfer:"$ColorR
          echo -e $Branco"Um utilitario bluesnarfing bluetooth."$ColorR
          echo -e $BrancoBAD"Bluesnarfer Homepage: http://www.alighieri.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/bluesnarfer/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                         "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "6" ]; then
          echo -e $Color"Instalando Programa Bully."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install bully
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                           "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "6help" ]; then
          echo -e $BrancoBAD"Sobre Bully:"$ColorR
          echo -e $Branco"Bully e uma nova implementacao"$ColorR
          echo -e $Branco"do ataque de forca bruta WPS, escrito em C."$ColorR
          echo -e $Branco"Ele e conceitualmente identico a outros programas, pois explora"$ColorR
          echo -e $Branco"a (agora bem conhecida) falha de projeto na especifica.ao WPS."$ColorR
          echo -e $Branco"Tem varias vantagens sobre o codigo original do reaver."$ColorR
          echo -e $Branco"Isso inclui menos dependencias, desempenho aprimorado"$ColorR
          echo -e $Branco"de memoria e CPU, manipulacao correta de endianness"$ColorR
          echo -e $Branco"e um conjunto de opcoes mais robusto."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/kimocoder/bully"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/bully/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "7" ]; then
          echo -e $Color"Instalando Programa Cowpatty."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cowpatty
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "7help" ]; then
          echo -e $BrancoBAD"Sobre Cowpatty:"$ColorR
          echo -e $Branco"Se voce estiver auditando redes WPA-PSK"$ColorR
          echo -e $Branco"ou WPA2-PSK, podera usar essa ferramenta"$ColorR
          echo -e $Branco"para identificar senhas fracas que foram"$ColorR
          echo -e $Branco"usadas para gerar o PMK."$ColorR
          echo -e $Branco"Forneca um arquivo de captura libpcap"$ColorR
          echo -e $Branco"que inclua o handshake de 4 vias, um arquivo"$ColorR
          echo -e $Branco"de dicionario de senhas para adivinhar"$ColorR
          echo -e $Branco"e o SSID para a rede."$ColorR
          echo -e $BrancoBAD"Cowpatty Homepage: https://www.willhackforsushi.com/?page_id=50"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cowpatty/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "8" ]; then
          echo -e $Color"Instalando Programa Crackle."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install crackle
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "8help" ]; then
          echo -e $BrancoBAD"Sobre Crackle:"$ColorR
          echo -e $Branco"O crackle explora uma falha no processo de emparelhamento"$ColorR
          echo -e $Branco"do BLE que permite que um invasor adivinhe"$ColorR
          echo -e $Branco"ou force rapidamente o TK (Chave Temporaria)."$ColorR
          echo -e $Branco"Com o TK e outros dados coletados do processo"$ColorR
          echo -e $Branco"de pareamento, o STK (Short Term Key) e posteriormente"$ColorR
          echo -e $Branco"o LTK (Long Term Key) podem ser coletados."$ColorR
          echo -e $Branco"Com o STK e o LTK, todas as comunicacoes entre"$ColorR
          echo -e $Branco"o mestre e o escravo podem ser descriptografadas"$ColorR
          echo -e $Branco"$ crackle."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/mikeryan/crackle"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/crackle/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "9" ]; then
          echo -e $Color"Instalando Programa Eapmd5pass."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install eapmd5pass
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "9help" ]; then
          echo -e $BrancoBAD"Sobre Eapmd5pass:"$ColorR
          echo -e $Branco"O EAP-MD5 e um mecanismo de autenticacao herdado"$ColorR
          echo -e $Branco"que nao oferece protecao suficiente para credenciais"$ColorR
          echo -e $Branco"de autenticacao de usuario."$ColorR
          echo -e $Branco"Os usuarios que se autenticam usando"$ColorR
          echo -e $Branco"EAP-MD5 estao sujeitos a uma vulnerabilidade de"$ColorR
          echo -e $Branco"ataque de dicionario offline."$ColorR
          echo -e $Branco"Essa ferramenta le de uma interface de rede ativa"$ColorR
          echo -e $Branco"no modo monitor ou de um arquivo"$ColorR
          echo -e $Branco"de captura libpcap armazenado e extrai as partes"$ColorR
          echo -e $Branco"da troca de autenticacao EAP-MD5."$ColorR
          echo -e $Branco"Depois que as partes de desafio e resposta"$ColorR
          echo -e $Branco"forem coletadas dessa troca, o eapmd5pass"$ColorR
          echo -e $Branco"montara um ataque de dicionario offline contra"$ColorR
          echo -e $Branco"a senha do usuario."$ColorR
          echo -e $BrancoBAD"Eapmd5pass Homepage: https://www.willhackforsushi.com/?page_id=67"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/eapmd5pass/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "10" ]; then
          echo -e $Color"Instalando Programa Fern Wifi Cracker."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install fern-wifi-cracker
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "10help" ]; then
          echo -e $BrancoBAD"Sobre Fern Wifi Cracker:"$ColorR
          echo -e $Branco"Este pacote contem um programa de software de auditoria"$ColorR
          echo -e $Branco"e ataque de seguranca sem fio escrito usando"$ColorR
          echo -e $Branco"a linguagem de programacao Python e a biblioteca"$ColorR
          echo -e $Branco"Python Qt GUI, o programa e capaz de quebrar"$ColorR
          echo -e $Branco"e recuperar chaves WEP/WPA/WPS e tambem"$ColorR
          echo -e $Branco"executar outros ataques baseados em rede em redes sem fio"$ColorR
          echo -e $Branco"ou baseadas em ethernet redes."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/savio-code/fern-wifi-cracker"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/fern-wifi-cracker/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "11" ]; then
          echo -e $Color"Instalando Programa Spectools."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install spectools
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                           "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "11help" ]; then
          echo -e $BrancoBAD"Sobre Spectools:"$ColorR
          echo -e $Branco"Spectrum-Tools e um conjunto de utilitarios"$ColorR
          echo -e $Branco"para usar as ferramentas de analise"$ColorR
          echo -e $Branco"de espectro USB Wi-Spy da Metageek LLC."$ColorR
          echo -e $Branco"Eles incluem drivers de espaco de usuario"$ColorR
          echo -e $Branco"para o hardware (implementados via libusb),"$ColorR
          echo -e $Branco"uma interface grafica construida em GTK/Cairo,"$ColorR
          echo -e $Branco"servidores de rede para dispositivos remotos"$ColorR
          echo -e $Branco"e utilitarios simples para desenvolver"$ColorR
          echo -e $Branco"ferramentas adicionais."$ColorR
          echo -e $BrancoBAD"Spectools Homepage: http://www.kismetwireless.net/spectools/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/spectools/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                           "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "12" ]; then
          echo -e $Color"Instalando Programa Sakis3G."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sakis3g
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "12help" ]; then
          echo -e $BrancoBAD"Sobre Sakis3G:"$ColorR
          echo -e $Branco"Sakis3G e um script de shell"$ColorR
          echo -e $Branco"ajustado que deve funcionar imediatamente"$ColorR
          echo -e $Branco"para estabelecer uma conexao 3G com qualquer"$ColorR
          echo -e $Branco"combinacao de modem ou operadora."$ColorR
          echo -e $Branco"Ele configura automaticamente seu modem USB"$ColorR
          echo -e $Branco"ou Bluetooth™ e pode atr detectar"$ColorR
          echo -e $Branco"as configuracoes do operador."$ColorR
          echo -e $Branco"Voce deve tentar quando"$ColorR
          echo -e $Branco"qualquer outra coisa falhar."$ColorR
          echo -e $Branco"$ sakis3g."$ColorR
          echo -e $BrancoBAD"Sakis3g Homepage: http://www.sakis3g.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sakis3g/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "13" ]; then
          echo -e $Color"Instalando Programa Kalibrate-rtl."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install kalibrate-rtl
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "13help" ]; then
          echo -e $BrancoBAD"Sobre Kalibrate-rtl:"$ColorR
          echo -e $Branco"Kalibrate, ou kal, pode procurar estacoes base GSM"$ColorR
          echo -e $Branco"em uma determinada banda de frequencia e pode usar"$ColorR
          echo -e $Branco"essas estacoes base GSM para calcular o deslocamento"$ColorR
          echo -e $Branco"de frequencia do oscilador local."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/steve-m/kalibrate-rtl"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/kalibrate-rtl/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "14" ]; then
          echo -e $Color"Instalando Programa KillerBee."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install git
          apt-get -y install python3
          apt-get -y install python3-pip
          sudo pip3 install scapy
          sudo apt-get -y install python3-usb
          sudo apt-get -y install libgcrypt-dev
          cd ~/
          git clone https://github.com/riverloopsec/killerbee.git
          cd killerbee
          python3 setup.py install
          cd ~/
          rm -rf killerbee
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "14help" ]; then
          echo -e $BrancoBAD"Sobre KillerBee:"$ColorR
          echo -e $Branco"Framework para exploracao de ZigBee"$ColorR
          echo -e $Branco"explorando e explorando a seguranca"$ColorR
          echo -e $Branco"de redes ZigBee e IEEE 802.15.4."$ColorR
          echo -e $Branco"Usando as ferramentas KillerBee e uma interface"$ColorR
          echo -e $Branco"de radio compativel com IEEE 802.15.4, voce pode"$ColorR
          echo -e $Branco"espionar redes ZigBee, reproduzir trafego, atacar"$ColorR
          echo -e $Branco"sistemas criptograficos e muito mais."$ColorR
          echo -e $Branco"Usando o framework KillerBee, voce pode construir"$ColorR
          echo -e $Branco"suas proprias ferramentas, implementar"$ColorR
          echo -e $Branco"ZigBee fuzzing, emular e atacar"$ColorR
          echo -e $Branco"dispositivos finais, roteadores"$ColorR
          echo -e $Branco"e coordenadores e muito mais."$ColorR
          echo -e $BrancoBAD"Gitlab: https://gitlab.com/kalilinux/packages/killerbee/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "15" ]; then
          echo -e $Color"Instalando Programa Kismet."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install kismet
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "15help" ]; then
          echo -e $BrancoBAD"Sobre Kismet:"$ColorR
          echo -e $Branco"Kismet e uma rede sem fio e detector"$ColorR
          echo -e $Branco"de dispositivos, farejador, ferramenta"$ColorR
          echo -e $Branco"de wardriving e estrutura WIDS"$ColorR
          echo -e $Branco"(deteccao de intrusao sem fio)."$ColorR
          echo -e $Branco"O Kismet funciona com interfaces Wi-Fi, interfaces"$ColorR
          echo -e $Branco"Bluetooth, alguns hardwares SDR (radio definido por software)"$ColorR
          echo -e $Branco"como o RTLSDR e outros hardwares de captura especializados."$ColorR
          echo -e $Branco"Este e um metapacote contendo as ferramentas kismet."$ColorR
          echo -e $BrancoBAD"Kismet Homepage: https://www.kismetwireless.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/kismet/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "16" ]; then
          echo -e $Color"Instalando Programa Mdk3."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install mdk3
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "16help" ]; then
          echo -e $BrancoBAD"Sobre Mdk3:"$ColorR
          echo -e $Branco"O MDK e uma ferramenta de"$ColorR
          echo -e $Branco"prova de conceito para explorar"$ColorR
          echo -e $Branco"os pontos fracos comuns do protocolo IEEE 802.11 (Wi-Fi)."$ColorR
          echo -e $BrancoBAD"Recursos:"$ColorR
          echo -e $Branco"* Filtros MAC Bruteforce."$ColorR
          echo -e $Branco"* SSIDs ocultos do Bruteforce"$ColorR
          echo -e $Branco"(algumas"$ColorR
          echo -e $Branco"pequenas listas de palavras SSID incluidas)."$ColorR
          echo -e $Branco"* Sonde as redes para verificar se podem ouvi-lo."$ColorR
          echo -e $Branco"* Intelligent Authentication-DoS para"$ColorR
          echo -e $Branco"congelar APs (com verificacoes de sucesso)."$ColorR
          echo -e $Branco"* FakeAP - Beacon Flooding com salto de canal"$ColorR
          echo -e $Branco"(pode travar"$ColorR
          echo -e $Branco"o NetStumbler e alguns drivers com bugs)"$ColorR
          echo -e $Branco"* Desconecte tudo (tambem conhecido como AMOK-MODE)"$ColorR
          echo -e $Branco"* com pacotes de desautenticacao e desassociacao."$ColorR
          echo -e $Branco"* Negacao de servico WPA TKIP."$ColorR
          echo -e $Branco"* WDS Confusion - Desliga"$ColorR
          echo -e $Branco"instalacoes multi-AP em grande escala."$ColorR
          echo -e $Branco"$ mdk3."$ColorR
          echo -e $BrancoBAD"Mdk3 Homepage: https://aspj.aircrack-ng.org/index.html#mdk3"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/mdk3/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "17" ]; then
          echo -e $Color"Instalando Programa Mfcuk."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install mfcuk
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "17help" ]; then
          echo -e $BrancoBAD"Sobre Mfcuk:"$ColorR
          echo -e $Branco"Toolkit contendo amostras e varias ferramentas"$ColorR
          echo -e $Branco"baseadas em e em torno de libnfc e crapto1, com enfase"$ColorR
          echo -e $Branco"em cartoes RFID Mifare Classic NXP/Philips."$ColorR
          echo -e $Branco"A enfase especial do kit de ferramentas esta no seguinte:"$ColorR
          echo -e $Branco"1. demonstracao/exploracao de fraqueza classica mifare."$ColorR
          echo -e $Branco"2. demonstrar o uso de libnfc (e leitores ACR122)."$ColorR
          echo -e $Branco"3. demonstrar o uso da implementacao do Crapto1"$ColorR
          echo -e $Branco"para confirmar o funcionamento interno"$ColorR
          echo -e $Branco"e verificar fraquezas/ataques teoricos/praticos."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/nfc-tools/mfcuk"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/mfcuk/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "18" ]; then
          echo -e $Color"Instalando Programa Mfoc."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install mfoc
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "18help" ]; then
          echo -e $BrancoBAD"Sobre Mfoc:"$ColorR
          echo -e $Branco"O MFOC e uma implementacao de codigo aberto"$ColorR
          echo -e $Branco"do ataque “offline aninhado” da Nethemba."$ColorR
          echo -e $Branco"Este programa permite recuperar chaves"$ColorR
          echo -e $Branco"de autenticacao do cartao MIFARE Classic."$ColorR
          echo -e $Branco"Observe que o MFOC e capaz de recuperar chaves"$ColorR
          echo -e $Branco"do destino somente se tiver uma chave conhecida:"$ColorR
          echo -e $Branco"uma chave padrao (codificada no MFOC) ou personalizada"$ColorR
          echo -e $Branco"(fornecida pelo usuario usando a linha de comando)."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/nfc-tools/mfoc"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/mfoc/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "19" ]; then
          echo -e $Color"Instalando Programa Mfterm."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install mfterm
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "19help" ]; then
          echo -e $BrancoBAD"Sobre Mfterm:"$ColorR
          echo -e $Branco"mfterm e uma interface de terminal para trabalhar"$ColorR
          echo -e $Branco"com tags Mifare Classic."$ColorR
          echo -e $Branco"A conclusao de tabulacao em comandos esta disponivel."$ColorR
          echo -e $Branco"Alem disso, os comandos que tem argumentos"$ColorR
          echo -e $Branco"de nome de arquivo fornecem conclusao"$ColorR
          echo -e $Branco"de tabulacao nos arquivos."$ColorR
          echo -e $Branco"Ha tambem um historico de comandos, como"$ColorR
          echo -e $Branco"na maioria dos shells normais."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/4ZM/mfterm"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/mfterm/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "20" ]; then
          echo -e $Color"Instalando Programa Multimon-NG."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install multimon-ng
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "20help" ]; then
          echo -e $BrancoBAD"Sobre Multimon-NG:"$ColorR
          echo -e $Branco"O sucessor do multimon, com suporte para mais"$ColorR
          echo -e $Branco"modos e compatibilidade aprimorada com sistemas modernos."$ColorR
          echo -e $Branco"Ele decodifica os seguintes modos de transmissao"$ColorR
          echo -e $Branco"digital comumente encontrados em bandas VHF/UHF:"$ColorR
          echo -e $Branco"POCSAG512 POCSAG1200 POCSAG2400 FLEX EAS UFSK1200"$ColorR
          echo -e $Branco"CLIPFSK AFSK1200 AFSK2400 AFSK2400_2 AFSK2400_3"$ColorR
          echo -e $Branco"HAPN4800 FSK9600 DTMF ZVEI1 ZVEI2 ZVEI3 DZVEI"$ColorR
          echo -e $Branco"PZVEI EEA EIA CCIR MORSE CW X10"$ColorR
          echo -e $Branco"Varios decodificadores podem ser executados"$ColorR
          echo -e $Branco"simultaneamente no mesmo sinal, que e"$ColorR
          echo -e $Branco"fornecido por meio de um arquivo ou pipe."$ColorR
          echo -e $Branco"As configuracoes comuns sao:"$ColorR
          echo -e $Branco"um radio conectado atraves de uma"$ColorR
          echo -e $Branco"placa de som (pode exigir modificacoes no radio);"$ColorR
          echo -e $Branco"amostras fornecidas por meio de um coletor"$ColorR
          echo -e $Branco"de radio GNU ou o fluxo de audio UDP"$ColorR
          echo -e $Branco"em gqrx (via netcat e sox)."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/EliasOenal/multimon-ng/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/multimon-ng/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "21" ]; then
          echo -e $Color"Instalando Programa PixieWPS."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install pixiewps
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "21help" ]; then
          echo -e $BrancoBAD"Sobre PixieWPS:"$ColorR
          echo -e $Branco"Pixiewps e uma ferramenta escrita em C usada"$ColorR
          echo -e $Branco"para bruteforce offline o pino WPS explorando"$ColorR
          echo -e $Branco"a entropia baixa ou inexistente"$ColorR
          echo -e $Branco"de alguns APs (pixie dust attack)."$ColorR
          echo -e $Branco"Destina-se apenas para fins educacionais."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/wiire/pixiewps"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/pixiewps/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "22" ]; then
          echo -e $Color"Instalando Programa Reaver."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install reaver
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "22help" ]; then
          echo -e $BrancoBAD"Sobre Reaver:"$ColorR
          echo -e $Branco"O Reaver executa um ataque de forca bruta"$ColorR
          echo -e $Branco"contra o numero do pino de configuracao protegida"$ColorR
          echo -e $Branco"por WiFi de um ponto de acesso."$ColorR
          echo -e $Branco"Uma vez que o pino WPS e encontrado, o WPA PSK"$ColorR
          echo -e $Branco"pode ser recuperado e, alternativamente, as"$ColorR
          echo -e $Branco"configuracoes sem fio do AP"$ColorR
          echo -e $Branco"podem ser reconfiguradas."$ColorR
          echo -e $Branco"$ reaver."$ColorR
          echo -e $Branco"$ wash."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/t6x/reaver-wps-fork-t6x"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/reaver/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "23" ]; then
          echo -e $Color"Instalando Programa Redfang."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install redfang
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "23help" ]; then
          echo -e $BrancoBAD"Sobre Redfang:"$ColorR
          echo -e $Branco"fang e um pequeno aplicativo de prova de conceito"$ColorR
          echo -e $Branco"para encontrar dispositivos bluetooth nao detectaveis."$ColorR
          echo -e $Branco"Isso e feito por forca bruta nos ultimos"$ColorR
          echo -e $Branco"seis (6) bytes do endereco bluetooth do dispositivo"$ColorR
          echo -e $Branco"e fazendo um read_remote_name()."$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/redfang/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "24" ]; then
          echo -e $Color"Instalando Programa Rtlsdr-Scanner."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rtlsdr-scanner
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "24help" ]; then
          echo -e $BrancoBAD"Sobre Rtlsdr-Scanner:"$ColorR
          echo -e $Branco"Uma GUI de varredura de frequencia Python de plataforma"$ColorR
          echo -e $Branco"cruzada para a biblioteca OsmoSDR rtl-sdr."$ColorR
          echo -e $Branco"O scanner tenta superar a resposta de frequencia"$ColorR
          echo -e $Branco"do sintonizador calculando a mdia das varreduras"$ColorR
          echo -e $Branco"dos deslocamentos de frequencia positivos e negativos"$Branco
          echo -e $Branco"dos dados de banda base."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/CdeMills/RTLSDR-Scanner"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rtlsdr-scanner/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "25" ]; then
          echo -e $Color"Instalando Programa Spooftooph."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install spooftooph
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "25help" ]; then
          echo -e $BrancoBAD"Sobre Spooftooph:"$ColorR
          echo -e $Branco"O Spooftooph foi projetado para automatizar a"$ColorR
          echo -e $Branco"falsificacao ou clonagem do nome, classe e endereco"$ColorR
          echo -e $Branco"do dispositivo Bluetooth."$ColorR
          echo -e $Branco"A clonagem dessas informacoes permite que o"$ColorR
          echo -e $Branco"dispositivo Bluetooth se esconda em um site simples."$ColorR
          echo -e $Branco"O software de rastreamento Bluetooth listara"$ColorR
          echo -e $Branco"apenas um dos dispositivos se mais de um dispositivo"$ColorR
          echo -e $Branco"no alcance compartilhar as mesmas informacoes"$ColorR
          echo -e $Branco"do dispositivo quando os dispositivos estiverem"$ColorR
          echo -e $Branco"no modo detectavel"$ColorR
          echo -e $Branco"(especificamente o mesmo endereco)."$ColorR
          echo -e $BrancoBAD"Spooftooph Homepage: http://www.hackfromacave.com/projects/spooftooph.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/spooftooph/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "26" ]; then
          echo -e $Color"Instalando Programa Wifi-Honey."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install wifi-honey
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "26help" ]; then
          echo -e $BrancoBAD"Sobre Wifi-Honey:"$ColorR
          echo -e $Branco"No caso do WPA/WPA2, executando airodump-ng ao"$ColorR
          echo -e $Branco"lado disso, voce tambem acaba capturando"$ColorR
          echo -e $Branco"os dois primeiros pacotes do handshake"$ColorR
          echo -e $Branco"de quatro vias e, portanto, pode tentar quebrar"$ColorR
          echo -e $Branco"a chave com aircrack-ng ou coWPAtty."$ColorR
          echo -e $Branco"O que esse script faz e automatizar"$ColorR
          echo -e $Branco"o processo de configuracao, ele cria"$ColorR
          echo -e $Branco"cinco interfaces de modo monitor, quatro"$ColorR
          echo -e $Branco"sao usadas como APs e a quinta e usada para airodump-ng."$ColorR
          echo -e $Branco"Para facilitar as coisas, em vez de ter cinco"$ColorR
          echo -e $Branco"janelas, tudo isso e feito em uma sessao"$ColorR
          echo -e $Branco"de tela que permite alternar entre as telas"$ColorR
          echo -e $Branco"para ver o que esta acontecendo."$ColorR
          echo -e $Branco"Todas as sessoes sao rotuladas"$ColorR
          echo -e $Branco"para que voce saiba qual e qual."$ColorR
          echo -e $Branco"$ wifi-honey."$ColorR
          echo -e $BrancoBAD"Wifi-Honey Homepage: https://www.digininja.org/projects/wifi_honey.php"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/wifi-honey/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "27" ]; then
          echo -e $Color"Instalando Programa Freeradius-Wpe."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install freeradius-wpe
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "27help" ]; then
          echo -e $BrancoBAD"Sobre Freeradius-Wpe:"$ColorR
          echo -e $Branco"Este pacote e FreeRadius"$ColorR
          echo -e $Branco"Wireless Pawn Edition."$ColorR
          echo -e $Branco"Existem Tipos EAP/Metodos de Autenticacao"$ColorR
          echo -e $Branco"Interna suportados e testados"$ColorR
          echo -e $Branco"(outros tambem podem funcionar):"$ColorR
          echo -e $Branco"* PEAP/PAP (OTP)."$ColorR
          echo -e $Branco"* PEAP/MSCHAPv2."$ColorR
          echo -e $Branco"* EAP-TTLS/PAP (inclui OTPs)."$ColorR
          echo -e $Branco"* EAP-TTLS/MSCHAPv1."$ColorR
          echo -e $Branco"* EAP-TTLS/MSCHAPv2."$ColorR
          echo -e $Branco"* EAP-MD5."$ColorR
          echo -e $BrancoBAD"Freeradius-Wpe Homepage: https://www.freeradius.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/freeradius-wpe/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "28" ]; then
          echo -e $Color"Instalando Programa Wifite."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install wifite
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "28help" ]; then
          echo -e $BrancoBAD"Sobre Wifite:"$ColorR
          echo -e $Branco"Wifite e uma ferramenta para auditar redes sem"$ColorR
          echo -e $Branco"fio criptografadas WEP ou WPA."$ColorR
          echo -e $Branco"Ele usa ferramentas aircrack-ng, pyrit, reaver, tshark"$ColorR
          echo -e $Branco"para realizar a auditoria."$ColorR
          echo -e $Branco"Essa ferramenta e personalizavel para ser automatizada"$ColorR
          echo -e $Branco"com apenas alguns argumentos e pode ser confiavel"$ColorR
          echo -e $Branco"para ser executada sem supervisao."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/kimocoder/wifite2"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/wifite/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "29" ]; then
          echo -e $Color"Instalando Programa Tshark."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install tshark
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "29help" ]; then
          echo -e $BrancoBAD"Sobre Tshark:"$ColorR
          echo -e $Branco"analisador de trafego de rede - versao do console"$ColorR
          echo -e $Branco"Wireshark e um “sniffer” de rede - uma ferramenta"$ColorR
          echo -e $Branco"que captura e analisa pacotes fora do fio."$ColorR
          echo -e $Branco"O Wireshark pode decodificar muitos protocolos para listar aqui."$ColorR
          echo -e $Branco"Este pacote fornece a versao de console"$ColorR
          echo -e $Branco"do wireshark, chamada “tshark”."$ColorR
          echo -e $BrancoBAD"Homepage: http://www.wireshark.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/wireshark/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "30" ]; then
          echo -e $Color"Instalando Programa Wifiphisher."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dnsmasq
          apt-get -y install python3
          apt-get -y install sudo
          cd ~/
          apt-get -y install git
          git clone https://github.com/wifiphisher/wifiphisher.git
          cd wifiphisher
          sudo python3 setup.py install
          cd ~/
          rm -rf wifiphisher
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "30help" ]; then
          echo -e $BrancoBAD"Sobre Wifiphisher:"$ColorR
          echo -e $Branco"Wifiphisher e uma estrutura de ponto de acesso"$ColorR
          echo -e $Branco"desonesto para conduzir compromissos de equipe vermelha"$ColorR
          echo -e $Branco"ou testes de seguranca de Wi-Fi."$ColorR
          echo -e $Branco"Usando o Wifiphisher, os testadores de penetracao"$ColorR
          echo -e $Branco"podem facilmente alcancar uma posicao intermediaria"$ColorR
          echo -e $Branco"contra clientes sem fio executando ataques"$ColorR
          echo -e $Branco"de associacao de Wi-Fi direcionados."$ColorR
          echo -e $Branco"O Wifiphisher pode ser usado ainda para montar"$ColorR
          echo -e $Branco"ataques de phishing da Web personalizados para a vitima"$ColorR
          echo -e $Branco"contra os clientes conectados para capturar"$ColorR
          echo -e $Branco"credenciais (por exemplo, de paginas de login de terceiros"$ColorR
          echo -e $Branco"ou chaves pre-compartilhadas WPA/WPA2) ou infectar"$ColorR
          echo -e $Branco"as estacoes vitimas com malwares."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/wifiphisher/wifiphisher"$ColorR
          echo -e $BrancoBAD"Wifiphisher Homepage: https://wifiphisher.org/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "31" ]; then
          echo -e $Color"Instalando Programa Gr-Air-Modes."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install gr-air-modes
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "31help" ]; then
          echo -e $BrancoBAD"Sobre Gr-Air-Modes:"$ColorR
          echo -e $Branco"Um receptor de radio definido por software"$ColorR
          echo -e $Branco"para sinais de transponder Modo S, incluindo relatorios ADS-B"$ColorR
          echo -e $Branco"de aeronaves equipadas."$ColorR
          echo -e $Branco"Varios formatos de saida sao suportados:"$ColorR
          echo -e $Branco"* Saida bruta (ou minimamente processada) de dados de pacote."$ColorR
          echo -e $Branco"* Texto analisado."$ColorR
          echo -e $Branco"* banco de dados SQLite."$ColorR
          echo -e $Branco"* KML para uso com o Google Earth."$ColorR
          echo -e $Branco"* Saida compativel com SBS-1 para uso com, por exemplo,"$ColorR
          echo -e $Branco"PlanePlotter ou Servidor de Radar Virtual."$ColorR
          echo -e $Branco"* Interface multijogador FlightGear para exibicao"$ColorR
          echo -e $Branco"em tempo real do trafego dentro do simulador."$ColorR
          echo -e $Branco"$ modes_rx."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/bistromath/gr-air-modes"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/gr-air-modes/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "32" ]; then
          echo -e $Color"Instalando Programa HackRF."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hackrf
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "32help" ]; then
          echo -e $BrancoBAD"Sobre HackRF:"$ColorR
          echo -e $Branco"HackRF e um radio definido por software"$ColorR
          echo -e $Branco"de codigo aberto que pode receber e transmitir"$ColorR
          echo -e $Branco"entre 30 MHz e 6 GHz. "$ColorR
          echo -e $Branco"HackRF tem uma largura de banda de 20 MHz."$ColorR
          echo -e $Branco"E um dispositivo USB de alta velocidade"$ColorR
          echo -e $Branco"alimentado pelo barramento USB."$ColorR
          echo -e $Branco"Este pacote contem um conjunto"$ColorR
          echo -e $Branco"de utilitarios de linha de comando:"$ColorR
          echo -e $Branco"$ hackrf_cpldjtag: programa CLPD."$ColorR
          echo -e $Branco"$ hackrf_info: dispositivo de sonda"$ColorR
          echo -e $Branco"e configuracao de exibicao."$ColorR
          echo -e $Branco"$ hackrf_max2837: ferramenta de leitura/gravacao"$ColorR
          echo -e $Branco"de registro de chip."$ColorR
          echo -e $Branco"$ hackrf_rffc5071: ferramenta de leitura/gravacao"$ColorR
          echo -e $Branco"de registro de chip."$ColorR
          echo -e $Branco"$ hackrf_si5351c: ferramenta de leitura/gravacao"$ColorR
          echo -e $Branco"de registro de chip."$ColorR
          echo -e $Branco"$ hackrf_spiflash: le e grava dados flash do arquivo."$ColorR
          echo -e $Branco"$ hackrf_transfer: transmissao e recepcao"$ColorR
          echo -e $Branco"baseada em arquivo sdr."$ColorR
          echo -e $BrancoBAD"HackRF Homepage: http://greatscottgadgets.com/hackrf/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hackrf/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "33" ]; then
          echo -e $Color"Instalando Programa Inspectrum."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install inspectrum
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "33help" ]; then
          echo -e $BrancoBAD"Sobre Inspectrum:"$ColorR
          echo -e $Branco"inspectrum e uma ferramenta para analisar sinais"$ColorR
          echo -e $Branco"capturados, principalmente de receptores"$ColorR
          echo -e $Branco"de radio definidos por software."$ColorR
          echo -e $Branco"O inspectrum suporta os seguintes tipos de arquivo:"$ColorR
          echo -e $Branco"*.cf32, *.cfile - Ponto flutuante complexo de 32 bits"$ColorR
          echo -e $Branco"(GNURadio, osmocom_fft) *.cs16 - Inteiro complexo"$ColorR
          echo -e $Branco"com sinal de 16 bits (BladeRF)"$ColorR
          echo -e $Branco"*.cs8 - Inteiro complexo com sinal de 8 bits (  HackRF)"$ColorR
          echo -e $Branco"*.cu8 - Inteiro complexo sem sinal de 8 bits (RTL-SDR)"$ColorR
          echo -e $BrancoBAD"Caracteristicas:"$ColorR
          echo -e $Branco"* Suporte a arquivos grandes (100 GB+)."$ColorR
          echo -e $Branco"* Espectrograma com zoom/pan."$ColorR
          echo -e $Branco"* Graficos de amplitude, frequencia, fase e amostras de QI."$ColorR
          echo -e $Branco"* Cursores para medicao de periodo, taxa de simbolos"$ColorR
          echo -e $Branco"e extracao de simbolos."$ColorR
          echo -e $Branco"* Exportacao do periodo de tempo selecionado, amostras"$ColorR
          echo -e $Branco"filtradas e dados demodulados."$ColorR
          echo -e $Branco"$ inspectrum."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/miek/inspectrum"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/inspectrum/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "34" ]; then
          echo -e $Color"Instalando Programa Gnuradio."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install gnuradio
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "34help" ]; then
          echo -e $BrancoBAD"Sobre Gnuradio:"$ColorR
          echo -e $Branco"GNU Radio fornece blocos de processamento de sinal"$ColorR
          echo -e $Branco"para implementar radios de software."$ColorR
          echo -e $Branco"Ele pode ser usado com hardware de RF externo de baixo"$ColorR
          echo -e $Branco"custo prontamente disponivel para criar radios definidos"$ColorR
          echo -e $Branco"por software ou sem hardware em um ambiente semelhante"$ColorR
          echo -e $Branco"a simulacao."$ColorR
          echo -e $Branco"E amplamente utilizado em ambientes amadores, academicos"$ColorR
          echo -e $Branco"e comerciais para dar suporte a pesquisas de comunicacoes"$ColorR
          echo -e $Branco"sem fio e sistemas de radio do mundo real."$ColorR
          echo -e $Branco"Os aplicativos GNU Radio sao escritos principalmente"$ColorR
          echo -e $Branco"usando a linguagem de programacao Python, enquanto"$ColorR
          echo -e $Branco"o caminho de processamento de sinal de desempenho"$ColorR
          echo -e $Branco"critico fornecido e implementado em C++ usando"$ColorR
          echo -e $Branco"extensoes de ponto flutuante do processador,"$ColorR
          echo -e $Branco"quando disponiveis."$ColorR
          echo -e $Branco"Assim, o desenvolvedor e capaz de implementar sistemas"$ColorR
          echo -e $Branco"de radio de alto rendimento em tempo real"$ColorR
          echo -e $Branco"em um ambiente de desenvolvimento de aplicativos"$ColorR
          echo -e $Branco"simples de usar e rapido."$ColorR
          echo -e $Branco"Embora nao seja principalmente uma ferramenta"$ColorR
          echo -e $Branco"de simulacao, o GNU Radio suporta o desenvolvimento"$ColorR
          echo -e $Branco"de algoritmos de processamento de sinal usando dados"$ColorR
          echo -e $Branco"pre-gravados ou gerados, evitando a necessidade"$ColorR
          echo -e $Branco"de hardware de RF real."$ColorR
          echo -e $Branco"Este pacote contem o gnuradio-companion, uma ferramenta"$ColorR
          echo -e $Branco"grafica para criar graficos de fluxo de sinal e gerar"$ColorR
          echo -e $Branco"codigo fonte de grafico de fluxo."$ColorR
          echo -e $Branco"Tambem esta incluida uma variedade de ferramentas"$ColorR
          echo -e $Branco"e programas utilitarios:"$ColorR
          echo -e $Branco"$ dial_tone."$ColorR
          echo -e $Branco"$ gnuradio-config-info."$ColorR
          echo -e $Branco"$ gr_filter_design."$ColorR
          echo -e $Branco"$ gr_plot_const."$ColorR
          echo -e $Branco"$ gr_plot_psd."$ColorR
          echo -e $Branco"$ grcc."$ColorR
          echo -e $Branco"$ uhd_fft."$ColorR
          echo -e $Branco"$ uhd_siggen."$ColorR
          echo -e $Branco"$ display_qt."$ColorR
          echo -e $Branco"$ gr-ctrlport-monitor."$ColorR
          echo -e $Branco"$ gr_modtool."$ColorR
          echo -e $Branco"$ gr_plot_fft."$ColorR
          echo -e $Branco"$ gr_plot_qt."$ColorR
          echo -e $Branco"$ polar_channel_construction."$ColorR
          echo -e $Branco"$ uhd_rx_cfile."$ColorR
          echo -e $Branco"$ uhd_siggen_gui."$ColorR
          echo -e $Branco"$ gnuradio-companion."$ColorR
          echo -e $Branco"$ gr-perf-monitorx."$ColorR
          echo -e $Branco"$ gr_plot."$ColorR
          echo -e $Branco"$ gr_plot_iq."$ColorR
          echo -e $Branco"$ gr_read_file_metadata."$ColorR
          echo -e $Branco"$ tags_demo."$ColorR
          echo -e $Branco"$ uhd_rx_nogui."$ColorR
          echo -e $BrancoBAD"Gnuradio Homepage: https://www.gnuradio.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/gnuradio/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "35" ]; then
          echo -e $Color"Instalando Programa Uhd-Host."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install uhd-host
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "35help" ]; then
          echo -e $BrancoBAD"Sobre Uhd-Host:"$ColorR
          echo -e $Branco"Utilitarios de host para o Universal Hardware Driver"$ColorR
          echo -e $Branco"para produtos Ettus Research."$ColorR
          echo -e $Branco"Os dispositivos suportados fornecem hardware"$ColorR
          echo -e $Branco"de receptor e transmissor de radio analogico juntamente"$ColorR
          echo -e $Branco"com interfaces digitais para obter sinais de e"$ColorR
          echo -e $Branco"para um radio definido por software executado"$Color
          echo -e $Branco"no computador host."$ColorR
          echo -e $Branco"Este pacote inclui o aplicativo uhd_find_devices"$ColorR
          echo -e $Branco"para localizar e configurar perifericos conectados,"$ColorR
          echo -e $Branco"o aplicativo uhd_usrp_probe para exibir informacoes"$ColorR
          echo -e $Branco"de configuracao de hardware e documentacao"$ColorR
          echo -e $Branco"gerada pelo Doxygen."$ColorR
          echo -e $BrancoBAD"Uhd-Host Homepage:"\
                                                   "https://www.ettus.com/sdr-software/uhd-usrp-hardware-driver/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/uhd/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "36" ]; then
          echo -e $Color"Instalando Programa Uhd-Images."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install uhd-images
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03


     elif [ "$F" = "36help" ]; then
          echo -e $BrancoBAD"Sobre Uhd-Images:"$ColorR
          echo -e $Branco"Varias imagens UHD."$ColorR
          echo -e $BrancoBAD"Uhd-Images Homepage: https://www.ettus.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/uhd-images/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "37" ]; then
          echo -e $Color"Instalando Programa RFDump."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rfdump
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "37help" ]; then
          echo -e $BrancoBAD"Sobre RFDump:"$ColorR
          echo -e $Branco"RFDump e uma ferramenta para decodificar"$ColorR
          echo -e $Branco"etiquetas RFID e mostrar suas meta-informacoes:"$ColorR
          echo -e $Branco"ID da etiqueta, tipo de etiqueta, fabricante etc."$ColorR
          echo -e $Branco"A memoria de dados do usuario de uma etiqueta"$ColorR
          echo -e $Branco"pode ser exibida e modificada usando"$ColorR
          echo -e $Branco"um editor hexadecimal ou ASCII."$ColorR
          echo -e $Branco"Alem disso, o recurso de cookie integrado"$ColorR
          echo -e $Branco"demonstra como e facil para uma empresa abusar"$ColorR
          echo -e $Branco"da tecnologia RFID para espionar seus clientes."$ColorR
          echo -e $Branco"O RFDump funciona com o leitor multi-tag"$ColorR
          echo -e $Branco"ACG ou hardware de leitor de cartao similar."$ColorR
          echo -e $Branco"$ rfdump."$ColorR
          echo -e $BrancoBAD"RFDump Homepage: http://www.rfdump.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rfdump/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "38" ]; then
          echo -e $Color"Instalando Programa BlueZ."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install bluez
          apt-get -y install bluetooth
          apt-get -y install bluez-cups
          apt-get -y install bluez-hcidump
          apt-get -y install bluez-meshd
          apt-get -y install bluez-obexd
          apt-get -y install bluez-source
          apt-get -y install bluez-test-scripts
          apt-get -y install bluez-test-tools
          apt-get -y install libbluetooth-dev
          apt-get -y install libbluetooth3
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "38help" ]; then
          echo -e $BrancoBAD"Sobre BlueZ:"$ColorR
          echo -e $Branco"Este pacote contem ferramentas e daemons"$ColorR
          echo -e $Branco"do sistema para usar dispositivos Bluetooth."$ColorR
          echo -e $Branco"BlueZ e a pilha oficial de protocolos Bluetooth do Linux."$ColorR
          echo -e $Branco"E um projeto Open Source distribuido sob a GNU General Public License (GPL)."$ColorR
          echo -e $BrancoBAD"BlueZ:"$ColorR
          echo -e $Branco"$ bluemoon."$ColorR
          echo -e $Branco"$ btattach."$ColorR
          echo -e $Branco"$ ciptool."$ColorR
          echo -e $Branco"$ hciconfig."$ColorR
          echo -e $Branco"$ l2ping."$ColorR
          echo -e $Branco"$ obexctl."$ColorR
          echo -e $Branco"$ sdptool."$ColorR
          echo -e $Branco"$ bluetoothctl."$ColorR
          echo -e $Branco"$ btmgmt."$ColorR
          echo -e $Branco"$ gatttool."$ColorR
          echo -e $Branco"$ hcitool."$ColorR
          echo -e $Branco"$ l2test."$ColorR
          echo -e $Branco"$ rctest."$ColorR
          echo -e $Branco"$ bluetoothd."$ColorR
          echo -e $Branco"$ btmon."$ColorR
          echo -e $Branco"$ hciattach."$ColorR
          echo -e $Branco"$ hex2hcd."$ColorR
          echo -e $Branco"$ mpris-proxy."$ColorR
          echo -e $Branco"$ rfcomm."$ColorR
          echo -e $BrancoBAD"bluez-hcidump:"$ColorR
          echo -e $Branco"$ hcidump."$ColorR
          echo -e $BrancoBAD"bluez-meshd:"$ColorR
          echo -e $Branco"$ mesh-cfgclient."$ColorR
          echo -e $Branco"$ mesh-cfgtest."$ColorR
          echo -e $Branco"$ meshctl."$ColorR
          echo -e $BrancoBAD"bluez-test-tools:"$ColorR
          echo -e $Branco"$ b1ee."$ColorR
          echo -e $Branco"$ gap-tester."$ColorR
          echo -e $Branco"$ l2cap-tester."$ColorR
          echo -e $Branco"$ sco-tester."$ColorR
          echo -e $Branco"$ bnep-tester."$ColorR
          echo -e $Branco"$ hci-tester."$ColorR
          echo -e $Branco"$ mgmt-tester."$ColorR
          echo -e $Branco"$ smp-tester."$ColorR
          echo -e $Branco"$ btvirt."$ColorR
          echo -e $Branco"$ hfp."$ColorR
          echo -e $Branco"$ rfcomm-tester."$ColorR
          echo -e $Branco"$ userchan-tester."$ColorR
          echo -e $BrancoBAD"BlueZ Homepage: http://www.bluez.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/bluez/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "39" ]; then
          echo -e $Color"Instalando Programa Btscanner."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install btscanner
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "39help" ]; then
          echo -e $BrancoBAD"Sobre Btscanner:"$ColorR
          echo -e $Branco"O btscanner e uma ferramenta projetada especificamente"$ColorR
          echo -e $Branco"para extrair o maximo de informacoes possivel"$ColorR
          echo -e $Branco"de um dispositivo Bluetooth sem a necessidade de parear."$ColorR
          echo -e $Branco"Uma tela de informacoes detalhadas extrai informacoes de HCI e SDP"$ColorR
          echo -e $Branco"e mantem uma conexao aberta para monitorar o RSSI"$ColorR
          echo -e $Branco"e a qualidade do link."$ColorR
          echo -e $Branco"O btscanner e baseado na pilha BlueZ Bluetooth, incluida nos kernels Linux"$ColorR
          echo -e $Branco"recentes, e no conjunto de ferramentas BlueZ."$ColorR
          echo -e $Branco"O btscanner tambem contem uma lista completa dos numeros IEEE OUI"$ColorR
          echo -e $Branco"e tabelas de pesquisa de classe."$ColorR
          echo -e $Branco" Usando as informacoes coletadas dessas fontes,"$ColorR
          echo -e $Branco"e possivel fazer suposicoes sobre o tipo de dispositivo host."$ColorR
          echo -e $Branco"$ btscanner."$ColorR
          echo -e $BrancoBAD"Btscanner Homepage: https://salsa.debian.org/pkg-security-team/btscanner"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/btscanner/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "40" ]; then
          echo -e $Color"Instalando Programa Ubertooth."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ubertooth
          apt-get -y install libubertooth-dev
          apt-get -y install libubertooth1
          apt-get -y install ubertooth-firmware
          apt-get -y install ubertooth-firmware-source
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "40help" ]; then
          echo -e $BrancoBAD"Sobre Ubertooth:"$ColorR
          echo -e $Branco"O Projeto Ubertooth e uma plataforma"$ColorR
          echo -e $Branco"de desenvolvimento"$ColorR
          echo -e $Branco"sem fio de codigo aberto adequada"$ColorR
          echo -e $Branco"para experimentacao de Bluetooth."$ColorR
          echo -e $Branco"Este pacote contem tudo o que"$ColorR
          echo -e $Branco"e necessario para usar o dongle de hardware."$ColorR
          echo -e $Branco"O Ubertooth e capaz de detectar conexoes BLE (Bluetooth Smart)"$ColorR
          echo -e $Branco"e tambem tem alguma capacidade de detectar alguns dados"$ColorR
          echo -e $Branco"de conexoes Bluetooth Classic de Taxa Basica (BR)."$ColorR
          echo -e $Branco"Alem dos recursos especificos do Bluetooth, ha"$ColorR
          echo -e $Branco"tambem um analisador de espectro simples para a banda de 2,4 GHz"$ColorR
          echo -e $Branco"incluido (ubertooth-specan-ui) que pode ser usado"$ColorR
          echo -e $Branco"para tambem observar outras coisas nessa banda de frequencia."$ColorR
          echo -e $BrancoBAD"ubertooth:"$ColorR
          echo -e $Branco"$ ubertooth-afh."$ColorR
          echo -e $Branco"$ ubertooth-debug."$ColorR
          echo -e $Branco"$ ubertooth-dump."$ColorR
          echo -e $Branco"$ ubertooth-rx."$ColorR
          echo -e $Branco"$ ubertooth-specan-ui."$ColorR
          echo -e $Branco"$ ubertooth-btbr."$ColorR
          echo -e $Branco"$ ubertooth-dfu."$ColorR
          echo -e $Branco"$ ubertooth-ego."$ColorR
          echo -e $Branco"$ ubertooth-scan."$ColorR
          echo -e $Branco"$ ubertooth-util."$ColorR
          echo -e $Branco"$ ubertooth-btle."$ColorR
          echo -e $Branco"$ ubertooth-ducky."$ColorR
          echo -e $Branco"$ ubertooth-follow."$ColorR
          echo -e $Branco"$ ubertooth-specan."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/greatscottgadgets/ubertooth/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ubertooth/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "41" ]; then
          echo -e $Color"Instalando Programa Airgeddon."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install airgeddon
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "41help" ]; then
          echo -e $BrancoBAD"Sobre Airgeddon:"$ColorR
          echo -e $Branco"O airgeddon e um wrapper de ferramentas de terceiros orientado"$ColorR
          echo -e $Branco"por menus para auditar redes sem fio com muitos recursos."$ColorR
          echo -e $Branco"$ airgeddon."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/v1s1t0r1sh3r3/airgeddon"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/airgeddon/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "42" ]; then
          echo -e $Color"Instalando Programa Hashcat."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hashcat
          apt-get -y install hashcat-data
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "42help" ]; then
          echo -e $BrancoBAD"Sobre Hashcat:"$ColorR
          echo -e $Branco"Hashcat suporta cinco modos exclusivos de ataque"$ColorR
          echo -e $Branco"para mais de 300 algoritmos de hash altamente otimizados."$ColorR
          echo -e $Branco"hashcat atualmente suporta CPUs, GPUs e outros aceleradores"$ColorR
          echo -e $Branco"de hardware no Linux e tem recursos"$ColorR
          echo -e $Branco"para ajudar a habilitar a quebra de senha distribuida."$ColorR
          echo -e $Branco"Exemplos de algoritmos de hash"$ColorR
          echo -e $Branco"suportados por hashcat sao:"$ColorR
          echo -e $Branco"MD5, HMAC-MD5, SHA1, HMAC-SHA1,"$ColorR
          echo -e $Branco"MySQL323, MySQL4.1/MySQL5,"$ColorR
          echo -e $Branco"phpass, MD5(Wordpress), MD5(phpBB3),"$ColorR
          echo -e $Branco"MD5(Joomla), md5crypt, MD5(Unix),"$ColorR
          echo -e $Branco"FreeBSD MD5, Cisco-IOS, MD4, NTLM,"$ColorR
          echo -e $Branco"Domain Cached Credentials (DCC),"$ColorR
          echo -e $Branco"MS Cache, SHA256, HMAC-SHA256,"$ColorR
          echo -e $Branco"md5apr1, MD5(APR), Apache MD5,"$ColorR
          echo -e $Branco"SHA512, HMAC-SHA512, Cisco-PIX,"$ColorR
          echo -e $Branco"Cisco  -ASA, WPA/WPA2, Double MD5,"$ColorR
          echo -e $Branco"bcrypt, Blowfish (OpenBSD), MD5"$ColorR
          echo -e $Branco"(Sun), Double SHA1, SHA-3 (Keccak),"$ColorR
          echo -e $Branco"Half MD5, Password Safe SHA-256,"$ColorR
          echo -e $Branco"IKE-PSK MD5, IKE-PSK SHA1,"$ColorR
          echo -e $Branco"NetNTLMv1-VANILLA/NetNTLMv1-ESS,"$ColorR
          echo -e $Branco"NetNTLMv2, Cisco-IOS SHA256,"$ColorR
          echo -e $Branco"Android PIN, AIX {smd5}, AIX {ssha256},"$ColorR
          echo -e $Branco"AIX {ssha512}, AIX {ssha1},"$ColorR
          echo -e $Branco"GOST, GOST R 34, Fortigate (FortiOS),"$ColorR
          echo -e $Branco"OS X v10.8+, GRUB 2,"$ColorR
          echo -e $Branco"IPMI2, RAKP, HMAC-SHA1, sha256crypt,"$ColorR
          echo -e $Branco"SHA256(Unix), Drupal7, WBB3,"$ColorR
          echo -e $Branco'scrypt, Cisco $8$, Cisco $9$,'$ColorR
          echo -e $Branco" Radmin2, Django (PBKDF2-SHA256),"$ColorR
          echo -e $Branco"Cram MD5, SAP, iSSHA-1, PrestaShop,"$ColorR
          echo -e $Branco"PostgreSQL, Autenticacao"$ColorR
          echo -e $Branco"Challenge-Response (MD5),"$ColorR
          echo -e $Branco"MySQL Challenge-Response, Autenticacao (SHA1),"$ColorR
          echo -e $Branco"autenticacao SIP Digest (MD5), Plaintex t,"$ColorR
          echo -e $Branco"Joomla < 2.5.18, PostgreSQL,"$ColorR
          echo -e $Branco"osCommerce, xt:Commerce, Skype, nsldap,"$ColorR
          echo -e $Branco"Netscape, LDAP, nsldaps,"$ColorR
          echo -e $Branco"SSHA-1(Base64), Oracle S: Type (Oracle 11+),"$ColorR
          echo -e $Branco"SMF > v1.1, OS  X v10.4,"$ColorR
          echo -e $Branco"v10.5, v10.6, EPi, Django (SHA-1),"$ColorR
          echo -e $Branco"MSSQL(2000), MSSQL(2005), PeopleSoft,"$ColorR
          echo -e $Branco"EPiServer 6.x < v4, hMailServer,"$ColorR
          echo -e $Branco"SSHA-512(Base64),  LDAP {SSHA512},"$ColorR
          echo -e $Branco"OS X v10.7, MSSQL (2012 e 2014),"$ColorR
          echo -e $Branco"vBulletin < v3.8.5, PHPS,"$ColorR
          echo -e $Branco"vBulletin > v3.8.5, IPB2+, MyBB1.2+,"$ColorR
          echo -e $Branco"Mediawiki B type, WebEdition CMS, Redmine."$ColorR
          echo -e $Branco"Hashcat oferece varios modos de ataque"$ColorR
          echo -e $Branco"para obter cobertura eficaz e complexa"$ColorR
          echo -e $Branco"sobre o keyspace de um hash."$ColorR
          echo -e $Branco"Esses modos sao:"$ColorR
          echo -e $Branco"* Ataque de forca bruta."$ColorR
          echo -e $Branco"* Ataque combinador."$ColorR
          echo -e $Branco"* Ataque de dicionario."$ColorR
          echo -e $Branco"* Ataque de impressao digital."$ColorR
          echo -e $Branco"* Ataque hibrido."$ColorR
          echo -e $Branco"* Ataque de mascara."$ColorR
          echo -e $Branco"* Ataque de permutacao."$ColorR
          echo -e $Branco"* Ataque baseado em regras."$ColorR
          echo -e $Branco"* Ataque de pesquisa de tabela."$ColorR
          echo -e $Branco"* Ataque de caixa de alternancia."$ColorR
          echo -e $Branco"* Ataque PRINCIPE."$ColorR
          echo -e $Branco"$ hashcat."$ColorR
          echo -e $BrancoBAD"Hashcat Homepage: https://hashcat.net/hashcat/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hashcat/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "43" ]; then
          echo -e $Color"Instalando Programa Hostapd-Wpe."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hostapd-wpe
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "43help" ]; then
          echo -e $BrancoBAD"Sobre Histapd-Wpe:"$ColorR
          echo -e $Branco"Este pacote contem hostapd modificado com hostapd-wpe.patch."$ColorR
          echo -e $Branco"Ele implementa ataques de representacao de Autenticador"$ColorR
          echo -e $Branco"e Servidor de Autenticacao IEEE 802.1x para obter"$ColorR
          echo -e $Branco"credenciais de cliente, estabelecer conectividade"$ColorR
          echo -e $Branco"com o cliente e lancar outros ataques quando aplicavel."$ColorR
          echo -e $BrancoBAD"hostapd-wpe suporta os seguintes tipos de EAP para representacao:"$ColorR
          echo -e $Branco"1. EAP-FAST/MSCHAPv2 (Fase 0) 2. PEAP/MSCHAPv2"$ColorR
          echo -e $Branco"3. EAP-TTLS/MSCHAPv2 4. EAP-TTLS/MSCHAP"$ColorR
          echo -e $Branco"5. EAP-TTLS/CHAP 6. EAP-TTLS/PAP"$ColorR
          echo -e $Branco"Quando a representacao estiver em andamento,"$ColorR
          echo -e $Branco"o hostapd-wpe retornara uma mensagem EAP-Success"$ColorR
          echo -e $Branco"para que o cliente acredite que"$ColorR
          echo -e $Branco"conectado ao seu autenticador legitimo."$ColorR
          echo -e $Branco"Para clientes 802.11, o hostapd-wpe tambem"$ColorR
          echo -e $Branco"implementa respostas de teste gratuitas no estilo Karma."$ColorR
          echo -e $Branco"A inspiracao para isso foi fornecida pelo"$ColorR
          echo -e $Branco"patch de JoMo-Kun para versoes mais antigas do hostapd."$ColorR
          echo -e $Branco"http://www.foofus.net/?page_id=115"$ColorR
          echo -e $Branco"O hostapd-wpe tambem implementa ataques CVE-2014-0160"$ColorR
          echo -e $Branco"(Heartbleed) contra clientes vulneraveis."$ColorR
          echo -e $Branco"A inspiracao para isso foi fornecida pelo Cupid PoC:"$ColorR
          echo -e $Branco"https://github.com/lgrangeia/cupid"$ColorR
          echo -e $Branco"hostapd-wpe registra todos os dados em stdout e hostapd-wpe.log"$ColorR
          echo -e $Branco"hostapd-wpe:"$ColorR
          echo -e $Branco"$ hostapd-wpe."$ColorR
          echo -e $Branco"$ hostapd-wpe_cli."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/aircrack-ng/aircrack-ng/tree/master/patches/wpe"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hostapd-wpe/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "44" ]; then
          echo -e $Color"Instalando Programa Iw."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install iw
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "44help" ]; then
          echo -e $BrancoBAD"Sobre Iw:"$ColorR
          echo -e $Branco"Este pacote contem a ferramenta de linha"$ColorR
          echo -e $Branco"de comando ‘iw’ que permite configurar e"$ColorR
          echo -e $Branco"mostrar informacoes sobre dispositivos sem fio."$ColorR
          echo -e $Branco"iw e baseado na interface do kernel nl80211"$ColorR
          echo -e $Branco"e suporta a maioria dos hardwares relativamente recentes."$ColorR
          echo -e $Branco"A antiga ferramenta iwconfig, que usa a interface"$ColorR
          echo -e $Branco"Wireless Extensions, esta obsoleta e, e altamente"$ColorR
          echo -e $Branco"recomendavel alternar para iw e nl80211."$ColorR
          echo -e $Branco"$ iw."$ColorR
          echo -e $BrancoBAD"Iw Homepage: https://wireless.wiki.kernel.org/en/users/documentation/iw"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/iw/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "45" ]; then
          echo -e $Color"Instalando Programa Mdk4."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install mdk4
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "45help" ]; then
          echo -e $BrancoBAD"Sobre Mdk4:"$ColorR
          echo -e $Branco"Este pacote contem uma ferramenta de prova"$ColorR
          echo -e $Branco"de conceito para explorar os pontos fracos comuns do protocolo IEEE 802.11."$ColorR
          echo -e $Branco"MDK4 e uma nova versao do MDK3."$ColorR
          echo -e $Branco"MDK4 e uma ferramenta de teste de Wi-Fi da E7mer"$ColorR
          echo -e $Branco"da 360PegasusTeam, ASPj da k2wrlz, ela utiliza a biblioteca"$ColorR
          echo -e $Branco"osdep do projeto aircrack-ng"$ColorR
          echo -e $Branco"para injetar frames em diversos sistemas operacionais."$ColorR
          echo -e $Branco"IMPORTANTE: E sua responsabilidade certificar-se"$ColorR
          echo -e $Branco"de ter permissao do proprietario da"$ColorR
          echo -e $Branco"rede antes de executar o MDK nele."$ColorR
          echo -e $Branco"$ mdk4."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/aircrack-ng/mdk4"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/mdk4/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas03

     elif [ "$F" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$F" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$F" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$F" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$F" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$F" = "P13" ]; then
          Programas13

     elif [ "$F" = "P12" ]; then
          Programas12

     elif [ "$F" = "P11" ]; then
          Programas11

     elif [ "$F" = "P10" ]; then
          Programas10

     elif [ "$F" = "P09" ]; then
          Programas09

     elif [ "$F" = "P08" ]; then
          Programas08

     elif [ "$F" = "P07" ]; then
          Programas07

     elif [ "$F" = "P06" ]; then
          Programas06

     elif [ "$F" = "P05" ]; then
          Programas05

     elif [ "$F" = "P04" ]; then
          Programas04

     elif [ "$F" = "P03" ]; then
          Programas03

     elif [ "$F" = "P02" ]; then
          Programas02

     elif [ "$F" = "P01" ]; then
          Programas01

     elif [ "$F" = "Programas01" ]; then
          Programas01

     elif [ "$F" = "Programas02" ]; then
          Programas02

     elif [ "$F" = "Programas03" ]; then
          Programas03

     elif [ "$F" = "Programas04" ]; then
          Programas04

     elif [ "$F" = "Programas05" ]; then
          Programas05

     elif [ "$F" = "Programas06" ]; then
          Programas06

     elif [ "$F" = "Programas07" ]; then
          Programas07

     elif [ "$F" = "Programas08" ]; then
          Programas08

     elif [ "$F" = "Programas09" ]; then
          Programas09

     elif [ "$F" = "Programas10" ]; then
          Programas10

     elif [ "$F" = "Programas11" ]; then
          Programas11

     elif [ "$F" = "Programas12" ]; then
          Programas12

     elif [ "$F" = "Programas13" ]; then
          Programas13

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Programas03
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Programas03
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Programas03
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Programas03
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Programas03
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Programas03
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas03
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas03
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas03
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas03
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas03
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas03
fi
}
Programas02B(){
echo -e $Color"\n\nAnalise de Vulnerabilidade"$ColorR
echo -e $Color"
01) BBQSQL                          35) DHCPig
1help Sobre BBQSQL                  35help Sobre DHCPig
02) BED                             36) Sipsak
2help Sobre BED                     36help Sobre Sipsak
03) Afl++                           37) Spike
3help Sobre Afl++                   37help Sobre Spike
04) Cisco-Auditing-Tool
4help Sobre Cisco-Auditing-Tool
05) Cisco-Global-Exploiter
5help Sobre Cisco-Global-Exploiter
06) Cisco-ocs
6help Sobre Cisco-ocs
07) Cisco-Torch
7help Cisco-Torch
08) Copy-Router-Config
8help Sobre Copy-Router-Config
09) Commix
9help Sobre Commix
10) Doona
10help Sobre DoonaDot
11) DotDotPwn
11help Sobre DotDotPwn
12) Greenbone Security .A
12help Sobre Greenbone Security .A
13) Gvm
13help Sobre Gvm
14) JSQL
14help Sobre JSQL
15) Lynis
15help Sobre Lynis
16) Nmap
16help Sobre Nmap
17) Ohrwurm
17help Sobre Ohrwurm
18) THC-SSL-DOS
18help Sobre THC-SSL-DOS
19) T50
19help Sobre T50
20) Rtpflood
20help Sobre Rtpflood
21) Openvas-Scanner
21help Sobre Openvas-Scanner
22) Oscanner
22help Sobre Oscanner
23) Sfuzz
23help Sobre Sfuzz
24) SidGuesser
24help Sobre SidGuesser
25) Siparmyknife
25help Sobre Siparmyknife
26) Sqlmap
26help Sobre Sqlmap
27) Sqlninja
27help Sobre Sqlninja
28) Sqlsus
28help Sobre Sqlsus
29) THC-IPV6
29help Sobre THC-IPV6
30) Tnscmd10g
30help Sobre Tnscmd10g
31) Unix-Privesc-Check
31help Sobre Unix-Privesc-Check
32) Yersinia
32help Sobre Yersinia
33) Xerosploit
33help Sobre Xerosploit
34) GSD
34help Sobre GSD

"$ColorR
echo -e "\n"
echo -e $Verde"Install all Vulnerability Analysis tools"$ColorR
echo -e $Verde"(x) (Instalar Todas as ferramentas)"$ColorR
echo -e "\n\n"
}
PrompTProgramas02(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" A
}
All_Tools_02(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install bed
apt-get -y install sudo
apt-get -y install python
apt-get -y install doona
apt-get -y install oscanner
apt-get -y install afl
apt-get -y install sipsak
apt-get -y install spike
apt-get -y install afl++
apt-get -y install afl++-doc
apt-get -y install afl++-clang
apt-get -y install afl-doc
apt-get -y install afl-clang
apt-get -y install sqlmap
apt-get -y install cisco-auditing-tool
apt-get -y install cisco-global-exploiter
apt-get -y install sfuzz
apt-get -y install cisco-ocs
apt-get -y install sqlninja
apt-get -y install jsql
apt-get -y install dhcpig
apt-get -y install thc-ipv6
apt-get -y install unix-privesc-check
apt-get -y install thc-ssl-dos
apt-get -y install yersinia
apt-get -y install sqlsus
apt-get -y install tns10g
apt-get -y install siparmyknife
apt-get -y install sidguesser
apt-get -y install openvas-scanner
apt-get -y install cisco-torch
apt-get -y install rtpflood
apt-get -y install copy-router-config
apt-get -y install t50
apt-get -y install ohrwurm
apt-get -y install greenbone-security-assistant
apt-get -y install nmap
apt-get -y install lynis
apt-get -y install dotdotpwn
apt-get -y install gvm
apt-get -y install openvas
apt-get -y install git
apt-get -y install python3
apt-get -y install cython-doc
apt-get -y install cython3
cd ~/
git clone https://github.com/glotzerlab/gsd
cd gsd
sudo python3 setup.py install
cd ~/
rm -rf gsd
apt-get -y install commix
git clone https://github.com/LionSec/xerosploit.git
cd xerosploit
sudo python install.py
cd ~/
rm -rf xerosploit
sudo xerosploit
apt-get -y install python-setuptools
sudo apt-get -y install libpq-dev python-dev libxml2-dev\
python3-dev libxslt1-dev libldap2-dev build-essential\
libsasl2-dev libffi-dev
git clone https://github.com/CiscoCXSecurity/bbqsql.git
cd bbqsql
python setup.py install
cd ~/
rm -rf bbqsql
}
Programas02(){
Programas02B
PrompTProgramas02
if [ "$A" = "01" ]; then
   A="1"
fi
if [ "$A" = "02" ]; then
   A="2"
fi
if [ "$A" = "03" ]; then
   A="3"
fi
if [ "$A" = "04" ]; then
   A="4"
fi
if [ "$A" = "05" ]; then
   A="5"
fi
if [ "$A" = "06" ]; then
   A="6"
fi
if [ "$A" = "07" ]; then
   A="7"
fi
if [ "$A" = "08" ]; then
   A="8"
fi
if [ "$A" = "09" ]; then
   A="9"
fi
while [ "$A" ];
do
  if [ "$A" ]; then
     if [ "$A" = "1" ];then
        echo -e $Color"Instalando Programa BBQSQL."$Color
        apt-get -y update 1> /dev/null 2> /dev/null
        apt-get -y install git sudo
        apt-get -y install python-is-python2
        apt-get -y install python-setuptools
        sudo apt-get -y install libpq-dev python-dev libxml2-dev\
        python3-dev libxslt1-dev libldap2-dev build-essential\
        libsasl2-dev libffi-dev
        cd ~/
        git clone https://github.com/CiscoCXSecurity/bbqsql.git
        cd bbqsql
        python setup.py install
        cd ~/
        rm -rf bbqsql
        sleep 1
        echo -e $Color"Processo Finalizado."$ColorR
        sleep 1
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        PrompTProgramas02

     elif [ "$A" = "1help" ]; then
          echo -e $BrancoBAD"Sobre BBQSQL:"$ColorR
          echo -e $Branco"Ferramenta de exploracao de injecao de SQL"$ColorR
          echo -e $Branco"BBQSQL e uma estrutura de injecao SQL cega escrita em Python."$ColorR
          echo -e $Branco"E extremamente util ao atacar vulnerabilidades complicadas"\
                         "\nde injecao de SQL."$ColorR
          echo -e $Branco"O BBQSQL tambem e uma ferramenta semiautomatica, permitindo"\
                         "\num pouco de personalizacao"$ColorR
          echo -e $Branco"para aqueles dificeis de acionar descobertas"\
                         "de injecao de SQL."$ColorR
          echo -e $Branco"A ferramenta e construida para ser independente de banco"\
                         "\nde dados e, e extremamente versatil."$ColorR
          echo -e $Branco"Ele tambem possui uma interface de usuario intuitiva"\
                         "\npara facilitar muito"$ColorR
          echo -e $Branco"a configuracao de ataques."$ColorR
          echo -e $Branco"Python gevent tambem e implementado, tornando"\
                         "\no BBQSQL extremamente rapido."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/CiscoCXSecurity/bbqsql"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$B" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_02
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$B" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_02
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "2" ]; then
          echo -e $Color"Instalando Programa BED."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install bed
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "2help" ]; then
          echo -e $BrancoBAD"Sobre BAD:"$ColorR
          echo -e $Branco"BED e um programa projetado para verificar daemons"$ColorR
          echo -e $Branco"para possiveis estouros de buffer, strings de formato etc. al."$ColorR
          echo -e $BrancoBAD"Bed Homepage: http://www.snake-basket.de/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/bed/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "3" ]; then
          echo -e $Color"Instalando Programa Afl++."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install afl
          apt-get -y install afl++
          apt-get -y install afl++-doc
          apt-get -y install afl++-clang
          apt-get -y install afl-doc
          apt-get -y install afl-clang
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "3help" ]; then
          echo -e $BrancoBAD"Sobre Afl++:"$ColorR
          echo -e $Branco"American fuzzy lop e um fuzzer"$ColorR
          echo -e $Branco"que emprega instrumentacao em tempo"$ColorR
          echo -e $Branco"de compilacao e algoritmos geneticos"$ColorR
          echo -e $Branco"para descobrir automaticamente casos"$ColorR
          echo -e $Branco"de teste limpos e interessantes que acionam"$ColorR
          echo -e $Branco"novos estados internos no binario alvo."$ColorR
          echo -e $Branco"Isso melhora substancialmente a cobertura"$ColorR
          echo -e $Branco"funcional do codigo fuzzed."$ColorR
          echo -e $Branco"Os corpora sintetizados compactos produzidos"$ColorR
          echo -e $Branco"pela ferramenta tambem sao uteis"$ColorR
          echo -e $Branco"para semear outros regimes de testes"$ColorR
          echo -e $Branco"mais intensivos em mao de obra"$ColorR
          echo -e $Branco"ou recursos no futuro."$ColorR
          echo -e $Branco"O afl++-fuzz foi projetado"$ColorR
          echo -e $Branco"para ser pratico: tem uma sobrecarga"$ColorR
          echo -e $Branco"de desempenho modesta, usa uma variedade"$ColorR
          echo -e $Branco"de estrategias de fuzzing altamente eficazes,"$ColorR
          echo -e $Branco"nao requer praticamente nenhuma"$ColorR
          echo -e $Branco"configuracao e lida perfeitamente"$ColorR
          echo -e $Branco"com casos de uso complexos do mundo real"$ColorR
          echo -e $Branco"* digamos, analise comum de imagens"$ColorR
          echo -e $Branco"ou bibliotecas de compactacao de arquivos."$ColorR
          echo -e $Branco"afl++ e uma bifurcacao do afl nao mantido."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/vanhauser-thc/AFLplusplus"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/aflplusplus/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "4" ]; then
          echo -e $Color"Instalando Programa Cisco-Auditing-Tool."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cisco-auditing-tool
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "4help" ]; then
          echo -e $BrancoBAD"Sobre Cisco-Auditing-Tool:"$ColorR
          echo -e $Branco"Script Perl que verifica os roteadores Cisco"$ColorR
          echo -e $Branco"em busca de vulnerabilidades comuns."$ColorR
          echo -e $Branco"$ CAT."$ColorR
          echo -e $BrancoBAD"Cisco-Auditing-Tool Homepage: http://www.scrypt.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cisco-auditing-tool/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "5" ]; then
          echo -e $Color"Instalando Programa Cisco-Global-Exploiter."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cisco-global-exploiter
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "5help" ]; then
          echo -e $BrancoBAD"Sobre Cisco-Global-Exploiter:"$ColorR
          echo -e $Branco"Cisco Global Exploiter (CGE), e uma ferramenta de teste"$ColorR
          echo -e $Branco"de seguranca avancada, simples e rapida."$ColorR
          echo -e $Branco"$ cge.pl ."$ColorR
          echo -e $BrancoBAD"Cisco-Global-Exploiter Homepage: http://www.blackangels.it/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cisco-global-exploiter/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "6" ]; then
          echo -e $Color"Instalando Programa Cisco-ocs."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cisco-ocs
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "6help" ]; then
          echo -e $BrancoBAD"Sobre Cisco-ocs:"$ColorR
          echo -e $Branco"Uma ferramenta de varredura em massa da Cisco."$ColorR
          echo -e $Branco"$ cisco-ocs."$ColorR
          echo -e $BrancoBAD"Cisco-Ocs Homepage: http://hacklab.altervista.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cisco-ocs/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "7" ]; then
          echo -e $Color"Instalando Programa Cisco-Torch."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cisco-torch
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "7help" ]; then
          echo -e $BrancoBAD"Sobre Cisco-Torch:"$ColorR
          echo -e $Branco"O principal recurso que diferencia o"\
                         "Cisco-Torch de ferramentas"$ColorR
          echo -e $Branco"semelhantes e o uso extensivo de bifurcacao"\
                         "para iniciar varios processos"$ColorR
          echo -e $Branco"de varredura em segundo plano para maxima"\
                         "eficiencia de varredura."$ColorR
          echo -e $Branco"Alem disso, ele usa varios metodos"\
                         "de impressao digital da camada"$ColorR
          echo -e $Branco"de aplicativo simultaneamente, se necessario."$ColorR
          echo -e $Branco"Queriamos algo rapido para descobrir hosts remotos da Cisco"$ColorR
          echo -e $Branco"executando servicos Telnet, SSH, Web, NTP, TFTP"\
                         "e SNMP e lancar ataques"$ColorR
          echo -e $Branco"de dicionario contra os servicos descobertos, incluindo ataque"$ColorR
          echo -e $Branco"de comunidade SNMP (voce gostaria da lista community.txt :-)"$ColorR
          echo -e $Branco"e servidores TFTP"$ColorR
          echo -e $Branco"(nome do arquivo de configuracao bruteforcing"\
                         "com a seguinte drenagem de configuracao)."$ColorR
          echo -e $Branco"A ferramenta tambem pode obter arquivos"\
                         "de configuracao do dispositivo automaticamente"$ColorR
          echo -e $Branco"se a comunidade SNMP RW for encontrada."$ColorR
          echo -e $Branco"$ cisco-torch."$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/cisco-torch/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "8" ]; then
          echo -e $Color"Instalando Programa Copy-Router-Config."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install copy-router-config
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "8help" ]; then
          echo -e $BrancoBAD"Sobre Copy-Router-Config:"$ColorR
          echo -e $Branco"Este pacote copia arquivos de configuracao de dispositivos"$ColorR
          echo -e $Branco"Cisco que executam SNMP."$ColorR
          echo -e $BrancoBAD"Copy-Router-Config Homepage:"\
                            "https://www.offensive-security.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/copy-router-config/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "9" ]; then
          echo -e $Color"Instalando Programa Commix."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install commix
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "9help" ]; then
          echo -e $BrancoBAD"Sobre Commix:"$ColorR
          echo -e $Branco"Este pacote contem o Commix (abreviacao de [comm]"$ColorR
          echo -e $Branco"e [i]njection e[x]ploiter)."$ColorR
          echo -e $Branco"Possui um ambiente simples e pode"$ColorR
          echo -e $Branco"ser utilizado, desde desenvolvedores web, testadores"$ColorR
          echo -e $Branco"de penetracao ou ate mesmo pesquisadores"$ColorR
          echo -e $Branco"de seguranca para testar aplicacoes web com o objetivo"$ColorR
          echo -e $Branco"de encontrar bugs, erros ou vulnerabilidades relacionados"$ColorR
          echo -e $Branco"a ataques de injecao de comandos."$ColorR
          echo -e $Branco"Ao usar esta ferramenta, e muito facil encontrar"$ColorR
          echo -e $Branco"e explorar uma vulnerabilidade de injecao de comando"$ColorR
          echo -e $Branco"em um determinado parametro ou string vulneravel."$ColorR
          echo -e $Branco"Commix e escrito em linguagem de programacao Python."$ColorR
          echo -e $Branco"$ commix."$ColorR
          echo -e $BrancoBAD"Commix Homepage: https://commixproject.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/commix/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "10" ]; then
          echo -e $Color"Instalando Programa Doona."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install doona
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "10help" ]; then
          echo -e $BrancoBAD"Sobre DonnaDot:"$ColorR
          echo -e $Branco"Doona e um fork da Bruteforce Exploit Detector Tool (BED)."$ColorR
          echo -e $Branco"BED e um programa projetado para verificar daemons"$ColorR
          echo -e $Branco"quanto a possiveis estouros de buffer, erros"\
                         "de string\nde formato etc."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/wireghoul/doona"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/doona/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "11" ]; then
          echo -e $Color"instalando Programa DotDotPwn."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dotdotpwn
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "11help" ]; then
          echo -e $BrancoBAD"Sobre DotDotPwn:"$ColorR
          echo -e $Branco"DotDotPwn e um fuzzer inteligente muito flexivel"$ColorR
          echo -e $Branco"para descobrir vulnerabilidades de diretorio transversal"$ColorR
          echo -e $Branco"em softwares como servidores HTTP/FTP/TFTP,"\
                         "plataformas Web\ncomo CMSs, ERPs, Blogs, etc."$ColorR
          echo -e $BrancoBAD"Dotdotpwn Homepage: https://dotdotpwn.blogspot.ca/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dotdotpwn/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "12" ]; then
          echo -e $Color"Instalando Programa Greenbone Security .A"$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install greenbone-security-assistant
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "12help" ]; then
          echo -e $BrancoBAD"Sobre Greenbone Security .A:"$ColorR
          echo -e $Branco"O Greenbone Security Assistant e um aplicativo"$ColorR
          echo -e $Branco"da web que se conecta ao OpenVAS"\
                         "Manager e ao OpenVAS Administrator"$ColorR
          echo -e $Branco"para fornecer uma interface de usuario completa"\
                         "para gerenciamento de vulnerabilidades."$ColorR
          echo -e $Branco"Este pacote contem os arquivos comuns do assistente"$ColorR
          echo -e $Branco"de seguranca greenbone compartilhados"\
                         "por todas as arquiteturas."$ColorR
          echo -e $BrancoBAD"Homepage: https://www.greenbone.net/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "13" ]; then
          echo -e $Color"Instalando Programa Gvm."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install gvm
          apt-get -y install openvas
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "13help" ]; then
          echo -e $BrancoBAD"Sobre Gvm:"$ColorR
          echo -e $Branco"O Greenbone Vulnerability Manager"$ColorR
          echo -e $Branco"e uma ferramenta modular de auditoria"$ColorR
          echo -e $Branco"de seguranca, usada para testar sistemas"$ColorR
          echo -e $Branco"remotos quanto a vulnerabilidades"$ColorR
          echo -e $Branco"que devem ser corrigidas."$ColorR
          echo -e $Branco"Este pacote instala todos os pacotes necessarios."$ColorR
          echo -e $Branco"Ele fornece scripts para configurar, iniciar"$ColorR
          echo -e $Branco"e parar os servicos GVM."$ColorR
          echo -e $Branco"A ferramenta foi anteriormente denominada OpenVAS."$ColorR
          echo -e $BrancoBAD"Gvm Homepage: https://www.greenbone.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/gvm/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "14" ]; then
          echo -e $Color"Instalando JSQL."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install jsql-injection
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "14help" ]; then
          echo -e $BrancoBAD"Sobre JSQL:"$ColorR
          echo -e $Branco"jSQL Injection e um aplicativo leve usado"\
                         "para encontrar informacoes"$ColorR
          echo -e $Branco"de banco de dados de um servidor distante."$ColorR
          echo -e $Branco"jSQL e gratuito, de codigo aberto e multiplataforma"$ColorR
          echo -e $Branco"(Windows, Linux, Mac OS X, Solaris)."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/ron190/jsql-injection"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/jsql/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "15" ]; then
          echo -e $Color"Instalando Programa Lynis."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install lynis
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "15help" ]; then
          echo -e $BrancoBAD"Sobre Lynis:"$ColorR
          echo -e $Branco"Lynis e uma ferramenta de auditoria de seguranca confiavel"$ColorR
          echo -e $Branco"e de codigo aberto projetada para Linux, macOS"$ColorR
          echo -e $Branco"e derivados do UNIX, como FreeBSD e OpenBSD."$ColorR
          echo -e $Branco"Ele e usado para varias finalidades, incluindo auditoria"$ColorR
          echo -e $Branco"de seguranca, deteccao de vulnerabilidade e teste de conformidade."$ColorR
          echo -e $Branco"O objetivo de aproveitar uma ferramenta de auditoria"$ColorR
          echo -e $Branco"como o Lynis e investigar e resolver quaisquer vulnerabilidades"$ColorR
          echo -e $Branco"de seguranca subjacentes e erros de configuracao, como senhas"$ColorR
          echo -e $Branco"de contas de usuario fracas ou permissoes de arquivo inadequadas"$ColorR
          echo -e $Branco"que possam comprometer o sistema em caso de ataque."$ColorR
          echo -e $Branco"$ lynis."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/CISOfy/lynis"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/lynis/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "16" ]; then
          echo -e $Color"Instalando Programa Nmap."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install nmap
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "16help" ]; then
          echo -e $BrancoBAD"Sobre Nmap:"$ColorR
          echo -e $Branco"Nmap e um utilitario para exploracao de rede"$ColorR
          echo -e $Branco"ou auditoria de seguranca."$ColorR
          echo -e $Branco"Ele suporta varredura de ping"$ColorR
          echo -e $Branco"(determinar quais hosts estao ativos), muitas"$ColorR
          echo -e $Branco"tecnicas de varredura de porta, deteccao de versao"$ColorR
          echo -e $Branco"(determinar protocolos de servico e versoes"$ColorR
          echo -e $Branco"de aplicativos que escutam atras das portas)"$ColorR
          echo -e $Branco"e impressao digital TCP/IP"$ColorR
          echo -e $Branco"(sistema operacionalde host remoto ou identificacao de dispositivo)."$ColorR
          echo -e $Branco"O Nmap tambem oferece especificacao flexivel"$ColorR
          echo -e $Branco"de destino e porta, varredura de chamariz/stealth, varredura"$ColorR
          echo -e $Branco"sunRPC e muito mais."$ColorR
          echo -e $Branco"A maioria das plataformas Unix e Windows sao suportadas"$ColorR
          echo -e $Branco"nos modos GUI e linha de comando."$ColorR
          echo -e $Branco"Varios dispositivos portateis populares tambem"$ColorR
          echo -e $Branco"sao suportados, incluindo o Sharp Zaurus e o iPAQ."$ColorR
          echo -e $BrancoBAD"Sobre Nmap: https://nmap.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/nmap/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "17" ]; then
          echo -e $Color"Instalando Programa Ohrwurm."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ohrwurm
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "17help" ]; then
          echo -e $BrancoBAD"obre Ohrwurm:"$ColorR
          echo -e $Branco"ohrwurm e um fuzzer RTP pequeno"$ColorR
          echo -e $Branco"e simples que foi testado com sucesso"$ColorR
          echo -e $Branco"em um pequeno numero de telefones SIP."$ColorR
          echo -e $BrancoBAD"Recursos:"$ColorR
          echo -e $Branco"* le mensagens SIP para obter informacoes da\nporta RTP numeros"$ColorR
          echo -e $Branco"* a leitura SIP pode ser omitida fornecendo a porta RTP"$ColorR
          echo -e $Branco"* numeros, para que qualquer trafego RTP possa ser difuso"$ColorR
          echo -e $Branco"* O trafego RTCP pode ser suprimido para evitar que codecs"$ColorR
          echo -e $Branco"* aprenda sobre a linha barulhenta"$ColorR
          echo -e $Branco"* cuidado especial e tomado para quebrar"$ColorR
          echo -e $Branco"o proprio manuseio do RTP"$ColorR
          echo -e $Branco"* a carga util RTP e fuzzed com um BER constante"$ColorR
          echo -e $Branco"* o BER e configuravel"$ColorR
          echo -e $Branco"* requer arpspoof do dsniff para fazer o ataque MITM"$ColorR
          echo -e $Branco"* requer que ambos os telefones estejam em uma LAN comutada"$ColorR
          echo -e $Branco"(GW operacao funciona apenas parcialmente)"$ColorR
          echo -e $BrancoBAD"Ohrwurm Homepage: http://mazzoo.de/blog/2006/08/25#ohrwurm"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ohrwurm/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "18" ]; then
          echo -e $Color"Instalando Programa THC-SSL-DOS."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install thc-ssl-dos
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "18help" ]; then
          echo -e $BrancoBAD"Sobre THC-SSL-DOS:"$ColorR
          echo -e $Branco"THC-SSL-DOS e uma ferramenta"$ColorR
          echo -e $Branco"para verificar o desempenho do SSL."$ColorR
          echo -e $Branco"Estabelecer uma conexao SSL segura"$ColorR
          echo -e $Branco"requer 15 vezes mais poder de processamento"$ColorR
          echo -e $Branco"no servidor do que no cliente."$ColorR
          echo -e $Branco"O THC-SSL-DOS explora essa propriedade"$ColorR
          echo -e $Branco"assimetrica sobrecarregando o servidor e tirando-o"$ColorR
          echo -e $Branco"da Internet."$ColorR
          echo -e $Branco"Esse problema afeta todas as"$ColorR
          echo -e $Branco"implementacoes de SSL hoje."$ColorR
          echo -e $Branco"Os fornecedores estao cientes desse problema"$ColorR
          echo -e $Branco"desde 2003 e o tema tem sido amplamente discutido."$ColorR
          echo -e $Branco"Este ataque explora ainda mais o recurso SSL Secure"$ColorR
          echo -e $Branco"Renegociation para acionar milhares de renegociacoes"$ColorR
          echo -e $Branco"por meio de uma unica conexao TCP."$ColorR
          echo -e $Branco"$ thc-ssl-dos."$ColorR
          echo -e $BrancoBAD"THC-SSL-DOS Homepage: http://www.thc.org/thc-ssl-dos/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/thc-ssl-dos/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "19" ]; then
          echo -e $Color"Instalando Programa T50."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install t50
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "19help" ]; then
          echo -e $BrancoBAD"Sobre T50:"$ColorR
          echo -e $Branco"Ferramenta de injecao de pacotes"$ColorR
          echo -e $Branco"multiprotocolo para sistemas *nix,"$ColorR
          echo -e $Branco"na verdade suportando 15 protocolos."$ColorR
          echo -e $BrancoBAD"Caracteristicas:"$ColorR
          echo -e $Branco"* Flooding."$ColorR
          echo -e $Branco"* Suporte CIDR."$ColorR
          echo -e $Branco"* Suporte a TCP, UDP, ICMP, IGMPv2, IGMPv3,"$ColorR
          echo -e $Branco"EGP, DCCP, RSVP, RIPv1, RIPv2, GRE,"$ColorR
          echo -e $Branco"ESP, AH, EIGRP e OSPF."$ColorR
          echo -e $Branco"* Opcoes de TCP."$ColorR
          echo -e $Branco"* Alta performance."$ColorR
          echo -e $Branco"* Pode atingir cerca de 1.000.000 pacotes por segundo."$ColorR
          echo -e $Branco"$ t50."$ColorR
          echo -e $BrancoBAD"Github: https://gitlab.com/fredericopissarra/t50"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/t50/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "20" ]; then
          echo -e $Color"Instalando Programa Rtpflood."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install rtpflood
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "20help" ]; then
          echo -e $BrancoBAD"Sobre Rtpflood:"$ColorR
          echo -e $Branco"Uma ferramenta de linha de comando usada"$ColorR
          echo -e $Branco"para inundar qualquer dispositivo"$ColorR
          echo -e $Branco"que esteja processando RTP."$ColorR
          echo -e $Branco"$ rtpflood."$ColorR
          echo -e $BrancoBAD"Rtpflood Homepage: http://www.hackingvoip.com/sec_tools.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/rtpflood/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "21" ]; then
          echo -e $Color"Instalando Programa Openvas-Scanner."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install openvas-scanner
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "21help" ]; then
          echo -e $BrancoBAD"Sobre Openvas-Scanner:"$ColorR
          echo -e $Branco"Este e o Open Vulnerability Assessment Scanner (OpenVAS)"$ColorR
          echo -e $Branco"da solucao Greenbone Vulnerability Management (GVM)."$ColorR
          echo -e $Branco"Ele e usado para os dispositivos Greenbone Security Manager"$ColorR
          echo -e $Branco"e um mecanismo de varredura completo que executa"$ColorR
          echo -e $Branco"um feed continuamente atualizado e estendido"$ColorR
          echo -e $Branco"de Testes de Vulnerabilidade de Rede (NVTs)."$ColorR
          echo -e $BrancoBAD"Openvas Homepage: https://openvas.org/"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/greenbone/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "22" ]; then
          echo -e $Color"Instalando Programa Oscanner."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install oscanner
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "22help" ]; then
          echo -e $BrancoBAD"Sobre OScanner:"$ColorR
          echo -e $Branco"Oscanner e um framework de avaliacao Oracle desenvolvido em Java."$ColorR
          echo -e $Branco"Ele tem uma arquitetura baseada em plugins e vem com alguns"$ColorR
          echo -e $Branco"plugins que atualmente fazem:"$ColorR
          echo -e $Branco"* Enumeracao de Sid."$ColorR
          echo -e $Branco"* Testes de senhas (comum e dicionario)."$ColorR
          echo -e $Branco"* Enumerar a versao do Oracle."$ColorR
          echo -e $Branco"* Enumerar funcoes de conta."$ColorR
          echo -e $Branco"* Enumerar privilegios de conta."$ColorR
          echo -e $Branco"* Enumerar hashes de conta."$ColorR
          echo -e $Branco"* Enumerar informacoes de auditoria."$ColorR
          echo -e $Branco"* Enumerar politicas de senha."$ColorR
          echo -e $Branco"* Enumerar links de banco de dados."$ColorR
          echo -e $Branco"Os resultados sao fornecidos"$ColorR
          echo -e $Branco"em uma arvore java grafica."$ColorR
          echo -e $BrancoBAD"Oscanner Homepage: http://www.cqure.net/wp/tools/database/oscanner/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/oscanner/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "23" ]; then
          echo -e $Color"Instalando Programa Sfuzz."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sfuzz
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "23help" ]; then
          echo -e $BrancoBAD"Sobre Sfuzz:"$ColorR
          echo -e $Branco"Na mesma linha que o Generic Protocol Framework, o"$ColorR
          echo -e $Branco"sfuzz e um conjunto de testes de caixa preta realmente"$ColorR
          echo -e $Branco"simples de usar chamado Simple Fuzzer (o que mais voce esperaria?)."$ColorR
          echo -e $Branco"O objetivo e fornecer um utilitario de teste de caixa preta"$ColorR
          echo -e $Branco"simples de usar, mas bastante poderoso e flexivel."$ColorR
          echo -e $BrancoBAD"Sfuzz Homepage: http://aconole.brad-x.com/programs/sfuzz.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sfuzz/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "24" ]; then
          echo -e $Color"Instalando Programa Sidguesser."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sidguesser
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "24help" ]; then
          echo -e $BrancoBAD"Sobre Sidguesser:"$ColorR
          echo -e $Branco"Adivinhar sids/instancias em um banco de dados Oracle"$ColorR
          echo -e $Branco"de acordo com um arquivo de dicionario predefinido."$ColorR
          echo -e $Branco"A velocidade e lenta"$ColorR
          echo -e $Branco"(80-100 palpites por segundo), mas faz o trabalho."$ColorR
          echo -e $BrancoBAD"Sidguesser Homepage: http://www.cqure.net/wp/tools/database/sidguesser/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sidguesser/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "25" ]; then
          echo -e $Color"Instalando Programa Siparmyknife."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install siparmyknife
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "25help" ]; then
          echo -e $BrancoBAD"Sobre Siparmyknife:"$ColorR
          echo -e $Branco"O SIP Army Knife e um fuzzer que procura scripts"$ColorR
          echo -e $Branco"entre sites, injecao de SQL, injecao de log, strings"$ColorR
          echo -e $Branco"de formato, estouros de buffer e muito mais."$ColorR
          echo -e $BrancoBAD"Siparmyknife Homepage:"\
                  "https://packetstormsecurity.com/files/107301/SIP-Army-Knife-Fuzzer-11232011.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/siparmyknife/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "26" ]; then
          echo -e $Color"Instalando Programa Sqlmap."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sqlmap
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "26help" ]; then
          echo -e $BrancoBAD"Sobre Sqlmap:"$ColorR
          echo -e $Branco"O objetivo do sqlmap e detectar e aproveitar"$ColorR
          echo -e $Branco"as vulnerabilidades de injecao"$ColorR
          echo -e $Branco"de SQL em aplicativos da web."$ColorR
          echo -e $Branco"Uma vez que detecta uma ou mais injecoes"$ColorR
          echo -e $Branco"de SQL no host de destino, o usuario"$ColorR
          echo -e $Branco"pode escolher entre uma variedade de opcoes"$ColorR
          echo -e $Branco"para executar uma extensa impressao digital"$ColorR
          echo -e $Branco"do sistema de gerenciamento de banco"$ColorR
          echo -e $Branco"de dados de back-end, recuperar o usuario e"$ColorR
          echo -e $Branco"o banco de dados da sessao DBMS, enumerar"$ColorR
          echo -e $Branco"usuarios, hashes de senha, privilegios, bancos"$ColorR
          echo -e $Branco"de dados, despejar tabelas/colunas DBMS"$ColorR
          echo -e $Branco"inteiras ou especificas do usuario, executar"$ColorR
          echo -e $Branco"sua propria instrucao SQL, ler arquivos"$ColorR
          echo -e $Branco"especificos no sistema"$ColorR
          echo -e $Branco"de arquivos e muito mais."$ColorR
          echo -e $Branco"$ sqlmap."$ColorR
          echo -e $Branco"$ sqlmapapi."$ColorR
          echo -e $BrancoBAD"Sqlmap Homepage: http://pkg.kali.org/sqlmap"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sqlmap/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "27" ]; then
          echo -e $Color"Instalando Programa Sqlninja."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sqlninja
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "27help" ]; then
          echo -e "\033[0;37mSobre Sqlninja:"$ColorR
          echo -e $Branco"Gostaria de passar de uma injecao de SQL"$ColorR
          echo -e $Branco"no Microsoft SQL Server para um acesso"$ColorR
          echo -e $Branco"GUI completo no banco de dados?  Pegue alguns novos"$ColorR
          echo -e $Branco"truques de SQL Injection, adicione algumas fotos"$ColorR
          echo -e $Branco"remotas no registro para desabilitar"$ColorR
          echo -e $Branco"o Data Execution Prevention, misture com um pouco"$ColorR
          echo -e $Branco"de Perl que gera automaticamente um script"$ColorR
          echo -e $Branco"de depuracao, coloque tudo isso em um shaker"$ColorR
          echo -e $Branco"com um wrapper Metasploit, agite bem e voce tenha apenas"$ColorR
          echo -e $Branco"um dos modulos de ataque do sqlninja!"$ColorR
          echo -e $BrancoBAD"Sqlninja Homepage: http://sqlninja.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sqlninja/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "28" ]; then
          echo -e $Color"Instalando Programa Sqlsus:"$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sqlsus
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "28help" ]; then
          echo -e $BrancoBAD"Sobre Sqlsus:"$ColorR
          echo -e $Branco"sqlsus e uma ferramenta de injecao e controle"$ColorR
          echo -e $Branco"do MySQL de codigo aberto, escrita em perl."$ColorR
          echo -e $Branco"Atraves de uma interface de linha de comando, voce"$ColorR
          echo -e $Branco"pode recuperar a estrutura do banco de dados, injetar"$ColorR
          echo -e $Branco"suas proprias consultas SQL (mesmo as complexas), baixar arquivos"$ColorR
          echo -e $Branco"do servidor web, rastrear o site para diretorios gravaveis, fazer upload"$ColorR
          echo -e $Branco"e controlar um backdoor, clonar o banco de dados  (s), e muito mais..."$ColorR
          echo -e $Branco"Sempre que relevante, sqlsus ira imitar uma saida do console MySQL."$ColorR
          echo -e $BrancoBAD"Sqlsus Homepage: http://sqlsus.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sqlsus/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "29" ]; then
          echo -e $Color"Instalando Programa THC-IPV6."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install thc-ipv6
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "29help" ]; then
          echo -e $BrancoBAD"Sobre THC-IPV6:"$ColorR
          echo -e $Branco"Kit de ferramentas de ataque para testar as"\
                         "fraquezas dos protocolos IPv6 e ICMPv6."$ColorR
          echo -e $Branco"Algumas das ferramentas incluidas:"$ColorR
          echo -e $Branco"$ alive6: uma varredura viva eficaz."$ColorR
          echo -e $Branco"$ denial6: tente uma colecao de testes de"\
                         "negacao de servico contra um alvo."$ColorR
          echo -e $Branco"$ detect-new-ip6: detecta novos dispositivos"\
                         "ip6 que ingressam na rede."$ColorR
          echo -e $Branco"$ dnsdict6: bruteforcer de dicionario dns"\
                         "ipv6 paralelizado."$ColorR
          echo -e $Branco"$ dos-new-ip6: detecta novos dispositivos"\
                         "ip6 e informa que o IP escolhido colide"\
                         "na rede (DOS)."$ColorR
          echo -e $Branco"$ exploit6: teste vulnerabilidades IPv6"\
                         "conhecidas em um alvo."$ColorR
          echo -e $Branco"$ fake_mld6: anuncie-se em um grupo multicast"\
                         "de sua escolha na rede."$ColorR
          echo -e $Branco"$ fake_router6: anuncie-se como um"\
                         "roteador na rede."$ColorR
          echo -e $Branco"$ flood_advertise6: inunda um alvo com"\
                         "anuncios aleatorios de vizinhos."$ColorR
          echo -e $Branco"$ flood_router6: inunda um alvo com anuncios"\
                         "aleatorios de roteador."$ColorR
          echo -e $Branco"$ implementation6: executa varias verificacoes"\
                         "de implementacao no IPv6."$Color
          echo -e $Branco"$ parasite6: spoofer de solicitacao/anuncio"\
                         "de vizinho icmp."$ColorR
          echo -e $Branco"$ redir6: redireciona o trafego para voce de"\
                         "forma inteligente (man-in-the-middle)"$ColorR
          echo -e $Branco"com um spoofer de redirecionamento"\
                         "icmp6 inteligente."$ColorR
          echo -e $Branco"$ rsmurf6: smurfer remoto (conhecido por"\
                         "funcionar apenas contra Linux no momento)."$ColorR
          echo -e $Branco"$ thcping6: envia um pacote ping6 feito a mao."$ColorR
          echo -e $Branco"$ toobig6: Mtu decrescente com a mesma inteligencia que redir6.."$ColorR
          echo -e $Branco"$ atk6-address6."$ColorR
          echo -e $Branco"$ atk6-connsplit6."$ColorR
          echo -e $Branco"$ atk6-denial6."$ColorR
          echo -e $Branco"$ atk6-dnsdict6."$ColorR
          echo -e $Branco"$ atk6-dos-new-ip6."$ColorR
          echo -e $Branco"$ atk6-exploit6."$ColorR
          echo -e $Branco"$ atk6-fake_advertise6."$ColorR
          echo -e $Branco"$ atk6-fake_dnsupdate6."$ColorR
          echo -e $Branco"$ atk6-fake_mld6."$ColorR
          echo -e $Branco"$ atk6-fake_router26."$ColorR
          echo -e $Branco"$ atk6-flood_mld26."$ColorR
          echo -e $Branco"$ atk6-flood_redir6."$ColorR
          echo -e $Branco"$ atk6-flood_rs6."$ColorR
          echo -e $Branco"$ atk6-four2six."$ColorR
          echo -e $Branco"$ atk6-fuzz_dhcpc6."$ColorR
          echo -e $Branco"$ atk6-implementation6."$ColorR
          echo -e $Branco"$ atk6-inverse_lookup6."$ColorR
          echo -e $Branco"$ atk6-ndpexhaust6."$ColorR
          echo -e $Branco"$ atk6-passive_discovery6."$ColorR
          echo -e $Branco"$ atk6-redirsniff6."$ColorR
          echo -e $Branco"$ atk6-sendpeesmp6."$ColorR
          echo -e $Branco"$ atk6-thcsyn6."$ColorR
          echo -e $Branco"$ atk6-trace6."$ColorR
          echo -e $Branco"$ atk6-alive6."$ColorR
          echo -e $Branco"$ atk6-covert_send6."$ColorR
          echo -e $Branco"$ atk6-detect-new-ip6."$ColorR
          echo -e $Branco"$ atk6-dnsrevenum6."$ColorR
          echo -e $Branco"$ atk6-dump_dhcp6."$ColorR
          echo -e $Branco"$ atk6-extract_hosts6."$ColorR
          echo -e $Branco"$ atk6-fake_dhcps6."$ColorR
          echo -e $Branco"$ atk6-fake_mipv6."$ColorR
          echo -e $Branco"$ atk6-fake_mldrouter6."$ColorR
          echo -e $Branco"$ atk6-fake_router6."$ColorR
          echo -e $Branco"$ atk6-flood_advertise6."$ColorR
          echo -e $Branco"$ atk6-flood_mld6."$ColorR
          echo -e $Branco"$ atk6-flood_router26."$ColorR
          echo -e $Branco"$ atk6-flood_solicitate6."$ColorR
          echo -e $Branco"$ atk6-fragmentation6."$ColorR
          echo -e $Branco"$ atk6-fuzz_dhcps6."$ColorR
          echo -e $Branco"$ atk6-implementation6d."$ColorR
          echo -e $Branco"$ atk6-kill_router6."$ColorR
          echo -e $Branco"$ atk6-node_query6."$ColorR
          echo -e $Branco"$ atk6-randicmp6."$ColorR
          echo -e $Branco"$ atk6-rsmurf6."$ColorR
          echo -e $Branco"$ atk6-smurf6."$ColorR
          echo -e $Branco"$ atk6-toobig6."$ColorR
          echo -e $Branco"$ atk6-connect6."$ColorR
          echo -e $Branco"$ atk6-covert_send6d."$ColorR
          echo -e $Branco"$ atk6-detect_sniffer6."$ColorR
          echo -e $Branco"$ atk6-dnssecwalk."$ColorR
          echo -e $Branco"$ atk6-dump_router6."$ColorR
          echo -e $Branco"$ atk6-extract_networks6."$ColorR
          echo -e $Branco"$ atk6-fake_dns6d."$ColorR
          echo -e $Branco"$ atk6-fake_mld26."$ColorR
          echo -e $Branco"$ atk6-fake_pim6."$ColorR
          echo -e $Branco"$ atk6-fake_solicitate6."$ColorR
          echo -e $Branco"$ atk6-flood_dhcpc6."$ColorR
          echo -e $Branco"$ atk6-flood_mldrouter6."$ColorR
          echo -e $Branco"$ atk6-flood_router6."$ColorR
          echo -e $Branco"$ atk6-flood_unreach6."$ColorR
          echo -e $Branco"$ atk6-fragrouter6."$ColorR
          echo -e $Branco"$ atk6-fuzz_ip6."$ColorR
          echo -e $Branco"$ atk6-inject_alive6."$ColorR
          echo -e $Branco"$ atk6-ndpexhaust26."$ColorR
          echo -e $Branco"$ atk6-parasite6."$ColorR
          echo -e $Branco"$ atk6-redir6."$ColorR
          echo -e $Branco"$ atk6-sendpees6."$ColorR
          echo -e $Branco"$ atk6-thcping6."$ColorR
          echo -e $Branco"$ atk6-toobigsniff6."$ColorR
          echo -e $BrancoBAD"Thc-Ipv6 Homepage: http://www.thc.org/thc-ipv6/"$ColorR
          echo -e $BrancoBAD"Github:"\
                                    "https://github.com/vanhauser-thc/thc-ipv6"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/thc-ipv6/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "30" ]; then
          echo -e $Color"Instalando Programa Tnscmd10g."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install tnscmd10g
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "30help" ]; then
          echo -e $BrancoBAD"Tnscmd10g:"$ColorR
          echo -e $Branco"Uma ferramenta para estimular o processo"$ColorR
          echo -e $Branco"oracle tnslsnr na porta 1521/tcp."$ColorR
          echo -e $BrancoBAD"Tnscmd10g Homepage: http://www.red-database-security.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/tnscmd10g/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "31" ]; then
          echo -e $Color"Instalando Programa Unix-Privesc-Check."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install unix-privesc-check
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "31help" ]; then
          echo -e $BrancoBAD"Sobre Unix-Privesc-Check:"$ColorR
          echo -e $Branco"Unix-privesc-checker e um script que roda em sistemas Unix"$ColorR
          echo -e $Branco"(testado em Solaris 9, HPUX 11, Varios Linuxes, FreeBSD 6.2)."$ColorR
          echo -e $Branco"Ele tenta encontrar configuracoes incorretas que"$ColorR
          echo -e $Branco"podem permitir que usuarios locais sem privilegios"$ColorR
          echo -e $Branco"encaminhem privilegios para outros usuarios ou acessem aplicativos"$ColorR
          echo -e $Branco"locais (por exemplo, bancos de dados)."$ColorR
          echo -e $Branco"Ele e escrito como um unico script de shell"$ColorR
          echo -e $Branco"para que possa ser facilmente carregado"$ColorR
          echo -e $Branco"e executado (em oposicao a un-tarred, compilado e instalado)."$ColorR
          echo -e $Branco"Ele pode ser executado como um usuario normal ou como root"$ColorR
          echo -e $Branco"(obviamente, ele faz um trabalho melhor quando executado como root"$ColorR
          echo -e $Branco"porque pode ler mais arquivos)."$ColorR
          echo -e $BrancoBAD"Unix-Privesc-Check Homepage:"\
                            "http://pentestmonkey.net/tools/audit/unix-privesc-check"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/unix-privesc-check/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "32" ]; then
          echo -e $Color"Instalando Programa Yersinia."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install yersinia
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "32help" ]; then
          echo -e $BrancoBAD"Sobre Yersinia:"$ColorR
          echo -e $Branco"Yersinia e uma estrutura para realizar ataques de camada 2."$ColorR
          echo -e $Branco"Ele foi projetado para tirar proveito de algumas fraquezas"$ColorR
          echo -e $Branco"em diferentes protocolos de rede."$ColorR
          echo -e $Branco"Ele pretende ser uma estrutura solida para analisar"$ColorR
          echo -e $Branco"e testar as redes e sistemas implantados."$ColorR
          echo -e $Branco"Ataques para os seguintes protocolos de rede"$ColorR
          echo -e $Branco"sao implementados nesta versao especifica:"$ColorR
          echo -e $Branco"* Spanning Tree Protocol (STP)."$ColorR
          echo -e $Branco"* Protocolo de descoberta da Cisco (CDP)."$ColorR
          echo -e $Branco"* Protocolo de entroncamento dinamico (DTP)."$ColorR
          echo -e $Branco"* Protocolo de configuracao dinamica de host (DHCP)."$ColorR
          echo -e $Branco"* Hot Standby Router Protocol (HSRP)."$ColorR
          echo -e $Branco"* 802.1q."$ColorR
          echo -e $Branco"* 802.1x."$ColorR
          echo -e $Branco"* Inter-Switch Link Protocol (ISL)."$ColorR
          echo -e $Branco"* Protocolo de entroncamento de VLAN (VTP)."$ColorR
          echo -e $Branco"$ yersinia."$ColorR
          echo -e $BrancoBAD"Yersinia Homepage: http://www.yersinia.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/yersinia/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "33" ]; then
          echo -e $Color"Instalndo Programa Xerosploit."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install git
          apt-get -y install sudo
          apt-get -y install python
          cd ~/
          git clone https://github.com/LionSec/xerosploit.git
          cd xerosploit && sudo python install.py
          cd ~/
          rm -rf xerosploit
          sudo xerosploit
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "33help" ]; then
          echo -e $BrancoBAD"Sobre Xerosploit:"$ColorR
          echo -e $Branco"O Xerosploit e um kit de ferramentas de teste de penetracao"$ColorR
          echo -e $Branco"cujo objetivo e realizar ataques man in the middle para fins de teste."$ColorR
          echo -e $Branco"Traz varios modulos que permitem realizar ataques eficientes, e tambem"$ColorR
          echo -e $Branco"permite realizar ataques de negacao de servico e varredura de portas."$ColorR
          echo -e $Branco"Alimentado por bettercap e nmap."$ColorR
          echo -e $BrancoBAD"Dependencias: nmap, hping3, build-essential, ruby-dev,"\
                  "libpcap-dev,\nlibgmp3-dev, tabulate, terminaltables."
          echo -e $BrancoBAD"Github: https://github.com/LionSec/xerosploit"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "34" ]; then
          echo -e $Color"Instalndo Programa GSD."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install git
          apt-get -y install sudo
          apt-get -y install python3
          apt-get -y install cython-doc
          apt-get -y install cython3
          cd ~/
          git clone https://github.com/glotzerlab/gsd
          cd gsd
          sudo python3 setup.py install
          cd ~/
          rm -rf gsd
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "34help" ]; then
          echo -e $BrancoBAD"Sobre GSD:"$ColorR
          echo -e $Branco"O formato de arquivo GSD e o formato de arquivo"$ColorR
          echo -e $Branco"nativo para HOOMD-blue."$ColorR
          echo -e $Branco"Os arquivos GSD armazenam trajetorias do estado do"$ColorR
          echo -e $Branco"sistema HOOMD-blue em um arquivo binario com acesso"$ColorR
          echo -e $Branco"aleatorio eficiente aos quadros."$ColorR
          echo -e $Branco"O GSD permite que todas as propriedades de particula"$ColorR
          echo -e $Branco"e topologia variem de um quadro para outro."$ColorR
          echo -e $Branco"Use a API GSD Python para especificar a"$ColorR
          echo -e $Branco"condicao inicial para uma simulacao HOOMD-blue"$ColorR
          echo -e $Branco"ou analise a saida da trajetoria com um script."$ColorR
          echo -e $Branco"Leia uma trajetoria GSD com uma ferramenta"$ColorR
          echo -e $Branco"de visualizacao para explorar o"$ColorR
          echo -e $Branco"comportamento da simulacao."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/glotzerlab/gsd"$ColorR
          echo -e $BrancoBAD"GSD Homepage: http://gsd.readthedocs.io/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "35" ]; then
          echo -e $Color"Instalndo Programa DHCPig."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dhcpig
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "35help" ]; then
          echo -e $BrancoBAD"Sobre DHCPig:"$ColorR
          echo -e $Branco"DHCPig inicia um ataque"$ColorR
          echo -e $Branco"avancado de esgotamento de DHCP."$ColorR
          echo -e $Branco"Ele consumira todos os IPs na LAN, impedira que novos"$ColorR
          echo -e $Branco"usuarios obtenham IPs, liberara todos os IPs"$ColorR
          echo -e $Branco"em uso e, em boa medida, enviara ARP gratuito"$ColorR
          echo -e $Branco"e desconectara todos os hosts do Windows."$ColorR
          echo -e $Branco"Ele e baseado na biblioteca scapy e solicita"$ColorR
          echo -e $Branco"privilegios de administrador para ser executado."$ColorR
          echo -e $Branco"Ele foi testado em varias distribuicoes Linux"$ColorR
          echo -e $Branco"e varios servidores DHCP (ISC, Windows 2k3/2k8)."$ColorR
          echo -e $Branco"$ dhcpig."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/kamorin/DHCPig"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dhcpig/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "36" ]; then
          echo -e $Color"Instalndo Programa Sipsak."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sipsak
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "36help" ]; then
          echo -e $BrancoBAD"Sobre Sipsak:"$ColorR
          echo -e $Branco"sipsak e uma pequena ferramenta de linha de comando"$ColorR
          echo -e $Branco"para desenvolvedores e administradores de aplicativos SIP"$ColorR
          echo -e $Branco"(Session Initiation Protocol)."$ColorR
          echo -e $Branco"Ele pode ser usado para alguns testes simples em aplicativos e dispositivos SIP."$ColorR
          echo -e $Branco"$ sipsak."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/nils-ohlmeier/sipsak"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sipsak/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "37" ]; then
          echo -e $Color"Instalndo Programa Spike."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install spike
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "37help" ]; then
          echo -e $BrancoBAD"Sobre Spike:"$ColorR
          echo -e $Branco"Quando voce precisa analisar um novo protocolo"$ColorR
          echo -e $Branco"de rede para estouros de buffer ou pontos"$ColorR
          echo -e $Branco"fracos semelhantes, o SPIKE e a ferramenta de escolha para profissionais."$ColorR
          echo -e $Branco"Embora exija um forte conhecimento de C"$ColorR
          echo -e $Branco"para usar, produz resultados inigualaveis no campo."$ColorR
          echo -e $Branco"$ citrix."$ColorR
          echo -e $Branco"$ dltest."$ColorR
          echo -e $Branco"$ generic_listen_tcp."$ColorR
          echo -e $Branco"$ generic_web_server_fuzz."$ColorR
          echo -e $Branco"$ halflife."$ColorR
          echo -e $Branco"$ msrpcfuzz_udp."$ColorR
          echo -e $Branco"$ pmspike."$ColorR
          echo -e $Branco"$ quake."$ColorR
          echo -e $Branco"$ ss_spike."$ColorR
          echo -e $Branco"$ webfuzz."$ColorR
          echo -e $Branco"$ closed_source_web_server_fuzz."$ColorR
          echo -e $Branco"$ do_post."$ColorR
          echo -e $Branco"$ generic_send_tcp."$ColorR
          echo -e $Branco"$ generic_web_server_fuzz2."$ColorR
          echo -e $Branco"$ line_send_tcp."$ColorR
          echo -e $Branco"$ ntlm2."$ColorR
          echo -e $Branco"$ post_fuzz."$ColorR
          echo -e $Branco"$ quakeserver."$ColorR
          echo -e $Branco"$ statd_spike."$ColorR
          echo -e $Branco"$ x11_spike."$ColorR
          echo -e $Branco"$ dceoversmb."$ColorR
          echo -e $Branco"$ generic_chunked."$ColorR
          echo -e $Branco"$ generic_send_udp."$ColorR
          echo -e $Branco"$ gopherd."$ColorR
          echo -e $Branco"$ msrpcfuzz."$ColorR
          echo -e $Branco"$ ntlm_brute."$ColorR
          echo -e $Branco"$ post_spike."$ColorR
          echo -e $Branco"$ sendmsrpc."$ColorR
          echo -e $Branco"$ sunrpcfuzz."$ColorR
          echo -e $BrancoBAD"Spike Homepage: http://www.immunitysec.com/resources-freesoftware.shtml"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/spike/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas02

     elif [ "$A" = "P13" ]; then
          Programas13

     elif [ "$A" = "P12" ]; then
          Programas12

     elif [ "$A" = "P11" ]; then
          Programas11

     elif [ "$A" = "P10" ]; then
          Programas10

     elif [ "$A" = "P09" ]; then
          Programas09

     elif [ "$A" = "P08" ]; then
          Programas08

     elif [ "$A" = "P07" ]; then
          Programas07

     elif [ "$A" = "P06" ]; then
          Programas06

     elif [ "$A" = "P05" ]; then
          Programas05

     elif [ "$A" = "P04" ]; then
          Programas04

     elif [ "$A" = "P03" ]; then
          Programas03

     elif [ "$A" = "P02" ]; then
          Programas02

     elif [ "$A" = "P01" ]; then
          Programas01

     elif [ "$A" = "Programas01" ]; then
          Programas01

     elif [ "$A" = "Programas02" ]; then
          Programas02

     elif [ "$A" = "Programas03" ]; then
          Programas03

     elif [ "$A" = "Programas04" ]; then
          Programas04

     elif [ "$A" = "Programas05" ]; then
          Programas05

     elif [ "$A" = "Programas06" ]; then
          Programas06

     elif [ "$A" = "Programas07" ]; then
          Programas07

     elif [ "$A" = "Programas08" ]; then
          Programas08

     elif [ "$A" = "Programas09" ]; then
          Programas09

     elif [ "$A" = "Programas10" ]; then
          Programas10

     elif [ "$A" = "Programas11" ]; then
          Programas11

     elif [ "$A" = "Programas12" ]; then
          Programas12

     elif [ "$A" = "Programas13" ]; then
          Programas13

     elif [ "$A" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$A" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$A" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$A" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$A" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Programas02
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Programas02
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Programas02
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Programas02
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Programas02
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Programas02
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas02
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas02
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas02
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas02
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas02
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas02
fi
}
Programas01B(){
echo -e $Color"\n\nColeta de Informacoes"$ColorR
echo -e $Color"
01) Knock4 SubDomain Scan        35) Netmask
1help Sobre Knock                35help Sobre Netmask
02) Termineter                   36) GoLismero
2help Sobre Termineter           36help Sobre GoLismero
03) katanaFramework              37) Maltego-Teeth
3help Sobre katanaFramework      37help Sobre Maltego-T
04) Dnstracer                    38) Dnswalk
4help Sobre dnstracer            38help Sobre Dnswalk
05) SSLh                         39) Goofile
5help Sobre SSLh                 39help Sobre Goofile
06) Social-Engineer-Toolkit      40) CaseFile
6help Sobre Toolkit              40help Sobre CaseFile
07) bing-ip2hosts                41) Maltego
7help Sobre bing-ip2hosts        41help Sobre Maltego
08) BinGoo [Dork scanner]        42) Braa
8help Sobre BinGoo               42help Sobre Braa
09) THC-IPV6                     43) DMitry
9help Sobre THC-IPV6             43help Sobre DMitry
10) URLCrazy                     44) EnumIAX
10help Sobre URLCrazy            44help Sobre EnumIAX
11) Cisco-Torch                  45) InTrace
11help Sobre Cisco-Torch         45help Sobre InTrace
12) Nmap                         46) Firewalk
12help Sobre Nmap                46help Sobre Firewalk
13) Ike-Scan                     47) DnsMap
13help Sobre Ike-Scan            47help Sobre DnsMap
14) BruteSpray                   48) NBTscan
14help Sobre BruteSpray          48help Sobre NBTscan
15) Dnsenum                      49) Fierce
15help Sobre Dnsenum             49help Sobre Fierce
16) DNSRecon                     50) iSMTP
16help Sobre DNSRecon            50help Sobre iSMTP
17) SSLstrip                     51) Unicornscan
17help Sobre SSLstrip            51help Sobre Unicornscan
18) Recon-ng                     52) Lbd
18help Sobre Recon-ng            52help Sobre Lbd
19) Metagoofil                   53) Masscan
19help Sobre Metagoofil          53help Sobre Masscan
20) DotDotPwn                    54) SET
20help Sobre DotDotPwn           54help Sobre SET
21) Fragrouter                   55) P0f
21help Sobre Fragrouter          55help Sobre P0f
22) SSLyze                       56) Snmpcheck
22help Sobre SSLyze              56help Sobre Snmpcheck
23) Enum4linux                   57) Sslcaudit
23help Sobre Rnum4linux          57help Sobre Sslcaudit
24) Smtp-user-enum               58) Twofi
24help Sobre Smtp-user-enum      58help Sobre Twofi
25) TLSSLed                      59) 0trace
25help Sobre TLSSLed             59help Sobre 0trace
26) TheHarvester                 60) Xplico
26help Sobre TheHarvester        60help Sobre Xplico
27) OWASP Maryam                 61) Hping3
27help Sobre OWASP Maryam        61help Sobre Hping3
28) Swaks                        62) OSRFramework
28help Sobre Swaks               62help Sobre OSRFra
29) SSLsplit                     63) Fping
29help Sobre SSLsplit            63help Sobre Fping
30) copy-Router-Config           64) Legion
30help Sobre Copy-router-config  64help Sobre Legion
31) Exploitdb                    65) Xprobe
31help Sobre Exploitdb           65help Sobre Xprobe
32) Parsero                      66) Arping
32help Sobre Parsero             66help Sobre Arping
33) Amap                         67) Irpas
33help Sobre Amap                67help Sobre Irpas
34) Wireshark                    68) Onesixtyone
34help Sobre Wireshark           68help Sobre Onesixtyone
"$ColorR

echo -e "\n"
echo -e $Verde"Install all Information Gathering tools"$ColorR
echo -e $Verde"(x) (Instalar Todas as ferramentas)"$ColorR
echo -e "\n\n"
}
PrompTProgramas01(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" B
}
All_Tools_01(){
apt-get -y update 1> /dev/null 2> /dev/null
apt-get -y install termineter
apt-get -y install nmap
apt-get -y install braa
apt-get -y install lbd
apt-get -y install irpas
apt-get -y install p0f
apt-get -y install arping
apt-get -y install onesixtyone
apt-get -y install iputils-arping
apt-get -y install xprobe
apt-get -y install legion
apt-get -y install xplico
apt-get -y install qsslcaudit
apt-get -y install maltego-teeth
apt-get -y install hping3
apt-get -y install cisco-torch
apt-get -y install dotdotpwn
apt-get -y install urlcrazy
apt-get -y install sslyze
apt-get -y install nbtscan
apt-get -y install dnsmap
apt-get -y install masscan
apt-get -y install fierce
apt-get -y install tlssled
apt-get -y install firewalk
apt-get -y install casefile
apt-get -y install dnswalk
apt-get -y install sslsplit
apt-get -y install exploitdb
apt-get -y install fping
apt-get -y install enumiax
apt-get -y install twofi
apt-get -y install dmitry
apt-get -y install intrace
apt-get -y install set
apt-get -y install ike-scan
apt-get -y install osrframework
apt-get -y install amap
apt-get -y install 0trace
apt-get -y install unicornscan
apt-get -y install ismtp
apt-get -y install maryam
apt-get -y install ace-voip
apt-get -y install goofile
apt-get -y install theharvester
apt-get -y install smtp-user-enum
apt-get -y install enum4linux
apt-get -y install brutespray
apt-get -y install parsero
apt-get -y install copy-router-config
apt-get -y install swaks
apt-get -y install fragrouter
apt-get -y install wireshark
apt-get -y install sslh
apt-get -y install metagoofil
apt-get -y install snmpcheck
apt-get -y install recon-ng
apt-get -y install sslstrip
apt-get -y install dnsrecon
apt-get -y install thc-ipv6
apt-get -y install netmask
apt-get -y install dnstracer
apt-get -y install dnsenum
apt-get -y install python-is-python2
apt-get -y install knockpy
apt-get -y install lynx
apt-get -y install sudo
sudo bash
apt-get -y install python2.7 python2.7-dev python-pip docutils git perl nmap sslscan
cd /opt
git clone https://github.com/golismero/golismero.git
cd golismero
pip2 install -r requirements.txt
pip2 install -r requirements_unix.txt
ln -s /opt/golismero/golismero.py /usr/bin/golismero
cd ~/
git clone https://github.com/Hood3dRob1n/BinGoo.git
cd BinGoo
chmod +x bingoo
./bingoo
cd ~/
rm -rf BinGoo
git clone https://github.com/urbanadventurer/bing-ip2hosts.git
chmod +x bing-ip2hosts/bing-ip2hosts
cp bing-ip2hosts/bing-ip2hosts /usr/local/bin
cd ~/
rm -rf bing-ip2hosts
git clone https://github.com/trustedsec/social-engineer-toolkit.git
cd social-engineer-toolkit
python setup.py install
sudo setoolkit
cd ~/
rm -rf social-engineer-toolkit
git clone https://github.com/PowerScript/katanaFramework.git
cd katanaFramework
chmod +x dependencies
sudo sh dependencies
chmod a+x install
sudo python install
cd ~/
rm -rf katanaFramework
}
Programas01()
{
Programas01B
PrompTProgramas01
if [ "$B" = "01" ]; then
   B="1"
fi
if [ "$B" = "02" ]; then
   B="2"
fi
if [ "$B" = "03" ]; then
   B="3"
fi
if [ "$B" = "04" ]; then
   B="4"
fi
if [ "$B" = "05" ]; then
   B="5"
fi
if [ "$B" = "06" ]; then
   B="6"
fi
if [ "$B" = "07" ]; then
   B="7"
fi
if [ "$B" = "08" ]; then
   B="8"
fi
if [ "$B" = "09" ]; then
   B="9"
fi
while [ "$B" ];
do
  if [ "$B" ]; then
     if [ "$B" = "1" ]; then
        echo -e $Color"Instalando Programa Knockpy."$Color
        apt-get -y update 1> /dev/null 2> /dev/null
        apt-get -y install knockpy
        sleep 1
        echo -e $Color"Processo Finalizado."$ColorR
        echo -e $Color"De um Enter para Restaurar"\
                      "a Interface Padrao."$ColorR
        sleep 1
        PrompTProgramas01

     elif [ "$B" = "1help" ]; then
          echo -e $BrancoBAD"Sobre Knock:"$ColorR
          echo -e $Branco"Knockpy e uma ferramenta python3"\
                         "projetada para"$ColorR
          echo -e $Branco"enumerar rapidamente subdominios em um dominio"$ColorR
          echo -e $Branco"de destino por meio de ataque de dicionario."$ColorR
          echo -e $BrancoBAD"Knock Subdomain Scan v5.3.0 2022*"$ColorR
          echo -e $Branco"$ knockpy."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/guelfoweb/knock"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "x" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_01
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "X" ]; then
          echo -e $Roxo"INSTALANDO TODAS AS FERRAMENTAS."$Color
          sleep 2
          All_Tools_01
          echo -e $Roxo"TODOS OS PACOTES FORAM INSTALADOS."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "2" ]; then
          echo -e $Color"Instalando Programa Termineter."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install termineter
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "2help" ]; then
          echo -e $BrancoBAD"Sobre Termineter:"$ColorR
          echo -e $Branco"Este pacote contem uma estrutura Python"$ColorR
          echo -e $Branco"que fornece uma plataforma para o teste de seguranca"$ColorR
          echo -e $Branco"de medidores inteligentes."$ColorR
          echo -e $Branco"Implementa os protocolos C1218 e C1219"$ColorR
          echo -e $Branco"para comunicacao atraves de uma interface optica."$ColorR
          echo -e $Branco"Atualmente ha suporte para medidores usando C1219-2007"$ColorR
          echo -e $Branco"com conjuntos de caracteres de 7 bits."$ColorR
          echo -e $Branco"Esta e, a configuracao mais comum encontrada"$ColorR
          echo -e $Branco"na America do Norte."$ColorR
          echo -e $Branco"O Termineter se comunica com Smart Meters"$ColorR
          echo -e $Branco"por meio de uma conexao usando uma sonda"$ColorR
          echo -e $Branco"otica ANSI tipo 2 com uma interface serial."$ColorR
          echo -e $Branco"$ termineter."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/securestate/termineter"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/termineter/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "3" ]; then
          echo -e $Color"Instalando Programa katanaFramework."$Color
          cd ~/
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install git sudo
          git clone https://github.com/PowerScript/katanaFramework.git
          cd katanaFramework
          chmod +x dependencies
          sudo sh dependencies
          chmod a+x install
          sudo python install
          cd ~/
          rm -rf katanaFramework
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "3help" ]; then
          echo -e $BrancoBAD"Sobre katanaFramework:"$ColorR
          echo -e $Branco"katana e um framework escrito em python"$ColorR
          echo -e $Branco"para fazer testes de penetracao,"\
                         "baseado em uma"$ColorR
          echo -e $Branco"estrutura simples e abrangente pra"\
                         "qualquer pessoa"$ColorR
          echo -e $Branco"usar, modificar e compartilhar,"\
                         "o objetivo e unificar"$ColorR
          echo -e $Branco"ferramentas que servem para profissionais"\
                         "na hora de"$ColorR
          echo -e $Branco"fazer um teste de penetracao ou simplesmente"\
                         "como uma"$ColorR
          echo -e $Branco"ferramenta de rotina. a versao atual nao"\
                         "e completamente"$ColorR
          echo -e $Branco"estavel, e recomendado atualizar toda vez que"\
                         "for usa-la"$ColorR
          echo -e $Branco"(ktf.update -f)."$ColorR
          echo -e $Branco"$ ktf.console."$ColorR
          echo -e BrancoBAD"Github:"\
                           "https://github.com/PowerScript/katanaFramework"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "4" ]; then
          echo -e $Color"Instalando Programa Dnstracer."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dnstracer
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "4help" ]; then
          Dnstracer(){
          echo -e 'Tracing to example.com[a] via 192.168.1.1,'\
                  'maximum of 3 retries'
          echo -e '192.168.1.1 (192.168.1.1) IP HEADER'
          echo -e '- Destination address:  192.168.1.1'
          echo -e 'DNS HEADER (send)'
          }
          echo -e $BrancoBAD"Sobre Dnstracer:"$ColorR
          echo -e $Branco"O dnstracer determina de onde um determinado"$ColorR
          echo -e $Branco"Servidor de Nomes de Dominio (DNS)"\
                         "obtem suas informacoes"$ColorR
          echo -e $Branco"para um determinado nome de host e"\
                         "segue a cadeia de"$ColorR
          echo -e $Branco"servidores DNS de volta a"\
                         "resposta autorizada."$ColorR
          echo -e $BrancoBAD"Exemplo de uso do dnstracer:"$ColorR
          echo -e $Branco"Examine um dominio (example.com),"\
                         "tente novamente"$ColorR
          echo -e $Branco"ate 3 vezes (-r 3) e exiba a"\
                         "saida detalhada (-v):"$ColorR
          echo -e $BrancoBAD"dnstracer -r 3 -v example.com"$Verde
          Dnstracer
          echo -e $BrancoBAD"Github: https://github.com/Orc/dnstracer"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dnstracer/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "5" ]; then
          echo -e $Color"Instalando Programa SSLh."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sslh
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "5help" ]; then
          echo -e $BrancoBAD"Sobre SSLh:"$ColorR
          echo -e $Branco"sslh permite aceitar conexoes HTTPS, SSH,"$ColorR
          echo -e $Branco"OpenVPN, tinc e XMPP na mesma porta."$ColorR
          echo -e $Branco"Isso torna possivel conectar-se a qualquer um desses"$ColorR
          echo -e $Branco"servidores na porta 443 (por exemplo, de dentro"$ColorR
          echo -e $Branco"de um firewall corporativo, que quase nunca bloqueia"$ColorR
          echo -e $Branco"a porta 443) enquanto ainda atende HTTPS nessa porta."$ColorR
          echo -e $BrancoBAD"SSLh Homepage: http://www.rutschle.net/tech/sslh/README.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sslh/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "6" ]; then
          echo -e $Color"Instalando Programa Social-Engineer-Toolkit."$Color
          cd ~/
          apt-get -y update 1> /dev/null 2> /dev/null
          if [ -f "/usr/bin/python" ]; then
             apt-get -y install python-is-python2
          fi
          apt-get -y install git
          apt-get -y install sudo
          git clone https://github.com/trustedsec/social-engineer-toolkit.git
          cd social-engineer-toolkit && python setup.py install
          sudo setoolkit
          cd ~/
          rm -rf social-engineer-toolkit
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "6help" ]; then
          echo -e $BrancoBAD"Sobre Social-Engineer-Toolkit:"$ColorR
          echo -e $Branco"O Social-Engineer Toolkit e uma estrutura"\
                         "de teste de penetracao"$ColorR
          echo -e $Branco"de codigo aberto projetada para"\
                         "engenharia social."$ColorR
          echo -e $Branco"O SET possui varios vetores de"\
                         "ataque personalizados"\
                         "que permitem"$ColorR
          echo -e $Branco"que voce faca um ataque crivel rapidamente."$ColorR
          echo -e $Branco"A SET e um produto da TrustedSec, LLC – uma empresa"\
                         "de consultoria"$ColorR
          echo -e $Branco"em seguranca da informacao localizada em"\
                         "Cleveland, Ohio."$ColorR
          echo -e $BrancoBAD"Escrito Por: David Kennedy (ReL1K) @HackingDave"$ColorR
          echo -e $Branco"$ setookit."$ColorR
          echo -e $BrancoBAD"Homepage: https://www.trustedsec.com"$ColorR
          echo -e $BrancoBAD"Github:"\
                            "https://github.com/trustedsec/social-engineer-toolkit"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "7" ]; then
          echo -e $Color"Instalando Programa bing-ip2hosts."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install bing-ip2hosts
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "7help" ]; then
          echo -e $BrancoBAD"Sobre Big-ip2hosts:"$ColorR
          echo -e $Branco"Este pacote contem um web scraper do Bing.com"$ColorR
          echo -e $Branco"que descobre nomes de host por endereco IP."\
                         "O Bing e o principal"
          echo -e $Branco"mecanismo de pesquisa da Microsoft,"\
                         "anteriormente conhecido como MSN Search"\
                         "e Live Search."$ColorR
          echo -e $Branco"Ele fornece um recurso exclusivo para"\
                         "mecanismos de pesquisa - permite pesquisar"\
                         "por endereco IP."$ColorR
          echo -e $Branco"Bing-ip2hosts usa esse recurso."$ColorR
          echo -e $Branco"Ele pode ser usado para descobrir subdominios"\
                         "e outros dominios relacionados."$ColorR
          echo -e $Branco"Tambem ajuda a identificar sites"\
                         "hospedados em um ambiente de"\
                         "hospedagem compartilhada."$ColorR
          echo -e $Branco"Essa tecnica segue as melhores praticas"\
                         "durante a fase de reconhecimento"$ColorR
          echo -e $Branco"de um teste de penetracao ou recompensa"\
                         "de bugs, para expandir a superficie de ataque"\
                         "do alvo."$ColorR
          echo -e $Branco"Ao contrario de muitas outras ferramentas"\
                         "de reconhecimento que raspam a web do Bing,"$ColorR
          echo -e $Branco"esta ferramenta tem um comportamento"\
                         "de raspagem inteligente para maximizar a"\
                         "descoberta de nomes de host."$ColorR
          echo -e $BrancoBAD"Bing-Ip2hosts Homepage:"\
                            "https://www.morningstarsecurity.com/research/bing-ip2hosts"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/bing-ip2hosts/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "8" ]; then
          echo -e $Color"Instalando Programa BinGoo."$Color
          cd ~/
          apt-get -y install lynx git
          git clone https://github.com/Hood3dRob1n/BinGoo.git
          cd BinGoo
          chmod +x bingoo
          ./bingoo
          cd ~/
          rm -rf BinGoo
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "8help" ]; then
          echo -e $BrancoBAD"Sobre BinGoo:"$ColorR
          echo -e $Branco"BinGoo e uma versao de uma ferramenta"\
                         "de dorking tudo-em-um escrita em puro bash."$ColorR
          echo -e $Branco"Ele aproveita as principais paginas de pesquisa"\
                         "do Google E do Bing para extrair"$ColorR
          echo -e $Branco"uma grande quantidade de links com base nos"\
                         "termos de pesquisa fornecidos."$ColorR
          echo -e $Branco"Voce pode optar por pesquisar um unico dork por"\
                         "vez ou fazer"$ColorR
          echo -e $Branco"listas com um dork por linha e realizar varreduras"\
                         "em massa."$ColorR
          echo -e $Branco"Tambem inclui alguns recursos interessantes"\
                         "para facilitar a vida, como Geo dorking"$ColorR
          echo -e $Branco"Com base no tipo de dominio ou codigos de pais de"\
                         "dominio ou verificador de"\
                         "hospedagem compartilhada"$ColorR
          echo -e $Branco"que usa a pesquisa pre-configurada do Bing"\
                         "e uma lista de dork para encontrar"\
                         "possiveis vulnerabilidadesm"$ColorR
          echo -e $Branco"em outros sites no mesmo servidor. "$ColorR
          echo -e $BrancoBAD"Github: https://github.com/Hood3dRob1n/BinGoo"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "9" ]; then
          echo -e $Color"Instalando Programa THC-IPV6."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install thc-ipv6
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "9help" ]; then
          echo -e $BrancoBAD"Sobre THC-IPV6:"$ColorR
          echo -e $Branco"Kit de ferramentas de ataque para testar as"\
                         "fraquezas dos protocolos IPv6 e ICMPv6."$ColorR
          echo -e $Branco"Algumas das ferramentas incluidas:"$ColorR
          echo -e $Branco"$ alive6: uma varredura viva eficaz."$ColorR
          echo -e $Branco"$ denial6: tente uma colecao de testes de"\
                         "negacao de servico contra um alvo."$ColorR
          echo -e $Branco"$ detect-new-ip6: detecta novos dispositivos"\
                         "ip6 que ingressam na rede."$ColorR
          echo -e $Branco"$ dnsdict6: bruteforcer de dicionario dns"\
                         "ipv6 paralelizado."$ColorR
          echo -e $Branco"$ dos-new-ip6: detecta novos dispositivos"\
                         "ip6 e informa que o IP escolhido colide"\
                         "na rede (DOS)."$ColorR
          echo -e $Branco"$ exploit6: teste vulnerabilidades IPv6"\
                         "conhecidas em um alvo."$ColorR
          echo -e $Branco"$ fake_mld6: anuncie-se em um grupo multicast"\
                         "de sua escolha na rede."$ColorR
          echo -e $Branco"$ fake_router6: anuncie-se como um"\
                         "roteador na rede."$ColorR
          echo -e $Branco"$ flood_advertise6: inunda um alvo com"\
                         "anuncios aleatorios de vizinhos."$ColorR
          echo -e $Branco"$ flood_router6: inunda um alvo com anuncios"\
                         "aleatorios de roteador."$ColorR
          echo -e $Branco"$ implementation6: executa varias verificacoes"\
                         "de implementacao no IPv6."$Color
          echo -e $Branco"$ parasite6: spoofer de solicitacao/anuncio"\
                         "de vizinho icmp."$ColorR
          echo -e $Branco"$ redir6: redireciona o trafego para voce de"\
                         "forma inteligente (man-in-the-middle)"$ColorR
          echo -e $Branco"com um spoofer de redirecionamento"\
                         "icmp6 inteligente."$ColorR
          echo -e $Branco"$ rsmurf6: smurfer remoto (conhecido por"\
                         "funcionar apenas contra Linux no momento)."$ColorR
          echo -e $Branco"$ thcping6: envia um pacote ping6 feito a mao."$ColorR
          echo -e $Branco"$ toobig6: Mtu decrescente com a mesma inteligencia que redir6.."$ColorR
          echo -e $Branco"$ atk6-address6."$ColorR
          echo -e $Branco"$ atk6-connsplit6."$ColorR
          echo -e $Branco"$ atk6-denial6."$ColorR
          echo -e $Branco"$ atk6-dnsdict6."$ColorR
          echo -e $Branco"$ atk6-dos-new-ip6."$ColorR
          echo -e $Branco"$ atk6-exploit6."$ColorR
          echo -e $Branco"$ atk6-fake_advertise6."$ColorR
          echo -e $Branco"$ atk6-fake_dnsupdate6."$ColorR
          echo -e $Branco"$ atk6-fake_mld6."$ColorR
          echo -e $Branco"$ atk6-fake_router26."$ColorR
          echo -e $Branco"$ atk6-flood_mld26."$ColorR
          echo -e $Branco"$ atk6-flood_redir6."$ColorR
          echo -e $Branco"$ atk6-flood_rs6."$ColorR
          echo -e $Branco"$ atk6-four2six."$ColorR
          echo -e $Branco"$ atk6-fuzz_dhcpc6."$ColorR
          echo -e $Branco"$ atk6-implementation6."$ColorR
          echo -e $Branco"$ atk6-inverse_lookup6."$ColorR
          echo -e $Branco"$ atk6-ndpexhaust6."$ColorR
          echo -e $Branco"$ atk6-passive_discovery6."$ColorR
          echo -e $Branco"$ atk6-redirsniff6."$ColorR
          echo -e $Branco"$ atk6-sendpeesmp6."$ColorR
          echo -e $Branco"$ atk6-thcsyn6."$ColorR
          echo -e $Branco"$ atk6-trace6."$ColorR
          echo -e $Branco"$ atk6-alive6."$ColorR
          echo -e $Branco"$ atk6-covert_send6."$ColorR
          echo -e $Branco"$ atk6-detect-new-ip6."$ColorR
          echo -e $Branco"$ atk6-dnsrevenum6."$ColorR
          echo -e $Branco"$ atk6-dump_dhcp6."$ColorR
          echo -e $Branco"$ atk6-extract_hosts6."$ColorR
          echo -e $Branco"$ atk6-fake_dhcps6."$ColorR
          echo -e $Branco"$ atk6-fake_mipv6."$ColorR
          echo -e $Branco"$ atk6-fake_mldrouter6."$ColorR
          echo -e $Branco"$ atk6-fake_router6."$ColorR
          echo -e $Branco"$ atk6-flood_advertise6."$ColorR
          echo -e $Branco"$ atk6-flood_mld6."$ColorR
          echo -e $Branco"$ atk6-flood_router26."$ColorR
          echo -e $Branco"$ atk6-flood_solicitate6."$ColorR
          echo -e $Branco"$ atk6-fragmentation6."$ColorR
          echo -e $Branco"$ atk6-fuzz_dhcps6."$ColorR
          echo -e $Branco"$ atk6-implementation6d."$ColorR
          echo -e $Branco"$ atk6-kill_router6."$ColorR
          echo -e $Branco"$ atk6-node_query6."$ColorR
          echo -e $Branco"$ atk6-randicmp6."$ColorR
          echo -e $Branco"$ atk6-rsmurf6."$ColorR
          echo -e $Branco"$ atk6-smurf6."$ColorR
          echo -e $Branco"$ atk6-toobig6."$ColorR
          echo -e $Branco"$ atk6-connect6."$ColorR
          echo -e $Branco"$ atk6-covert_send6d."$ColorR
          echo -e $Branco"$ atk6-detect_sniffer6."$ColorR
          echo -e $Branco"$ atk6-dnssecwalk."$ColorR
          echo -e $Branco"$ atk6-dump_router6."$ColorR
          echo -e $Branco"$ atk6-extract_networks6."$ColorR
          echo -e $Branco"$ atk6-fake_dns6d."$ColorR
          echo -e $Branco"$ atk6-fake_mld26."$ColorR
          echo -e $Branco"$ atk6-fake_pim6."$ColorR
          echo -e $Branco"$ atk6-fake_solicitate6."$ColorR
          echo -e $Branco"$ atk6-flood_dhcpc6."$ColorR
          echo -e $Branco"$ atk6-flood_mldrouter6."$ColorR
          echo -e $Branco"$ atk6-flood_router6."$ColorR
          echo -e $Branco"$ atk6-flood_unreach6."$ColorR
          echo -e $Branco"$ atk6-fragrouter6."$ColorR
          echo -e $Branco"$ atk6-fuzz_ip6."$ColorR
          echo -e $Branco"$ atk6-inject_alive6."$ColorR
          echo -e $Branco"$ atk6-ndpexhaust26."$ColorR
          echo -e $Branco"$ atk6-parasite6."$ColorR
          echo -e $Branco"$ atk6-redir6."$ColorR
          echo -e $Branco"$ atk6-sendpees6."$ColorR
          echo -e $Branco"$ atk6-thcping6."$ColorR
          echo -e $Branco"$ atk6-toobigsniff6."$ColorR
          echo -e $BrancoBAD"Thc-Ipv6 Homepage: http://www.thc.org/thc-ipv6/"$ColorR
          echo -e $BrancoBAD"Github:"\
                                    "https://github.com/vanhauser-thc/thc-ipv6"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/thc-ipv6/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "10" ]; then
          echo -e $Color"Instalando Programa URLCrazy."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install urlcrazy
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "10help" ]; then
          echo -e $BrancoBAD"Sobre URLCrazy:"$ColorR
          echo -e $Branco"O URLCrazy permite gerar e testar erros"\
                         "de digitacao e variacoes de dominio"$ColorR
          echo -e $Branco"para detectar e executar erros de digitacao,"\
                         "sequestro de URL, phishing"\
                         "e\nespionagem corporativa."$ColorR
          echo -e $BrancoBAD"Author: Andrew Horton (urbanadventurer)"$ColorR
          echo -e $BrancoBAD"Pagina Web:"\
                            "http://www.morningstarsecurity.com/research/urlcrazy"$ColorR
          echo -e $BrancoBAD"Github:"\
                            "https://github.com/urbanadventurer/urlcraz"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/urlcrazy/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "11" ]; then
          echo -e $Color"Instalando Programa Cisco-Torch."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install cisco-torch
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "11help" ]; then
          echo -e $BrancoBAD"Cisco Descricao:"$ColorR
          echo -e $Branco"As ferramentas semelhantes do scanner"\
                         "de dispositivo Cisco sao"$ColorR
          echo -e $Branco"o uso extensivo de bifurcacao para iniciar"\
                         "varios processos de varredura"$ColorR
          echo -e $Branco"em segundo plano para maxima eficiencia"\
                         "de varredura."$ColorR
          echo -e $Branco"Alem disso, ele usa varios metodos de"\
                         "impressao digital da camada de aplicativo"$ColorR
          echo -e $Branco"simultaneamente, se necessario. Queriamos algo"\
                         "rapido para descobrir hosts remotos da Cisco"$ColorR
          echo -e $Branco"executando servicos Telnet, SSH, Web, NTP,"\
                         "TFTP e SNMP e lancar ataques de"\
                         "dicionario contra"$ColorR
          echo -e $Branco"os servicos descobertos, incluindo ataque"\
                         "de comunidade SNMP (voce gostaria da"\
                         "lista community.txt :-)"$ColorR
          echo -e $Branco"e servidores TFTP (nome do arquivo de"\
                         "configuracao bruteforcing com a seguinte"\
                         "drenagem de configuracao)."$ColorR
          echo -e $Branco"A ferramenta tambem pode obter arquivos"\
                         "de configuracao do dipositivo"$ColorR
          echo -e $Branco"automaticamente se a comunidade SNMP"\
                         "RW for encontrada."$ColorR
          echo -e $BrancoBAD"Github:"\
                            "https://github.com/foreni-packages/cisco-torch"$ColorR
          echo -e $BrancoBAD"Cisco-Torch Homepage:"\
                            "https://www.kali.org/tools/cisco-torch/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "12" ]; then
          echo -e $Color"Instalando Programa Nmap."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install nmap
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "12help" ]; then
          echo -e $BrancoBAD"Sobre Nmap:"$ColorR
          echo -e $Branco"Nmap e uma ferramenta de linha"\
                         "de comando para exploracao de"$ColorR
          echo -e $Branco"rede ou auditoria de seguranca."$ColorR
          echo -e $Branco"Ele suporta varredura de ping (determinar"\
                         "quais hosts estao ativos),"$ColorR
          echo -e $Branco"muitas tecnicas de varredura de portas"\
                         "(determinar quais servicos os hosts"\
                         "estao oferecendo)"$ColorR
          echo -e $Branco"e impressao digital TCP/IP (identificacao do"\
                         "sistema operacional do host remoto)."$ColorR
          echo -e $BrancoBAD"Web Site: https://nmap.org/"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/nmap/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/nmap/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "13" ]; then
          echo -e $Color"Instando Programa Ike-Scan."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ike-scan
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "13help" ]; then
          echo -e $BrancoBAD"Sobre Ike-Scan:"$ColorR
          echo -e $Branco"O ike-scan descobre hosts IKE e tambem"$ColorR
          echo -e $Branco"pode imprimi-los usando o padrao de backoff"$ColorR
          echo -e $Branco"de retransmissao."$ColorR
          echo -e $BrancoBAD"ike-scan faz duas coisas:"$ColorR
          echo -e $Branco"a) Descoberta: Determine quais hosts"$ColorR
          echo -e $Branco"estao executando IKE."$ColorR
          echo -e $Branco"Isso e feito exibindo os hosts que respondem"$ColorR
          echo -e $Branco"as solicitacoes IKE enviadas pelo ike-scan."$ColorR
          echo -e $Branco"b) Impressao digital: Determine qual implementacao"$ColorR
          echo -e $Branco"de IKE os hosts estao usando."$ColorR
          echo -e $Branco"Isso e feito registrando os tempos dos"$ColorR
          echo -e $Branco"pacotes de resposta IKE dos hosts"$ColorR
          echo -e $Branco"de destino e comparando o padrao de retirada"$ColorR
          echo -e $Branco"de retransmissao observado"$ColorR
          echo -e $Branco"com os padroes conhecidos."$ColorR
          echo -e $Branco"“O conceito de impressao digital de backoff"$ColorR
          echo -e $Branco"de retransmissao e discutido em mais detalhes"$ColorR
          echo -e $Branco"no papel de impressao digital de backoff UDP"$ColorR
          echo -e $Branco"que deve ser incluido no kit ike-scan"$ColorR
          echo -e $Branco"como udp-backoff-fingerprinting-paper.txt.”"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/royhills/ike-scan"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ike-scan/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "14" ];then
          echo -e $Color"Instalando Programa BruteSpray."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install brutespray
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "14help" ]; then
          echo -e $BrancoBAD"Sobre BruteSpray:"$ColorR
          echo -e $Branco"BruteSpray pega a saida nmap GNMAP/XML"\
                         "e automaticamente"$ColorR
          echo -e $Branco"servicos de forca bruta com credenciais"\
                         "padrao usando Medusa."$ColorR
          echo -e $Branco"O BruteSpray pode ate encontrar portas"$ColorR
          echo -e $Branco"nao padrao usando o -sV dentro do Nmap."$ColorR
          echo -e $BrancoBAD"Criado por: Shane Young/@x90skysn3k"\
                  "&& Jacob Robles/@shellfail"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/x90skysn3k/brutespray"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/brutespray/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "15" ]; then
          echo -e $Color"Instalando Programa Dnsenum."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dnsenum
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "15help" ];then
          echo -e $BrancoBAD"Sobre Dnsenum:"$ColorR
          echo -e $BrancoBAD"dnsenum e um script perl que enumera"\
                            "informacoes de DNS"$ColorR
          echo -e $Branco"script perl multithread para enumerar"\
                         "informacoes de DNS"$ColorR
          echo -e $Branco"de um dominio e descobrir blocos de ip"\
                         "nao contiguos."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/SparrowOchon/dnsenum2"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dnsenum/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "16" ]; then
          echo -e $Color"Instalando Programa DNSRecon."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dnsrecon
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

    elif [ "$B" = "16help" ]; then
          echo -e $BrancoBAD"Sobre DNSRecon:"$ColorR
          echo -e $Branco"Poderoso script de enumeracao de DNS"$ColorR
          echo -e $Branco"DNSRecon e um script Python que oferece"$ColorR
          echo -e $Branco"a capacidade de executa:"$ColorR
          echo -e $Branco"* Verifique todos os registros NS para"\
                         "transferencias de zona."$ColorR
          echo -e $Branco"* Enumerar registros DNS gerais para um"$ColorR
          echo -e $Branco"determinado dominio (MX, SOA, NS, A,"\
                         "AAAA, SPFe TXT)."$ColorR
          echo -e $Branco"* Executar Enumeracao de Registro SRV comum."$ColorR
          echo -e $Branco"* Expansao do Dominio de Primeiro"\
                         "Nivel (TLD)."$ColorR
          echo -e $Branco"* Verifique a resolucao curinga."$ColorR
          echo -e $Branco"* Subdominio Brute Force e registros"$ColorR
          echo -e $Branco"de host A e AAAA dados um dominio e uma"$ColorR
          echo -e $Branco"lista de palavras."$ColorR
          echo -e $Branco"* Execute uma pesquisa de registro PTR para"$ColorR
          echo -e $Branco"um determinado intervalo de IP ou CIDR."$ColorR
          echo -e $Branco"* Verifique os registros em cache de"\
                         "um servidor"$ColorR
          echo -e $Branco"DNS para A, AAAA e CNAME"$ColorR
          echo -e $Branco"* Os registros forneceram uma lista"\
                         "de registros"$ColorR
          echo -e $Branco"de host em um arquivo de texto"\
                         "para verificar."$ColorR
          echo -e $Branco"* Enumerar hosts e subdominios usando"\
                         "o Google"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/darkoperator/dnsrecon"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dnsrecon/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "17" ]; then
          echo -e $Color"Instalando Programa SSLstrip."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sslstrip
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "17help" ]; then
          echo -e $BrancoBAD"Sobre SSLstrip:"$ColorR
          echo -e $Branco"sslstrip e uma ferramenta que sequestra"$ColorR
          echo -e $Branco"de forma transparente o trafego HTTP"$ColorR
          echo -e $Branco"em uma rede, observa links e redirecionamentos HTTPS"$ColorR
          echo -e $Branco"e, em seguida, mapeia esses links em links HTTP"$ColorR
          echo -e $Branco"semelhantes ou links HTTPS semelhantes"$ColorR
          echo -e $Branco"a homografos."$ColorR
          echo -e $Branco"Ele tambem suporta modos para fornecer"$ColorR
          echo -e $Branco"um favicon que se parece com um icone"$ColorR
          echo -e $Branco"de cadeado, registro seletivo"$ColorR
          echo -e $Branco"e negacao de sessao."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/L1ghtn1ng/sslstrip"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sslstrip/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "18" ]; then
          echo -e $Color"Instalando Programa Recon-ng."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install recon-ng
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "18help" ]; then
          echo -e $BrancoBAD"Sobre Recon-ng:"$ColorR
          echo -e $Branco"O Recon-ng e um framework de Reconhecimento"$ColorR
          echo -e $Branco"da Web completo escrito em Python."$ColorR
          echo -e $Branco"Completo com modulos independentes, interacao"$ColorR
          echo -e $Branco"com banco de dados, funcoes de conveniencia"$ColorR
          echo -e $Branco"incorporadas, ajuda interativa e conclusao"$ColorR
          echo -e $Branco"de comandos, o Recon-ng fornece um ambiente"$ColorR
          echo -e $Branco"poderoso no qual o reconhecimento baseado na"$ColorR
          echo -e $Branco"web de codigo aberto pode ser conduzido de"$ColorR
          echo -e $Branco"forma rapida e completa."$ColorR
          echo -e $Branco"Recon-ng tem uma aparencia semelhante ao"$ColorR
          echo -e $Branco"Metasploit Framework, reduzindo a curva"$ColorR
          echo -e $Branco"de aprendizado para alavancar o framework."$ColorR
          echo -e $Branco"No entanto, e bem diferente."$ColorR
          echo -e $Branco"O Recon-ng nao se destina a competir com"$ColorR
          echo -e $Branco"os frameworks existentes, pois e projetado"$ColorR
          echo -e $Branco"exclusivamente para reconhecimento de codigo"$ColorR
          echo -e $Branco"aberto baseado na web. Se voce quiser"$ColorR
          echo -e $Branco"explorar, use o Metasploit Framework."$ColorR
          echo -e $Branco"Se voce quiser Engenharia Social, use o Kit"$ColorR
          echo -e $Branco"de Ferramentas Social-Engineer Toolkit."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/lanmaster53/recon-ng"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/recon-ng/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "19" ]; then
          echo -e $Color"Instalando Programa Metagoofil."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install metagoofil
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "19help" ]; then
          echo -e $BrancoBAD"Sobre Metagoofil:"$ColorR
          echo -e $Branco"O metagoofil pesquisa no Google por tipos"\
                         "especificos"$ColorR
          echo -e $Branco"de arquivos hospedados publicamente"$ColorR
          echo -e $Branco"em um site e, opcionalmente, os baixa"\
                         "para sua"$ColorR
          echo -e $Branco"caixa local. Isso e util para coleta de Open"$ColorR
          echo -e $Branco"Source Intelligence, testes de penetracao ou"$ColorR
          echo -e $Branco"para determinar quais arquivos"\
                         "sua organizacao"$ColorR
          echo -e $Branco"esta vazando para indexadores de"\
                         "pesquisa como"$ColorR
          echo -e $Branco"o Google. Como exemplo, ele usa a consulta do"$ColorR
          echo -e $Branco"Google abaixo para encontrar todos os arquivos"\
                         ".pdf "$ColorR
          echo -e $Branco"hospedados em example.com e,"\
                         "opcionalmente, baixa"$ColorR
          echo -e $Branco"uma copia local."$ColorR
          echo -e $Branco"$ metagoofil."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/opsdisk/metagoofil"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/metagoofil/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "20" ]; then
          echo -e "Instalando Programa DotDotPwn."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dotdotpwn
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                           "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "20help" ]; then
          echo -e $BrancoBAD"Sobre DotDotPwn:"$ColorR
          echo -e $BrancoBAD"DotDotPwn - O Diretorio Traversal Fuzzer"$ColorR
          echo -e $Branco"DotDotPwn e um fuzzer inteligente"\
                         "muito flexivel"$ColorR
          echo -e $Branco"para descobrir vulnerabilidades de diretorios"\
                         "de travessia"$ColorR
          echo -e $Branco"em softwares como servidores"\
                         "HTTP/FTP/TFTP, plataformas"$ColorR
          echo -e $Branco"Web como CMSs, ERPs, Blogs, etc."$ColorR
          echo -e $BrancoBAD"Homepage: https://dotdotpwn.blogspot.ca/"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/wireghoul/dotdotpwn"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dotdotpwn/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "21" ]; then
          echo -e $Color"Instalando Programa Fragrouter."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install fragrouter
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "21help" ]; then
          echo -e $BrancoBAD"Sobre Fragrouter:"$ColorR
          echo -e $Branco"Kit de ferramentas de evasao de deteccao"$ColorR
          echo -e $Branco"de intrusao de rede."$ColorR
          echo -e $BrancoBAD"Fragrouter Homepage: http://www.anzen.com/research/nidsbench/fragrouter.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/fragrouter/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "22" ]; then
          echo -e $Color"Instalando Programa SSLyze."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sslyze
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "22help" ]; then
          echo -e $BrancoBAD"Sobre SSLyze:"$ColorR
          echo -e $Branco"SSLyze e uma ferramenta de varredura"\
                         "SSL/TLS rapida"$ColorR
          echo -e $Branco"e poderosa e uma biblioteca Python."$ColorR
          echo -e $Branco"SSLyze pode analisar a configuracao SSL/TLS"$ColorR
          echo -e $Branco"de um servidor conectando-se a ele, a fim"\
                         "de garantir que ele"$ColorR
          echo -e $Branco"use configuracoes de criptografia"\
                         "fortes (certificado, conjuntos de"$ColorR
          echo -e $Branco"cifras, curvas elipticas, etc.) e que nao seja"\
                         "vulneravel a ataques"$ColorR
          echo -e $Branco"TLS conhecidos (  Heartbleed, ROBOT, injecao"\
                         "OpenSSL CCS, etc.)."$ColorR
          echo -e $BrancoBAD"Homepage: https://nabla-c0d3.github.io/"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/nabla-c0d3/sslyze"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sslyze/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "23" ]; then
          echo -e $Color"Instalando Programa Enum4linux."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install enum4linux
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "23help" ]; then
          echo -e $BrancoBAD"Sobre Enum4linux:"$ColorR
          echo -e $Branco"Enum4linux e uma ferramenta para"\
                         "enumerar informacoes"$ColorR
          echo -e $Branco"de sistemas Windows e Samba. Ele tenta"\
                         "oferecer funcionalidade"$ColorR
          echo -e $Branco"semelhante ao enum.exe anteriormente disponivel"\
                         "em www.bindview.com."$ColorR
          echo -e $Branco"Ele e escrito em PERL e basicamente um wrapper"\
                         "em torno das ferramentas"$ColorR
          echo -e $Branco"do Samba smbclient, rpclient, net"\
                         "e nmblookup."$ColorR
          echo -e $Branco"O pacote samba e, portanto, uma dependencia."$ColorR
          echo -e $BrancoBAD"Enum4linux Homepage:"\
                            "https://labs.portcullis.co.uk/application/enum4linux/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/enum4linux/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "24" ]; then
          echo -e $Color"Instalando Programa Smtp-user-enum."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install smtp-user-enum
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "24help" ]; then
          echo -e $BrancoBAD"Sobre Smtp-user-enum:"$ColorR
          echo -e $Branco"Ferramenta de adivinhacao de nome de usuario"$ColorR
          echo -e $Branco"principalmente para uso no servico"\
                         "SMTP padrao do Solaris."$ColorR
          echo -e $Branco"Pode usar EXPN, VRFY ou RCPT TO."$ColorR
          echo -e $BrancoBAD"Homepage:"\
                            "https://pentestmonkey.net/tools/user-enumeration/smtp-user-enum"$ColorR
          echo -e $BrancoBAD"Github:"\
                            "https://github.com/pentestmonkey/smtp-user-enum"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/smtp-user-enum/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "25" ]; then
          echo -e $Color"Instalando Programa TLSSLed."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install tlssled
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "25help" ]; then
          echo -e $BrancoBAD"Sobre TLSSLed:"$ColorR
          echo -e $Branco"TLSSLed e um script de shell do Linux cujo"\
                         "objetivo e avaliar a seguranca"$ColorR
          echo -e $Branco"de uma implementacao de servidor web SSL/TLS"\
                         "(HTTPS) de destino."$ColorR
          echo -e $Branco"Ele e baseado no sslscan, um scanner SSL/TLS"\
                         "completo baseado na biblioteca openssl"\
                         "e na ferramenta"$ColorR
          echo -e $Branco"Ele e baseado em sslscan, um scanner"\
                         "SSL/TLS completo"$ColorR
          echo -e $Branco"de linha de comando openssl s_client."$ColorR
          echo -e $Branco"Os testes atuais incluem verificar se"\
                         "o destino suporta"$ColorR
          echo -e $Branco"o protocolo SSLv2, a cifra NULL, cifras"\
                         "fracas baseadas em seu"$ColorR
          echo -e $Branco"comprimento de chave"\
                         "(40 ou 56 bits), a disponibilidade de"$ColorR
          echo -e $Branco"cifras fortes (como AES), se o certificado"\
                         "digital e assinado MD5 e"$ColorR
          echo -e $Branco"os atuais recursos de renegociacao SSL/TLS."$ColorR
          echo -e $BrancoBAD"Github nao Encontado."$ColorR
          echo -e $BrancoBAD"TLSSLed Homepage: http://www.taddong.com/en/lab.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/tlssled/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "26" ]; then
          echo -e $Color"Instalando Programa TheHarvester"$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install theharvester
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "26help" ]; then
          echo -e $BrancoBAD"Sobre TheHavester:"$ColorR
          echo -e $Branco"O pacote contem uma ferramenta"\
                         "para reunir nomes"$ColorR
          echo -e $Branco"de subdominios, enderecos de e-mail, hosts"\
                         "virtuais, portas/banners abertos"$ColorR
          echo -e $Branco"e nomes de funcionarios de diferentes"\
                         "fontes publicas\n(motores de busca, servidores"\
                         "de chaves pgp)."$ColorR
          echo -e $Branco"$ restfulHarvest."$ColorR
          echo -e $Branco"$ theHarvester."$ColorR
          echo -e $Branco"$ theharvester."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/laramies/theHarvester"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/theharvester/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "27" ]; then
          echo -e $Color"Instalando Programa OWASP Maryam."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install maryam
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "27help" ]; then
          echo -e $BrancoBAD"Sobre OWASP Maryam:"$ColorR
          echo -e $Branco"A inteligencia de codigo aberto (OSINT) usa ferramentas"$ColorR
          echo -e $Branco"de codigo aberto para coletar informacoes e analisa-las"$ColorR
          echo -e $Branco"para um proposito especifico."$ColorR
          echo -e $Branco"O OSINT pode ser muito util para os especialistas"$ColorR
          echo -e $Branco"em seguranca cibernetica usarem para coletar dados"$ColorR
          echo -e $Branco"sobre organizacoes especificas."$ColorR
          echo -e $Branco"Hoje, usar fontes abertas"$ColorR
          echo -e $Branco"como Bing, Google, Yahoo, etc, para coleta"$ColorR
          echo -e $Branco"de dados, sao etapas essenciais para o"$ColorR
          echo -e $Branco"reconhecimento, que e uma tarefa comum."$ColorR
          echo -e $Branco"Deve ser uma ferramenta para automatizar essa rotina."$ColorR
          echo -e $Branco"Uma das melhores ferramentas neste campo e o OWASP Maryam."$ColorR
          echo -e $Branco"A interface do Maryam e muito semelhante ao Recon-ng e Metasploit."$ColorR
          echo -e $Branco"Se estivermos familiarizados com essas ferramentas, Maryam"$ColorR
          echo -e $Branco"sera muito facil de usar."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/saeeddhqan/Maryam"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/maryam/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "28" ]; then
          echo -e $Color"Instalando Programa Swaks."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install swaks
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "28help" ]; then
          echo -e $BrancoBAD"Sobre Swaks:"$ColorR
          echo -e $Branco"swaks (Swiss Army Knife SMTP) e uma ferramenta"$ColorR
          echo -e $Branco"de linha de comando escrita em Perl para testar"$ColorR
          echo -e $Branco"configuracoes de SMTP; ele suporta STARTTLS e SMTP AUTH"$ColorR
          echo -e $Branco"(PLAIN, LOGIN, CRAM-MD5, SPA e DIGEST-MD5)."$ColorR
          echo -e $Branco"swaks permite parar a caixa de dialogo SMTP"$ColorR
          echo -e $Branco"em qualquer estagio, por exemplo, para verificar"$ColorR
          echo -e $Branco"RCPT TO: sem realmente enviar um e-mail."$ColorR
          echo -e $Branco"Se voce esta gastando muito tempo iterando"$ColorR
          echo -e $Branco"“telnet foo.example 25” swaks e para voce."$ColorR
          echo -e $BrancoBAD"Swaks Homepage: https://www.jetmore.org/john/code/swaks/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/swaks/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "29" ]; then
          echo -e $Color"Instalando Programa SSLsplit."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sslsplit
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "29help" ]; then
          echo -e $BrancoBAD"Sobre SSLsplit:"$ColorR
          echo -e $Branco"SSLsplit e uma ferramenta para ataques"\
                         "\nman-in-the-middle contra conexoes"$ColorR
          echo -e $Branco"de rede criptografadas SSL/TLS."$ColorR
          echo -e $Branco"As conexoes sao interceptadas de forma"\
                         "transparente por meio"$ColorR
          echo -e $Branco"de um mecanismo de traducao de enderecos de"\
                         "\nrede e redirecionadas para SSLsplit."$ColorR
          echo -e $Branco"O SSLsplit encerra o SSL/TLS e inicia uma nova"\
                         "\nconexao SSL/TLS com o endereco"$ColorR
          echo -e $Branco"de destino original, enquanto registra todos os"\
                         "dados transmitidos."$ColorR
          echo -e $Branco"O SSLsplit destina-se a ser util para analise"\
                         "forense\nde rede e testes de penetracao."$ColorR
          echo -e $BrancoBAD"SSLsplit Homepage: https://www.roe.ch/SSLsplit"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/sslsplit/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "30" ]; then
          echo -e $Color"Instalando Programa Copy-Router-Config."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install copy-router-config
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "30help" ]; then
          echo -e $BrancoBAD"Sobre Copy-Router-Config:"$ColorR
          echo -e $Branco"Este pacote copia arquivos de"\
                         "configuracao\nde dispositivos"\
                         "Cisco que executam SNMP."$ColorR
          echo -e $BrancoBAD"Homepage: https://www.offensive-security.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/copy-router-config/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "31" ]; then
          echo -e $Color"Instalando Programa Exploitdb."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install exploitdb
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "31help" ]; then
          echo -e $BrancoBAD"Sobre Exploitdb:"$ColorR
          echo -e $Branco"O Exploit Database e um arquivo de exploits"\
                         "publicos e software"$ColorR
          echo -e $Branco"vulneravel correspondente, desenvolvido para"\
                         "uso por testadores de penetracao"$ColorR
          echo -e $Branco"e pesquisadores de vulnerabilidade."$ColorR
          echo -e $Branco"Seu objetivo e servir como a colecao"\
                         "mais abrangente"$ColorR
          echo -e $Branco"de exploits, shellcode e documentos reunidos por"\
                         "meio de"$ColorR
          echo -e $Branco"envios diretos, listas de discussao e"\
                         "outras fontes publicas, e apresenta-los"$ColorR
          echo -e $Branco"em um banco de dados disponivel gratuitamente e"\
                         "facil de navegar."$ColorR
          echo -e $Branco"O Exploit Database e um repositorio para"\
                         "exploracoes e"$ColorR
          echo -e $Branco"Prova de Conceitos em vez de avisos, tornando-o"\
                         "um recurso valioso para"$ColorR
          echo -e $Branco"aqueles que precisam de dados"\
                         "acionaveis ​​imediatamente."$ColorR
          echo -e $Branco"$ exploitdb."$ColorR
          echo -e $Branco"$ searchsploit."$ColorR
          echo -e $BrancoBAD"Exploitdb Homepage: https://www.exploit-db.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/exploitdb/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "32" ]; then
          echo -e $Color"Instalando Programa Parsero."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install parsero
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "32help" ]; then
          echo -e $BrancoBAD"Sobre Parsero:"$ColorR
          echo -e $Branco"Parsero e um script gratuito escrito em Python"$ColorR
          echo -e $Branco"que le o arquivo Robots.txt de um servidor web e"\
                         "verifica as entradas Disallow."$ColorR
          echo -e $Branco"As entradas Disallow informam aos mecanismos de\npesquisa"\
                         "quais diretorios ou arquivos"$ColorR
          echo -e $Branco"hospedados em um servidor da Web nao devem ser indexados."$ColorR
          echo -e $Branco"Por exemplo, “Disallow: /portal/login” significa que\no"\
                         "conteudo em www.example.com/portal/login"$ColorR
          echo -e $Branco"nao pode ser indexado por rastreadores como"\
                         "Google, Bing, Yahoo…\nEsta e a forma que o administrador"\
                         "tem para nao compartilhar"$ColorR
          echo -e $Branco"informacoes confidenciais ou privadas com os motores de busca."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/behindthefirewalls/Parsero"$ColorR
          echo -e $BrancoBAD"Author: Javier Nieto <javier.nieto"\
                            "at behindthefirewalls.com>"$ColorR
          echo -e $BrancoBAD"PageWeb: http://www.behindthefirewalls.com"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/parsero/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "33" ]; then
          echo -e $Color"Instalando Programa Amap."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install amap
          sleep 1
          echo -e $Color"Processo Finalizado."$
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "33help" ]; then
          echo -e $BrancoBAD"Sobre Amap:"$ColorR
          echo -e $Branco"AMAP significa Application MAPper."$ColorR
          echo -e $Branco"E uma ferramenta de varredura"\
                         "de ultima geracao para pentesters."$ColorR
          echo -e $Branco"Ele tenta identificar aplicativos\nmesmo"\ 
                         "que estejam sendo executados em uma porta diferente da normal."$ColorR
          echo -e $Branco"Ele tambem identifica aplicativos nao baseados em ASCII."$ColorR
          echo -e $Branco"Isso e feito enviando pacotes de disparo"\ 
                         "e procurando as\nrespostas em uma"\
                         "lista de strings de resposta."$ColorR
          echo -e $BrancoBAD"Amap Homepage: https://www.thc.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/amap/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "34" ]; then
          echo -e $Color"Instalando Programa Wireshark."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install wireshark
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "34help" ]; then
          echo -e $BrancoBAD"Sobre Wireshark:"$ColorR
          echo -e $Branco"Wireshark e um analisador de pacotes de rede."$ColorR
          echo -e $Branco"Ele captura cada pacote que entra ou sai de"\
                         "uma interface\nde rede e os mostra em um texto bem formatado."$ColorR
          echo -e $Branco"E usado por engenheiros de rede em todo o mundo."$ColorR
          echo -e $Branco"O Wireshark e multiplataforma e esta disponivel"\
                         "para Linux, Windows e Mac OS."$ColorR
          echo -e $Branco"Voce obtem a mesma experiencia do usuario em qualquer"\
                         "sistema operacional que usar."$ColorR
          echo -e $Branco"Para saber mais sobre o Wireshark, visite o\nsite"\
                         "oficial do Wireshark em https://www.wireshark.org"$ColorR
          echo -e $BrancoBAD"Wireshark Homepage: https://www.wireshark.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/wireshark/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "35" ]; then
          echo -e $Color"Instalando Programa Netmask."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install netmask
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "35help" ]; then
          echo -e $BrancoBAD"Sobre Netmask:"$ColorR
          echo -e $Branco"Um programa de geracao e conversao"$ColorR
          echo -e $Branco"de mascara de rede."$ColorR
          echo -e $Branco"Este e um pequeno programa util se"$ColorR
          echo -e $Branco"voce trabalha com firewalls ou roteadores"$ColorR
          echo -e $Branco"ocasionalmente (possivelmente usando isso"$ColorR
          echo -e $Branco"como um auxiliar para scripts de shell)."$ColorR
          echo -e $Branco"Ele pode determinar o menor conjunto"$ColorR
          echo -e $Branco"de mascaras de rede para especificar"$ColorR
          echo -e $Branco"um intervalo de hosts."$ColorR
          echo -e $Branco"Ele tambem pode converter entre mascara"$ColorR
          echo -e $Branco"de rede IP comum e formatos de endereco."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/tlby/netmask"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/netmask/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "36" ]; then
          echo -e $Color"Instalando Programa GoLismero."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          sudo bash
          apt-get -y install python2.7 python2.7-dev python-pip docutils git perl nmap sslscan
          cd /opt
          git clone https://github.com/golismero/golismero.git
          cd golismero
          pip2 install -r requirements.txt
          pip2 install -r requirements_unix.txt
          ln -s /opt/golismero/golismero.py /usr/bin/golismero
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "36help" ]; then
          echo -e $BrancoBAD"Sobre GoLismero:"$ColorR
          echo -e $BrancoBAD"O que e GoLismero?"$ColorR
          echo -e $Branco"GoLismero e uma estrutura de codigo"\
                         "aberto para testes de seguranca."$ColorR
          echo -e $Branco"Atualmente, e voltado para a seguranca"\
                         "da Web,\nmas pode ser facilmente expandido para outros"\
                         "tipos de varreduras."$ColorR
          echo -e $BrancoBAD"As caracteristicas mais interessantes do framework sao:"$ColorR
          echo -e $Branco"Independencia de plataforma real."$ColorR
          echo -e $Branco"Testado em Windows, Linux, *BSD e OS X."$ColorR
          echo -e $Branco"Nenhuma dependencia de biblioteca nativa."$ColorR
          echo -e $Branco"Todo o framework foi escrito em Python puro."$ColorR
          echo -e $Branco"Bom desempenho quando comparado com outros\nframeworks"\
                         "escritos em Python e outras linguagens de script."$ColorR
          echo -e $Branco"Muito facil de usar."$ColorR
          echo -e $Branco"O desenvolvimento de plugins e extremamente simples."$ColorR
          echo -e $Branco"O framework tambem coleta e unifica os resultados"$ColorR
          echo -e $Branco"de ferramentas conhecidas: sqlmap, xsser,"\
                         "openvas, dnsrecon, theharvester..."$ColorR
          echo -e $Branco"Integracao com os padroes: CWE, CVE e OWASP."$ColorR
          echo -e $Branco"Projetado para implantacao\nde cluster"\
                         "em mente (ainda nao disponivel)."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/golismero/golismero"$ColorR
          echo -e $BrancoBAD"GoLismero Homepage: http://golismero.com/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "37" ]; then
          echo -e $Color"Instalando Programa Maltego-Teeth."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install maltego-teeth
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "37help" ]; then
          echo -e $BrancoBAD"Sobre Maltego-Teeth:"$ColorR
          echo -e $Branco"Um conjunto de transformacoes"$ColorR
          echo -e $Branco"para o Maltego executar nmap, sqlmap e"$ColorR
          echo -e $Branco"muito mais em entidades no Maltego."$ColorR
          echo -e $BrancoBAD"Maltego-Teeth Homepage: https://www.maltego.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/maltego-teeth/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "38" ]; then
          echo -e $Color"Instalando Programa Dnswalk."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dnswalk
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "38help" ]; then
          echo -e $BrancoBAD"Sobre Dnswalk:"$ColorR
          echo -e $Branco"DNSwalk e um depurador de DNS."$ColorR
          echo -e $Branco"Ele executa transferencias de zona de dominios"$ColorR
          echo -e $Branco"especificados e verifica o banco de dados de varias maneiras"$ColorR
          echo -e $Branco"quanto a consistencia interna e a precisao."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/davebarr/dnswalk"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dnswalk/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "39" ]; then
          echo -e $Color"Instalando Programa Goofile."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install goofile
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "39help" ]; then
          echo -e $BrancoBAD"Sobre Goofile:"$ColorR
          echo -e $Branco"Pesquisa de tipo de arquivo\nde linha de comando"$ColorR
          echo -e $BrancoBAD"Github: https://github.com/sosukeinu/goofile"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/goofile/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "40" ]; then
          echo -e $Color"Instalando Programa Casefile."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install casefile
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "40help" ]; then
          echo -e $BrancoBAD"Sobre Casefile:"$ColorR
          echo -e $Branco"Problema de ferramenta de inteligencia offline."$ColorR
          echo -e $Branco"Combinando o grafico fantastico da Maltego"$ColorR
          echo -e $Branco"e a analise de links, esta ferramenta permite"$ColorR
          echo -e $Branco"que os analistas examinem os links entre os dados"$ColorR
          echo -e $Branco"adicionados manualmente para mapear suas informacaes."$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/maltego/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "41" ]; then
          echo -e $Color"Instalando Programa Maltego."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install maltego
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "41help" ]; then
          echo -e $BrancoBAD"Sobre Maltego:"$ColorR
          echo -e $Branco"Maltego e um aplicativo de inteligencia e forense"\
                         "\nde codigo aberto."$ColorR
          echo -e $Branco"Ele oferecera a voce uma mineracao e coleta"\
                         "de informacoes timidas, bem como"$ColorR
          echo -e $Branco"a representacao dessas informacoes\nem um formato"\
                         "facil de entender"$ColorR
          echo -e $Branco"Este pacote substitui os pacotes"\
                         "anteriores\nmatlegoce e casefile."$ColorR
          echo -e $BrancoBAD"Homepage: https://www.maltego.com/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/maltego/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "42" ]; then
          echo -e $Color"Instalando Programa Braa."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install braa
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "42help" ]; then
          echo -e $BrancoBAD"Sobre Braa:"$ColorR
          echo -e $Branco"Braa e um scanner snmp em massa."$ColorR
          echo -e $Branco"O uso pretendido de tal ferramenta e, obviamente,"\
                         "\nfazer consultas"$ColorR
          echo -e $Branco"SNMP - mas, diferentemente do snmpget ou snmpwalk"\
                         "do net-snmp, ele e capaz de"$ColorR
          echo -e $Branco"consultar dezenas ou centenas de hosts simultaneamente"\
                         "e em um unico processo."$ColorR
          echo -e $Branco"Assim, ele consome pouquissimos recursos do sistema"\
                         "e faz a varredura MUITO rapido."$ColorR
          echo -e $Branco"Braa implementa sua PROPRIA pilha snmp, entao\nNAO"\
                         "precisa de nenhuma biblioteca SNMP como net-snmp."$ColorR
          echo -e $Branco"A implementacao e muito suja, suporta apenas varios tipos"$ColorR
          echo -e $Branco"de dados e, em qualquer caso, nao pode ser"\
                         "declarada\n (-conforme com o padrao-)!"$ColorR
          echo -e $Branco"Ele foi projetado para ser rapido, e e rapido."$ColorR
          echo -e $Branco"Por esta razao (bem, e tambem por causa da preguica do autor ;)"\
                         "\nnao ha analisador ASN."$ColorR
          echo -e $Branco"1 no braa - o usuario TEM que saber os valores"\
                         "\nnumericos dos OIDs"$ColorR
          echo -e $Branco"(por exemplo .1.3.6.1.2.1.1.5.0 em vez de system.sysName.0)."$ColorR
          echo -e $BrancoBAD"Braa Homepage: http://s-tech.elsat.net.pl/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/braa/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "43" ]; then
          echo -e $Color"Instalando Programa Dmitry."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dmitry
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "43help" ]; then
          echo -e $BrancoBAD"Sobre DMitry:"$ColorR
          echo -e $Branco"O DMitry e um aplicativo de linha de comando"\
                         "UNIX/(GNU)Linux escrito em C."$ColorR
          echo -e $Branco"O DMitry pode encontrar possiveis subdominios, enderecos"$ColorR
          echo -e $Branco"de e-mail, informacoes de tempo de atividade,"\
                         "\nexecutar varredura"$ColorR
          echo -e $Branco"de porta tcp, pesquisas whois e muito mais."$ColorR
          echo -e $BrancoBAD"Dmitry Homepage:"\
                            "http://www.mor-pah.net/index.php?file=projects/dmitry"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dmitry/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "44" ]; then
          echo -e $Color"Instalando Programa EnumIAX."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install enumiax
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "44help" ]; then
          echo -e $BrancoBAD"Sobre EnumIAX:"$ColorR
          echo -e $Branco"Enumerador de nome de usuario do protocolo IAX"\
                         "\nenumerador de forca bruta."$ColorR
          echo -e $Branco"enumIAX pode operar em dois modos distintos; Adivinhacao de"$ColorR
          echo -e $Branco"nome de usuario sequencial ou ataque de dicionario."$ColorR
          echo -e $BrancoBAD"Enumiax Homepage: https://enumiax.sourceforge.net/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/enumiax/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "45" ]; then
          echo -e $Color"Instalando Programa InTrace."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install intrace
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "45help" ]; then
          echo -e $BrancoBAD"Sobre InTrace:"$ColorR
          echo -e $Branco"O InTrace e um aplicativo do tipo traceroute que permite"$ColorR
          echo -e $Branco"aos usuarios enumerar saltos de IP explorando conexoes"$ColorR
          echo -e $Branco"TCP existentes, tanto iniciadas a partir da rede"\
                         "local (sistema local)"$ColorR
          echo -e $Branco"quanto de hosts remotos."$ColorR
          echo -e $Branco"Pode ser util para reconhecimento\nde"\
                         "rede e desvio de firewall."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/robertswiecki/intrace"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/intrace/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "46" ]; then
          echo -e $Color"Instalando Programa Firewalk."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install firewalk
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "46help" ]; then
          echo -e $BrancoBAD"Sobre Firewalk:"$ColorR
          echo -e $Branco"O Firewalk e uma ferramenta de seguranca de"\
                         "rede de reconhecimento"$ColorR
          echo -e $Branco"ativo que tenta determinar quais protocolos de camada 4"$ColorR
          echo -e $Branco"um determinado dispositivo de encaminhamento de IP passara."$ColorR
          echo -e $Branco"Ele funciona enviando pacotes TCP ou UDP"\
                         "com um TTL um salto maior"$ColorR
          echo -e $Branco"que o gateway de destino."$ColorR
          echo -e $Branco"Se o gateway permitir o trafego, ele encaminhara"\
                         "os pacotes para o"$ColorR
          echo -e $Branco"proximo salto, onde eles expirarao e emitira"\
                         "uma mensagem ICMP_TIME_EXCEEDED."$ColorR
          echo -e $Branco"Caso contrario, ele provavelmente descartara"$ColorR
          echo -e $Branco"os pacotes e nao havera resposta."$ColorR
          echo -e $Branco"Para obter o IP TTL correto que resultara em pacotes"$ColorR
          echo -e $Branco"expirando um salto alem do gateway, o Firewalk"$ColorR
          echo -e $Branco"precisa aumentar a contagem de saltos."$ColorR
          echo -e $Branco"Ele faz isso da mesma maneira que o traceroute funciona."$ColorR
          echo -e $Branco"Depois que a varredura e vinculada"$ColorR
          echo -e $Branco"(ou seja, o Firewalk conhece a contagem de saltos"\
                         "do gateway), ela inicia a varredura."$ColorR
          echo -e $Branco"O host de destino final nao precisa ser alcancado, ele"\
                         "so precisa estar"$ColorR
          echo -e $Branco"em algum lugar a jusante, do outro lado do"\
                         "gateway, do host de varredura."$ColorR
          echo -e $Branco"O Firewalk ajuda a avaliar a configuracao de"\ 
                         "seguranca de dispositivos"$ColorR
          echo -e $Branco"de filtragem de pacotes, como os usados"\
                         "em sistemas de firewall."$ColorR
          echo -e $Branco"E relevante para avaliacoes de seguranca de rede, como testes"$ColorR
          echo -e $Branco"de penetracao de rede (pentests)."$ColorR
          echo -e $BrancoBAD"Homepage:"\
                            "http://packetfactory.openwall.net/projects/firewalk/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/firewalk/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "47" ]; then
          echo -e $Color"Instalando Programa DnsMap."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install dnsmap
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "47help" ]; then
          echo -e $BrancoBAD"Sobre DnsMap:"$ColorR
          echo -e $Branco"O dnsmap verifica um dominio em busca de subdominios"\
                         "comuns usando uma"$ColorR
          echo -e $Branco"lista de palavras interna ou externa (se especificada"\
                         "usando a opcao -w)."$ColorR
          echo -e $Branco"A lista de palavras interna tem cerca de 1000 palavras"$ColorR
          echo -e $Branco"em ingles e espanhol como ns1, firewall servicios e smtp."$Color
          echo -e $Branco"Assim sera possivel pesquisar smtp.example.com dentro\nde"\
                         "example.com automaticamente."$ColorR
          echo -e $Branco"Os resultados podem ser salvos em formato CSV\ne legivel"\
                         "para processamento posterior."$ColorR
          echo -e $Branco"O dnsmap NAO requer privilegios de root para ser"\
                         "executado\ne NAO deve ser executado"$ColorR
          echo -e $Branco"com tais privilegios por motivos de seguranca."$ColorR
          echo -e $Branco"O dnsmap foi lancado originalmente em 2006"$ColorR
          echo -e $Branco"e foi inspirado na historia ficticia"\
                         "“The Thief No One Saw” de Paul Craig,"$ColorR
          echo -e $Branco"que pode ser encontrada no livro “Stealing the Network - How"\
                         "to 0wn the Box”."$ColorR
          echo -e $Branco"O dnsmap destina-se principalmente a ser usado por"\
                         "pentesters durante"$ColorR
          echo -e $Branco"a fase de coleta/enumeracao de informacoes\ndas"\
                         "avaliacoes de seguranca da infraestrutura."$ColorR
          echo -e $Branco"Durante o estagio de enumeracao, o consultor de"\
                         "seguranca normalmente"$ColorR
          echo -e $Branco"descobriria os netblocks de IP da empresa-alvo,"\
                         "nomes\nde dominio, numeros de telefone etc."$ColorR
          echo -e $Branco"A forca bruta de subdominio e outra tecnica que deve ser"$ColorR
          echo -e $Branco"usada no estagio de enumeracao, pois"\
                         "e especialmente util quando"$ColorR
          echo -e $Branco"outras tecnicas de enumeracao de dominio, como transferencias"$ColorR
          echo -e $Branco"de zona, nao funcionam (a proposito, raramente vejo"\
                         "transferencias de zona"$ColorR
          echo -e $Branco"sendo permitidas publicamente atualmente)."$ColorR
          echo -e $BrancoBAD"Coisas divertidas que podem acontecer:"$ColorR
          echo -e $Branco"Encontrar servidores de acesso remoto interessantes"$ColorR
          echo -e $Branco"(por exemplo: https:://extranet.example.com)."$ColorR
          echo -e $Branco"Encontrar servidores mal configurados e/ou sem patches"$ColorR
          echo -e $Branco"(por exemplo: test.example.com)."$ColorR
          echo -e $Branco"Encontrar novos nomes de dominio que permitirao mapear blocos"$ColorR
          echo -e $Branco"de rede nao obvios/dificeis de encontrar"\
                         "de sua organizacao de destino"$ColorR
          echo -e $Branco"(pesquisas de registro - tambem conhecido"\
                         "como whois e seu amigo)."$ColorR
          echo -e $Branco"As vezes, voce descobre que alguns subdominios de forca bruta"$ColorR
          echo -e $Branco"sao resolvidos para enderecos IP internos (RFC 1918)."$ColorR
          echo -e $Branco"Isso e otimo, pois as vezes eles sao registros “A” realmente"$ColorR
          echo -e $Branco"atualizados, o que significa que e possivel"\
                         "enumerar servidores"$ColorR
          echo -e $Branco"internos de uma organizacao de destino da"\
                         "Internet usando apenas"$ColorR
          echo -e $Branco"a resolucao de DNS padrao (em oposicao"\ 
                         "a transferencias de zona, por exemplo)."$ColorR
          echo -e $Branco"Descubra dispositivos incorporados configurados"\
                         "usando servicos"$ColorR
          echo -e $Branco"de DNS dinamico (por exemplo: Cameras IP)."$ColorR
          echo -e $Branco"Esse metodo e uma alternativa para encontrar"\
                         "dispositivos por meio"$ColorR
          echo -e $Branco"das tecnicas de hackers do Google."$ColorR
          echo -e $Branco"Este pacote fornece dois comandos"\
                         "possiveis: dnsmap e dnsmap-bulk."$ColorR
          echo -e $Branco"Este programa e util para pentesters, hackers"$ColorR
          echo -e $Branco"eticos e especialistas forenses."$ColorR
          echo -e $Branco"Tambem pode ser usado para testes de seguranca."$ColorR
          echo -e $BrancoBAD"Github:"\
                            "https://github.com/resurrecting-open-source-projects/dnsmap"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/dnsmap/"
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "48" ]; then
          echo -e $Color"Instalando Programa NBTscan."$Color
          apt-get -y update 1> /dev/nul 2> /dev/null
          apt-get -y install nbtscan
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "48help" ]; then
          echo -e $BrancoBAD"Sobre NBTscan:"$ColorR
          echo -e $Branco"NBTscan e um programa para varredura de redes IP"$ColorR
          echo -e $Branco"para informacoes de nome NetBIOS."$ColorR
          echo -e $Branco"Ele envia a consulta de status do NetBIOS"$ColorR
          echo -e $Branco"para cada endereco no intervalo fornecido"$ColorR
          echo -e $Branco"e lista as informacoes recebidas em um formato"$ColorR
          echo -e $Branco"legivel por humanos."$ColorR
          echo -e $Branco"Para cada host respondido, ele lista o endereco IP,"$ColorR
          echo -e $Branco"o nome do computador NetBIOS, o nome de usuario"$ColorR
          echo -e $Branco"conectado e o endereco MAC (como Ethernet)."$ColorR
          echo -e $Branco"Este programa e util para verificacoes de seguranca,"$ColorR
          echo -e $Branco"descoberta de rede e investigacoes forenses."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/resurrecting-open-source-projects/nbtscan"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/nbtscan/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "49" ]; then
          echo -e $Color"Instalando Programa Firece."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install fierce
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "49help" ]; then
          echo -e $BrancoBAD"Sobre Firece:"$ColorR
          echo -e $Branco"Fierce e um scanner semi-leve que ajuda a localizar espaco"$ColorR
          echo -e $Branco"IP nao contiguo e nomes de host em dominios especificados."$ColorR
          echo -e $Branco"E realmente um pre-cursor para nmap, unicornscan, nessus,"$ColorR
          echo -e $Branco"nikto, etc, ja que todos eles exigem que voce ja saiba"$ColorR
          echo -e $Branco"qual espaco IP esta procurando."$ColorR
          echo -e $Branco"Isso nao realiza exploracao e nao varre"\
                         "toda a internet\nindiscriminadamente."$ColorR
          echo -e $Branco"Destina-se especificamente a localizar alvos provaveis ​​dentro"$ColorR
          echo -e $Branco"e fora de uma rede corporativa."$ColorR
          echo -e $Branco"Como ele usa principalmente o DNS, muitas"\
                         "vezes voce encontrara"$ColorR
          echo -e $Branco"redes mal configuradas que vazam espaco de endereco interno."$ColorR
          echo -e $Branco"Isso e especialmente util em malware direcionado."$ColorR
          echo -e $Branco"Originalmente escrito por RSnake junto com outros"$ColorR
          echo -e $Branco"em \033[0;37mhttp://ha.ckers.org/."$ColorR
          echo -e $Branco"Esta e simplesmente uma conversao para Python 3"$ColorR
          echo -e $Branco"para simplificar e modernizar a base de codigo."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/mschwager/fierce"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/fierce/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "50" ]; then
          echo -e $Color"Instalando Programa iSMTP."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install ismtp
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "50help" ]; then
          echo -e $BrancoBAD"Sobre iSMTP:"$ColorR
          echo -e $Branco"Teste para enumeracao de usuario SMTP"$ColorR
          echo -e $Branco"(RCPT TO e VRFY), falsificacao interna e retransmissao."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/altjx/ipwn/tree/master/iSMTP"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/ismtp/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "51" ]; then
          echo -e $Color"Instalando Programa Unicornscan."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install unicornscan
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "51help" ]; then
          echo -e $BrancoBAD"Sobre Unicornscan:"$ColorR
          echo -e $Branco"O Unicornscan e um novo mecanismo de coleta"$ColorR
          echo -e $Branco"e correlacao de informacoes criado para e por membros"$ColorR
          echo -e $Branco"das comunidades de pesquisa e teste de seguranca."$ColorR
          echo -e $Branco"Ele foi projetado para fornecer um mecanismo"$ColorR
          echo -e $Branco"escalavel, preciso, flexivel e eficiente."$ColorR
          echo -e $Branco"E liberado para uso da comunidade sob os termos"$ColorR
          echo -e $Branco"da licenca GPL."$ColorR
          echo -e $BrancoBAD"Beneficios:"$ColorR
          echo -e $Branco"O Unicornscan e uma tentativa de uma pilha TCP/IP"$ColorR
          echo -e $Branco"distribuida de usuario-terra."$ColorR
          echo -e $Branco"Destina-se a fornecer ao pesquisador uma interface"$ColorR
          echo -e $Branco"superior para introduzir um estimulo e medir uma"$ColorR
          echo -e $Branco"resposta de um dispositivo ou rede habilitado para TCP/IP."$ColorR
          echo -e $Branco"Embora atualmente tenha centenas de recursos individuais,"$ColorR
          echo -e $Branco"um conjunto principal de habilidades inclui:"$ColorR
          echo -e $Branco"* Verificacao de TCP sem estado assincrona com todas"$ColorR
          echo -e $Branco"as variacoes de sinalizadores de TCP."$ColorR
          echo -e $Branco"* Captura de banner TCP sem estado assincrono."$ColorR
          echo -e $Branco"* Varredura UDP especifica do protocolo assincrono"$ColorR
          echo -e $Branco"(enviando o suficiente de uma assinatura para obter uma resposta)."$ColorR
          echo -e $Branco"* Sistema operacional remoto ativo e passivo, aplicativo"$ColorR
          echo -e $Branco"e identificacao de componentes analisando as respostas."$ColorR
          echo -e $Branco"* Registro e filtragem de arquivos PCAP."$ColorR
          echo -e $Branco"* Saida de banco de dados relacional."$ColorR
          echo -e $Branco"* Suporte a modulos personalizados."$ColorR
          echo -e $Branco"* Visualizacoes personalizadas do conjunto de dados."$ColorR
          echo -e $BrancoBAD"Github: https://gitlab.com/kalilinux/packages/unicornscan"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/unicornscan/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "52" ]; then
          echo -e $Color"Instalando Programa Lbd."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install lbd
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "52help" ]; then
          echo -e $BrancoBAD"Sobre Lbd:"$ColorR
          echo -e $Branco"Verifica se um determinado dominio\nusa"\
                  "balanceamento de carga."$ColorR
          echo -e $BrancoBAD"Lbd Homepage: http://ge.mine.nu/code/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/lbd/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "53" ]; then
          echo -e $Color"Instalando Programa Masscan."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install masscan
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "53help" ]; then
          echo -e $BrancoBAD"Sobre Masscan:"$ColorR
          echo -e $Branco"MASSCAN e um scanner de porta TCP que transmite"$ColorR
          echo -e $Branco"pacotes SYN de forma assincrona e produz resultados"$ColorR
          echo -e $Branco"semelhantes ao nmap, o scanner de porta mais famoso."$ColorR
          echo -e $Branco"Internamente, ele opera mais como scanrand, unicornscan"$ColorR
          echo -e $Branco"e ZMap, usando transmissao assincrona."$ColorR
          echo -e $Branco"E um utilitario flexivel que permite enderecos"$ColorR
          echo -e $Branco"arbitrarios e intervalos de portas."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/robertdavidgraham/masscan"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/masscan/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "54" ]; then
          echo -e $Color"Instalando Programa SET."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install set
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "54help" ]; then
          echo -e $BrancoBAD"Sobre SET:"$ColorR
          echo -e $Branco"O Social-Engineer Toolkit (SET) e uma ferramenta"$ColorR
          echo -e $Branco"de codigo aberto orientada a Python destinada a testes"$ColorR
          echo -e $Branco"de penetracao em Social-Engineering."$ColorR
          echo -e $Branco"$ se-toolkit."$ColorR
          echo -e $Branco"$ setoolkit."$ColorR
          echo -e $BrancoBAD"Set Homepage:"\
                  "https://www.trustedsec.com/downloads/social-engineer-toolkit/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/set/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "55" ]; then
          echo -e $Color"Instalando Programa P0f."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install p0f
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "55help" ]; then
          echo -e $BrancoBAD"Sobre P0f:"$ColorR
          echo -e $Branco"O P0F realiza deteccao passiva do sistema operacional"$ColorR
          echo -e $Branco"com base em pacotes Syn. Ao contrario do Nmap e Queso, o"$ColorR
          echo -e $Branco"P0F nao e o reconhecimento sem enviar dados."$ColorR
          echo -e $Branco"Alem disso, e capaz de determinar a distancia"$ColorR
          echo -e $Branco"para o host remoto e pode ser usado para determinar"$ColorR
          echo -e $Branco"a estrutura de uma rede externa ou local."$ColorR
          echo -e $Branco"Ao executar no gateway de uma rede, e capaz de coletar"$ColorR
          echo -e $Branco"grandes quantidades de dados e fornecer estatisticas uteis."$ColorR
          echo -e $Branco"Em um computador com extremidade do"\
                           "usuario, ele pode ser usado"$ColorR
          echo -e $Branco"como poderoso add-on IDS. O P0F suporta"\
                           "expressoes de filtragem"$ColorR
          echo -e $Branco"de estilo tcpdump completo e possui uma base de dados de"$ColorR
          echo -e $Branco"impressoes digitais extensiveis e detalhadas."$ColorR
          echo -e $Branco"$ p0f."$ColorR
          echo -e $BrancoBAD"P0f Homepage: http://lcamtuf.coredump.cx/p0f3/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/p0f/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "56" ]; then
          echo -e $Color"Instalando Programa SnmpCheck."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install snmpcheck
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "56help" ]; then
          echo -e $BrancoBAD"Sobre Snmpcheck:"$ColorR
          echo -e $Branco"Gosto de SnmPwalk, Snmpcheck permite que voce enumere"$ColorR
          echo -e $Branco"os dispositivos SNMP e coloque a saida em um formato amigavel"$ColorR
          echo -e $Branco"legivel muito humano."$ColorR
          echo -e $Branco"Pode ser util para testes de penetracao"$ColorR
          echo -e $Branco"ou monitoramento de sistemas."$ColorR
          echo -e $BrancoBAD"Snmpcheck Homepage:"\
                  "http://www.nothink.org/codes/snmpcheck/index.php"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/snmpcheck/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "57" ]; then
          echo -e $Color"Instalando Programa Qsslcaudit."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install qsslcaudit
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "57help" ]; then
          echo -e $BrancoBAD"Sobre Qsslcaudit:"$ColorR
          echo -e $Branco"Essa ferramenta pode ser usada para determinar"$ColorR
          echo -e $Branco"se um aplicativo que usa TLS/SSL"$ColorR
          echo -e $Branco"para suas transferencias de dados"$ColorR
          echo -e $Branco"faz isso de maneira segura."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/gremwell/qsslcaudit"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/qsslcaudit/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "58" ]; then
          echo -e $Color"Instalando Programa Twofi."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install twofi
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "58help" ]; then
          echo -e $BrancoBAD"Sobre Twofi:"$ColorR
          echo -e $Branco"Ao tentar quebrar senhas, listas de palavras personalizadas"$ColorR
          echo -e $Branco"sao adicoes muito uteis"$ColorR
          echo -e $Branco"aos dicionarios padrao."$ColorR
          echo -e $Branco"Uma ideia interessante lancada originalmente"$ColorR
          echo -e $Branco"no blog “7 Habits of Highly Effective Hackers”"$ColorR
          echo -e $Branco"foi usar o Twitter para ajudar"$ColorR
          echo -e $Branco"a gerar essas listas com base"$ColorR
          echo -e $Branco"em buscas por palavras-chave relacionadas"$ColorR
          echo -e $Branco"a lista que esta sendo quebrada."$ColorR
          echo -e $Branco"Eu expandi essa ideia em twofi, que"$ColorR
          echo -e $Branco"pegara varios termo de pesquisa"$ColorR
          echo -e $Branco"e retornara uma lista de palavras"$ColorR
          echo -e $Branco"classificadas primeiro pelas mais comuns."$ColorR
          echo -e $Branco"$ twofi."$ColorR
          echo -e $BrancoBAD"Twofi Homepage:"\
                  "https://www.digininja.org/projects/twofi.php"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/twofi/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "59" ]; then
          echo -e $Color"Instalando Programa 0trace."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install 0trace
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "59help" ]; then
          echo -e $BrancoBAD"Sobre 0tracer:"$ColorR
          echo -e $Branco"O pacote e uma ferramenta traceroute"$ColorR
          echo -e $Branco"que pode ser executada dentro de"$ColorR
          echo -e $Branco"uma conexao TCP aberta existente,"$ColorR
          echo -e $Branco"contornando alguns tipos de filtros"$ColorR
          echo -e $Branco"de pacotes com estado com facilidade."$ColorR
          echo -e $BrancoBAD"0tracer Homepage: https://lcamtuf.coredump.cx/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/0trace/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "60" ]; then
          echo -e $Color"Instalando Programa Xplico."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install xplico
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "60help" ]; then
          echo -e $BrancoBAD"Sobre Xplico:"$ColorR
          echo -e $Branco"O objetivo do Xplico e extrair de uma captura de"$ColorR
          echo -e $Branco"trafego de internet os dados dos aplicativos contidos."$ColorR
          echo -e $Branco"Por exemplo, de um arquivo pcap, o Xplico extrai"$ColorR
          echo -e $Branco"cada e-mail (protocolos POP, IMAP e SMTP), todo o"$ColorR
          echo -e $Branco"conteudo HTTP, cada chamada VoIP (SIP, MGCP, H323), FTP, TFTP"$ColorR
          echo -e $Branco"e assim por diante."$ColorR
          echo -e $Branco"Xplico nao e um analisador de protocolo de rede."$ColorR
          echo -e $Branco"$ mfbc."$ColorR
          echo -e $Branco"$ mwmail."$ColorR
          echo -e $Branco"$ xplico-webui."$ColorR
          echo -e $Branco"$ mfile."$ColorR
          echo -e $Branco"$ trigcap."$ColorR
          echo -e $Branco"$ xplico-webui-stop."$ColorR
          echo -e $Branco"$ mpaltalk."$ColorR
          echo -e $Branco"$ xplico."$ColorR
          echo -e $BrancoBAD"Xplico Homepage: http://www.xplico.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/xplico/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "61" ]; then
          echo -e $Color"Instalando Programa Hping3."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install hping3
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "61help" ]; then
          echo -e $BrancoBAD"Sobre Hping3:"$ColorR
          echo -e $Branco"hping3 e uma ferramenta de rede capaz de enviar pacotes"\
                         "\nICMP/UDP/TCP"$ColorR
          echo -e $Branco"personalizados e exibir respostas de destino"\
                         "como o ping faz com respostas ICMP."$ColorR
          echo -e $Branco"Ele lida com fragmentacao e corpo e tamanho de pacote"\
                         "\narbitrario, e"$ColorR
          echo -e $Branco"pode ser usado para transferir arquivos"\
                         "\nsob protocolos suportados."$ColorR
          echo -e $Branco"Usando o hping3, voce pode testar regras de firewall, executar"$ColorR
          echo -e $Branco"varredura de porta (spoofed), testar"\
                         "o desempenho da rede usando"$ColorR
          echo -e $Branco"diferentes protocolos, fazer descoberta"\
                         "\nde MTU de caminho, executar"$ColorR
          echo -e $Branco"acoes do tipo traceroute em diferentes protocolos, sistemas"$ColorR
          echo -e $Branco"operacionais remotos de impressao digital, auditar"\
                         "pilhas TCP/IP, etc."$ColorR
          echo -e $Branco"hping3 e programavel usando a linguagem Tcl."$ColorR
          echo -e $BrancoBAD"Hping3 Homepage: http://www.hping.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/hping3/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "62" ]; then
          echo -e $Color"Instalando Programa OSRFramework."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install osrframework
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          echo -e $Color"Alguns dos comandos para chamar este programa:"\
                        "osrf, osrframework-cli"$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "62help" ]; then
          echo -e $BrancoBAD"Sobre OSRFramework:"$ColorR
          echo -e $Branco"Este pacote contem um conjunto de bibliotecas"\
                         "desenvolvidas pela i3visio"$ColorR
          echo -e $Branco"para executar tarefas de Open Source Intelligence."$ColorR
          echo -e $Branco"Eles incluem referencias a varios aplicativos diferentes"$ColorR
          echo -e $Branco"relacionados a verificacao de nome de usuario, pesquisas"\
                         "de DNS, pesquisa"$ColorR
          echo -e $Branco"de vazamentos de informacoes, pesquisa\nna web"\
                         "profunda, extracao de expressoes regulares"$ColorR
          echo -e $Branco"e muitos outros."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/i3visio/osrframework"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/osrframework/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "63" ]; then
          echo -e $Color"Instalando Programa Fping."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install fping
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "63" ]; then
          echo -e $BrancoBAD"Sobre Fping:"$ColorR
          echo -e $Branco"fping e um programa semelhante"$ColorR
          echo -e $Branco"ao ping que usa a solicitacao de eco"$ColorR
          echo -e $Branco"do protocolo ICMP (Internet Control Message Protocol)"$ColorR
          echo -e $Branco"para determinar se um host de destino esta respondendo."$ColorR
          echo -e $Branco"fping difere de ping porque voce pode especificar"$ColorR
          echo -e $Branco"qualquer numero de alvos na linha de comando,"$ColorR
          echo -e $Branco"ou especificar um arquivo contendo as listas"$ColorR
          echo -e $Branco"de alvos para ping."$ColorR
          echo -e $Branco"Em vez de enviar para um destino"$ColorR
          echo -e $Branco"ate que ele expire ou responda, o fping"$ColorR
          echo -e $Branco"enviara um pacote de ping e passara"$ColorR
          echo -e $Branco"para o proximo destino"$ColorR
          echo -e $Branco"de maneira round-robin."$ColorR
          echo -e $BrancoBAD"Fping Homepage: https://www.fping.org/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/fping/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "64" ]; then
          echo -e $Color"Instalando Programa Legion."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install legion
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "64help" ]; then
          echo -e $BrancoBAD"Sobre Legion:"$ColorR
          echo -e $Branco"Este pacote contem uma ferramenta"$ColorR
          echo -e $Branco"de teste de penetracao de rede de codigo aberto,"$ColorR
          echo -e $Branco"facil de usar, superextensivel e semiautomatizada"$ColorR
          echo -e $Branco"que auxilia na descoberta, reconhecimento e exploracao"$ColorR
          echo -e $Branco"de sistemas de informacao."$ColorR
          echo -e $Branco"Legion e um fork de Sparta da SECFORCE."$ColorR
          echo -e $Branco"$ legion."$ColorR
          echo -e $BrancoBAD"Legion Homepage: https://govanguard.com/legion/"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/legion/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "65" ]; then
          echo -e $Color"Instalando Programa Xprobe."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install xprobe
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "65help" ]; then
          echo -e $BrancoBAD"Sobre Xprobe:"$ColorR
          echo -e $Branco"O Xprobe2 permite determinar qual sistema"$ColorR
          echo -e $Branco"operacional esta sendo executado em um host remoto."$ColorR
          echo -e $Branco"Ele envia varios pacotes para um host e analisa"$ColorR
          echo -e $Branco"as respostas retornadas."$ColorR
          echo -e $Branco"A funcionalidade do Xprobe2 e comparavel"$ColorR
          echo -e $Branco"ao recurso de impressao digital do sistema"$ColorR
          echo -e $Branco"operacional no nmap (escrito por um Fyodor diferente):"$ColorR
          echo -e $Branco"* Emite seu nivel de confianca sobre"$ColorR
          echo -e $Branco"o sistema operacional no host remoto."$ColorR
          echo -e $Branco"* Permanece utilizavel mesmo se sistemas"$ColorR
          echo -e $Branco"intermediarios (roteadores, firewalls)"$ColorR
          echo -e $Branco"fizerem pequenas modificacoes nos pacotes."$ColorR
          echo -e $Branco"* Pode listar o tipo de dispositivo intermediario"$ColorR
          echo -e $Branco"(por exemplo, “Masquerading de IP Linux”)."$ColorR
          echo -e $Branco"* A arquitetura modular permite que novos"$ColorR
          echo -e $Branco"testes de impressao digital e novas assinaturas"$ColorR
          echo -e $Branco"de SO sejam adicionados."$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/xprobe/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "66" ]; then
          echo -e $Color"Instalando Programa Arping."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install arping
          apt-get -y install iputils-arping
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "66help" ]; then
          echo -e $BrancoBAD"Sobre Arping:"$ColorR
          echo -e $Branco"O utilitario arping envia solicitacoes ARP e/ou ICMP"$ColorR
          echo -e $Branco"para o host especificado e exibe as respostas."$ColorR
          echo -e $Branco"O host pode ser especificado por seu"$ColorR
          echo -e $Branco"nome de host, seu endereco"$ColorR
          echo -e $Branco"IP ou seu endereco MAC."$ColorR
          echo -e $BrancoBAD"Arping Homepage: http://www.habets.pp.se/synscan/programs.php?prog=arping"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/arping/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "67" ]; then
          echo -e $Color"Instalando Programa Irpas."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install irpas
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "67help" ]; then
          echo -e $BrancoBAD"Sobre Irpas:"$ColorR
          echo -e $Branco"Este pacote contem uma colecao"$ColorR
          echo -e $Branco"de programas usados ​​para operacoes de rede"$ColorR
          echo -e $Branco"avancadas, testes e depuracao."$ColorR
          echo -e $Branco"O CDP e os injetores de rota podem ser uteis"$ColorR
          echo -e $Branco"em uma rede de producao."$ColorR
          echo -e $Branco"Varias outras ferramentas sao uteis"$ColorR
          echo -e $Branco"para testes de seguranca e firewall."$ColorR
          echo -e $Branco"Finalmente, algumas ferramentas como"$ColorR
          echo -e $Branco"o netenum sao uteis para scripts"$ColorR
          echo -e $Branco"gerais de administracao."$ColorR
          echo -e $Branco"Como todas as ferramentas poderosas,"$ColorR
          echo -e $Branco"pode causar grandes danos, portanto,"$ColorR
          echo -e $Branco"tenha cuidado."$ColorR
          echo -e $Branco"* cdp - Remetente do pacote do protocolo"$ColorR
          echo -e $Branco"de descoberta da Cisco."$ColorR
          echo -e $Branco"* igrp - Injetor de rota IGRP."$ColorR
          echo -e $Branco"* ass - Scanner de sistema autonomo."$ColorR
          echo -e $Branco"* irdp - remetente IRDP."$ColorR
          echo -e $Branco"* irdpresponder - remetente IRDP"$ColorR
          echo -e $Branco"* itrace - Traceroute baseado em ICMP."$ColorR
          echo -e $Branco"* tctrace - Traceroute baseado em TCP SYN."$ColorR
          echo -e $Branco"* protos - Scanner de porta baseado em ICMP."$ColorR
          echo -e $Branco"* netmask - Solicita mascara de rede via ICMP."$ColorR
          echo -e $Branco"* file2cable - Despeja qualquer arquivo binario"$ColorR
          echo -e $Branco"direto para ethernet."$ColorR
          echo -e $Branco"* dfkaa - Solucionar problemas de dispositivos"$ColorR
          echo -e $Branco"anteriormente conhecidos como Ascend"$ColorR
          echo -e $Branco"(Pipeline, etc)."$ColorR
          echo -e $Branco"* netenum - Scanner de ping projetado"$ColorR
          echo -e $Branco"para scripts de shell."$ColorR
          echo -e $Branco"* hsrp - Testador de failover HSRP."$ColorR
          echo -e $Branco"* icmp_redirect - Sistema de redirecionamento ICMP."$ColorR
          echo -e $Branco"* timestamp - Solicitante de carimbo de data/hora ICMP."$ColorR
          echo -e $Branco"* dhcpx - Servidor DHCP “exercitador”."$ColorR
          echo -e $BrancoBAD"Irpas Homepage: http://www.phenoelit.org/fr/tools.html"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/irpas/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "68" ]; then
          echo -e $Color"Instalando Programa Onesixtyone."$Color
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install onesixtyone
          sleep 1
          echo -e $Color"Processo Finalizado."$ColorR
          sleep 1
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "68help" ]; then
          echo -e $BrancoBAD"Sobre Onesixtyone:"$ColorR
          echo -e $Branco"O onesixtyone e um scanner SNMP simples"$ColorR
          echo -e $Branco"que envia solicitacoes SNMP"$ColorR
          echo -e $Branco"para o valor sysDescr de forma assincrona"$ColorR
          echo -e $Branco"com tempos de envio ajustaveis pelo usuario e,"$ColorR
          echo -e $Branco"em seguida, registra as respostas que fornecem"$ColorR
          echo -e $Branco"a descricao do software em execucao no dispositivo."$ColorR
          echo -e $Branco"A execucao do onesixtyone em uma rede classe B"$ColorR
          echo -e $Branco"(comutada de 100 Mbs com backbone de 1 Gbs)"$ColorR
          echo -e $Branco"com -w 10 oferece um desempenho de 3 segundos"$ColorR
          echo -e $Branco"por classe C, sem pacotes descartados,"$ColorR
          echo -e $Branco"e todos os 65.536 enderecos IP foram verificados"$ColorR
          echo -e $Branco"em menos de 13 minutos."$ColorR
          echo -e $Branco"$ onesixtyone."$ColorR
          echo -e $BrancoBAD"Github: https://github.com/trailofbits/onesixtyone"$ColorR
          echo -e $BrancoBAD"Kali: https://www.kali.org/tools/onesixtyone/"$ColorR
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PrompTProgramas01

     elif [ "$B" = "Back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$B" = "0" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             MenuDokaKing
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             MenuDokaKing
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             MenuDokaKing
          fi

     elif [ "$B" = "back" ]; then
          if [ $Mordomo = "Mag" ]; then
             clear
             DokaShell
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "Servant" ]; then
             clear
             DokaBanner
             FPrompt
             Categorias
          fi
          if [ $Mordomo = "star" ]; then
             clear
             Morning
             FPrompt
             Categorias
          fi

     elif [ "$B" = "P13" ]; then
          Programas13

     elif [ "$B" = "P12" ]; then
          Programas12

     elif [ "$B" = "P11" ]; then
          Programas11

     elif [ "$B" = "P10" ]; then
          Programas10

     elif [ "$B" = "P09" ]; then
          Programas09

     elif [ "$B" = "P08" ]; then
          Programas08

     elif [ "$B" = "P07" ]; then
          Programas07

     elif [ "$B" = "P06" ]; then
          Programas06

     elif [ "$B" = "P05" ]; then
          Programas05

     elif [ "$B" = "P04" ]; then
          Programas04

     elif [ "$B" = "P03" ]; then
          Programas03

     elif [ "$B" = "P02" ]; then
          Programas02

     elif [ "$B" = "P01" ]; then
          Programas01

     elif [ "$B" = "Programas01" ]; then
          Programas01

     elif [ "$B" = "Programas02" ]; then
          Programas02

     elif [ "$B" = "Programas03" ]; then
          Programas03

     elif [ "$B" = "Programas04" ]; then
          Programas04

     elif [ "$B" = "Programas05" ]; then
          Programas05

     elif [ "$B" = "Programas06" ]; then
          Programas06

     elif [ "$B" = "Programas07" ]; then
          Programas07

     elif [ "$B" = "Programas08" ]; then
          Programas08

     elif [ "$B" = "Programas09" ]; then
          Programas09

     elif [ "$B" = "Programas10" ]; then
          Programas10

     elif [ "$B" = "Programas11" ]; then
          Programas11

     elif [ "$B" = "Programas12" ]; then
          Programas12

     elif [ "$B" = "Programas13" ]; then
          Programas13

     elif [ "$B" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$B" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     else
        if [ $Mordomo = "Mag" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           FPrompt
           Categorias2P1
           FPromptC
           Programas01
        fi
        if [ $Mordomo = "Servant" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           FPrompt
           Categorias2P1
           FPromptC
           Programas01
        fi
        if [ $Mordomo = "star" ]; then
           ffError
           sleep 1
           clear
           Morning
           FPrompt
           Categorias2P1
           FPromptC
           Programas01
        fi
      fi
  else
     if [ $Mordomo = "Mag" ]; then
        clear
        DokaShell
        FPrompt
        Categorias2P1
        FPromptC
        Programas01
     fi
     if [ $Mordomo = "Servant" ]; then
        clear
        DokaBanner
        FPrompt
        Categorias2P1
        FPromptC
        Programas01
     fi
     if [ $Mordomo = "star" ]; then
        clear
        Morning
        FPrompt
        Categorias2P1
        FPromptC
        Programas01
     fi
   fi

if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas01
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas01
fi
if [ $Mordomo = "star" ]; then
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas01
fi
done
if [ $Mordomo = "Mag" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   FPrompt
   Categorias2P1
   FPromptC
   Programas01
fi
if [ $Mordomo = "Servant" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   FPrompt
   Categorias2P1
   FPromptC
   Programas01
fi
if [ $Mordomo = "star" ]; then
   ffError
   sleep 1
   clear
   Morning
   FPrompt
   Categorias2P1
   FPromptC
   Programas01
fi
}
PPrompt(){
echo -e $Color
read -p "$(echo -e "DNF fsociety"$Verde" >"$Color" ")" L
}
PPrompt
if [ "$L" = "01" ]; then
   L="1"
fi
if [ "$L" = "02" ]; then
   L="2"
fi
if [ "$L" = "03" ]; then
   L="3"
fi
if [ "$L" = "04" ]; then
   L="4"
fi
if [ "$L" = "05" ]; then
   L="5"
fi
if [ "$L" = "06" ]; then
   L="6"
fi
if [ "$L" = "07" ]; then
   L="7"
fi
if [ "$L" = "08" ]; then
   L="8"
fi
if [ "$L" = "09" ]; then
   L="9"
fi
Help_for_my(){
echo -e $Color$__version__$ColorR
echo -e $Amarelo"Pendencias:"$ColorR
echo -e $Amarelo"Luz fogo e acao COMUNITARIA. ^[["$ColorR
echo -e $Amarelo"N00B Progamador, Hobby. ^[["$ColorR
echo -e $Color"De um Enter para Restaurar"\
              "a Interface Padrao."$ColorR
}
while [ "$L" ];
do
  if [ "$L" ]; then
     if [ "$L" = "1" ]; then
        Categorias

     elif [ "$L" = "2" ]; then
          echo -e $Color"Atualizando Repisitorio Aguarde."$Color
          apt-get -y update
          echo -e
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          PPrompt

     elif [ "$L" = "3" ]; then
          echo -e $Color"Iniciando full-upgrade Aguarde."$Color
          sleep 3
          apt-get -y full-upgrade
          echo -e
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          PPrompt

     elif [ "$L" = "list" ]; then
          echo -e $Color
          cat /etc/apt/sources.list
          echo -e
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          PPrompt

     elif [ "$L" = "4" ]; then
          echo -e $Color"Adicionando Kali sources.list"$Amarelo
          sed -i '/Repositorios Kali Linux | Adicionado by Zwdeff/'d /etc/apt/sources.list
          sed -i '/kali kali-rolling main contrib non-free/'d /etc/apt/sources.list
          echo "# Repositorios Kali Linux | Adicionado by Zwdeff"\
          >> /etc/apt/sources.list
          apt-get -y update 1> /dev/null 2> /dev/null
          apt-get -y install sudo 1> /dev/null 2> /dev/null
          apt-get -y install gnupg gnupg1 gnupg2 1> /dev/null 2> /dev/null
          echo "deb http://http.kali.org/kali kali-rolling main"\
               "contrib non-free" >> /etc/apt/sources.list
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ED444FF07D8D0BF6
          KaliLibKeyring
          sudo apt-get -y update
          sudo apt-get -y upgrade
          sudo apt-get -y full-upgrade
          sudo apt-get -f -y install
          sleep 2
          echo -e $Color"SUA SOURCES.LIST FOI ATUALIZADA."$ColorR
          echo -e $Color"IDENTIFICOU ERROR NESTE PROCESSO?"\
                        "Utilize o comando"$ColorR
          echo -e $Color"2) Da Tela Inicial para"\
                        "checar seu Repositorio."$ColorR
          sleep 1
          echo -e
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          PPrompt

     elif [ "$L" = "HELP" ]; then
          HelpMe
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PPrompt

     elif [ "$L" = "help" ]; then
          HelpMe
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PPrompt

     elif [ "$L" = "Help" ]; then
          HelpMe
          sleep 1
          PPrompt

     elif [ "$L" = "5" ]; then
          Morningstar
          Sobre
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PPrompt

     elif [ "$L" = "6" ]; then
          echo -e $Color"Iniciando comando."$Color
          sleep 3
          apt list --upgradable
          sleep 1
          echo -e
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR

          PPrompt

     elif [ "$L" = "7" ]; then
          cmd
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PPrompt

     elif [ "$L" = "8" ]; then
          echo -e $Color"Removendo Repositorio Kali."$Color
          sed -i '/Repositorios Kali Linux | Adicionado by Zwdeff/'d /etc/apt/sources.list
          sed -i '/kali kali-rolling main contrib non-free/'d /etc/apt/sources.list
          sleep 2
          echo -e $Verde"CONCLUIDO. SEU REPOSITORIO FOI RESTAURADO."$ColorR
          sleep 4
          clear
          DokaBanner
          MenuDokaKing

     elif [ "$L" = "9" ]; then
          echo -e $Color"Instalando kali-menu."$Color
          sleep 1
          apt-get -y install kali-menu
          echo -e
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PPrompt

     elif [ "$L" = "Bar" ]; then
          katoolin_alert
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          PPrompt

     elif [ "$L" = "bar" ]; then
          katoolin_alert
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          PPrompt

     elif [ "$L" = "BAR" ]; then
          katoolin_alert
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          PPrompt

     elif [ "$L" = "Baratie" ]; then
          katoolin_alert
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          PPrompt

     elif [ "$L" = "baratie" ]; then
          katoolin_alert
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          PPrompt

     elif [ "$L" = "BARATIE" ]; then
          katoolin_alert
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          PPrompt

     elif [ "$L" = "apt" ]; then
          echo -e $Color"Atualizando Repoaitorio APT."$Color
          apt -y update
          echo -e $Color"De um Enter para Restaurar"\
                        "a Interface Padrao."$ColorR
          sleep 1
          PPrompt

     elif [ "$L" = "KaliLib" ]; then
          KaliLib

     elif [ "$L" = "Zwdeff" ]; then
          Help_for_my
          sleep 1
          PPrompt

     elif [ "$L" = "zwdeff" ]; then
          Help_for_my
          sleep 1
          PPrompt

     elif [ "$L" = "VERSAO" ]; then
          Help_for_my
          sleep 1
          PPrompt

     elif [ "$L" = "versao" ]; then
          Help_for_my
          sleep 1
          PPrompt

     elif [ "$L" = "VERSION" ]; then
          Help_for_my
          sleep 1
          PPrompt

     elif [ "$L" = "version" ]; then
          Help_for_my
          sleep 1
          PPrompt

     elif [ "$L" = "Categorias" ]; then
          Categorias

     elif [ "$L" = "categorias" ]; then
          Categorias

     elif [ "$L" = "P13" ]; then
          Programas13

     elif [ "$L" = "P12" ]; then
          Programas12

     elif [ "$L" = "P11" ]; then
          Programas11

     elif [ "$L" = "P10" ]; then
          Programas10

     elif [ "$L" = "P09" ]; then
          Programas09

     elif [ "$L" = "P08" ]; then
          Programas08

     elif [ "$L" = "P07" ]; then
          Programas07

     elif [ "$L" = "P06" ]; then
          Programas06

     elif [ "$L" = "P05" ]; then
          Programas05

     elif [ "$L" = "P04" ]; then
          Programas04

     elif [ "$L" = "P03" ]; then
          Programas03

     elif [ "$L" = "P02" ]; then
          Programas02

     elif [ "$L" = "P01" ]; then
          Programas01

     elif [ "$L" = "Programas01" ]; then
          Programas01

     elif [ "$L" = "Programas02" ]; then
          Programas02

     elif [ "$L" = "Programas03" ]; then
          Programas03

     elif [ "$L" = "Programas04" ]; then
          Programas04

     elif [ "$L" = "Programas05" ]; then
          Programas05

     elif [ "$L" = "Programas06" ]; then
          Programas06

     elif [ "$L" = "Programas07" ]; then
          Programas07

     elif [ "$L" = "Programas08" ]; then
          Programas08

     elif [ "$L" = "Programas09" ]; then
          Programas09

     elif [ "$L" = "Programas10" ]; then
          Programas10

     elif [ "$L" = "Programas11" ]; then
          Programas11

     elif [ "$L" = "Programas12" ]; then
          Programas12

     elif [ "$L" = "Programas13" ]; then
          Programas13

     elif [ "$L" = "Back" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$L" = "back" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$L" = "0" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$L" = "99" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     elif [ "$L" = "exit" ]; then
          echo -e $Color"Desligamento solicitado...Goodbay..........."$ColorR
          sleep 0
          exit

     else
        if [ $Torior = "3" ]; then
           ffError
           sleep 1
           clear
           Morning
           MenuDokaKing
        fi
        if [ $Torior = "2" ]; then
           ffError
           sleep 1
           clear
           DokaShell
           MenuDokaKing
        fi
        if [ $Torior = "1" ]; then
           ffError
           sleep 1
           clear
           DokaBanner
           MenuDokaKing
        fi
      fi
  else
     if [ $Torior = "3" ]; then
        clear
        Morning
        MenuDokaKing
     fi
     if [ $Torior = "2" ]; then
        clear
        DokaShell
        MenuDokaKing
     fi
     if [ $Torior = "1" ]; then
        clear
        DokaBanner
        MenuDokaKing
     fi
   fi

if [ $Mordomo = "star" ]; then
   clear
   Morning
   MenuDokaKing
fi
if [ $Mordomo = "Mag" ]; then
   clear
   DokaShell
   MenuDokaKing
fi
if [ $Mordomo = "Servant" ]; then
   clear
   DokaBanner
   MenuDokaKing
fi
done
if [ $Torior = "3" ]; then
   ffError
   sleep 1
   clear
   Morning
   MenuDokaKing
fi
if [ $Torior = "2" ]; then
   ffError
   sleep 1
   clear
   DokaShell
   MenuDokaKing
fi
if [ $Torior = "1" ]; then
   ffError
   sleep 1
   clear
   DokaBanner
   MenuDokaKing
fi
}
MenuDokaKing
